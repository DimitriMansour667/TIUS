import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog, ttk, colorchooser
import sys
import os
import datetime
import math
import json
import shutil
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
import markdown2

class TreeNode:
    def __init__(self, text="Node", x=0, y=0, parent=None):
        self.text = text
        self.x = x
        self.y = y
        self.parent = parent
        self.children = []
        self.width = 80
        self.height = 40
        self.color = "#E3F2FD"
        self.text_color = "#000000"
        self.border_color = "#2196F3"
        self.selected = False
        self.canvas_id = None
        self.text_id = None
        
    def add_child(self, child):
        child.parent = self
        self.children.append(child)
        
    def remove_child(self, child):
        if child in self.children:
            child.parent = None
            self.children.remove(child)
            
    def get_depth(self):
        if self.parent is None:
            return 0
        return self.parent.get_depth() + 1
        
    def get_all_descendants(self):
        descendants = []
        for child in self.children:
            descendants.append(child)
            descendants.extend(child.get_all_descendants())
        return descendants

class Task:
    def __init__(self, title="Nouvelle t√¢che", description="", status="√Ä faire", priority="Moyenne", assignee="", due_date="", linked_node=None):
        self.id = id(self)  # ID unique bas√© sur l'adresse m√©moire
        self.title = title
        self.description = description
        self.status = status  # "√Ä faire", "En cours", "Termin√©"
        self.priority = priority  # "Basse", "Moyenne", "Critique"
        self.assignee = assignee
        self.due_date = due_date
        self.linked_node = linked_node  # Lien vers un noeud de l'arbre
        self.created_date = datetime.datetime.now().strftime('%d/%m/%Y')
        
    def to_dict(self):
        """Convertir la t√¢che en dictionnaire pour la sauvegarde"""
        return {
            'title': self.title,
            'description': self.description,
            'status': self.status,
            'priority': self.priority,
            'assignee': self.assignee,
            'due_date': self.due_date,
            'linked_node_text': self.linked_node.text if self.linked_node else None,
            'created_date': self.created_date.isoformat() if hasattr(self, 'created_date') and isinstance(self.created_date, datetime.datetime) else datetime.datetime.now().isoformat()
        }
    
    @classmethod
    def from_dict(cls, data, tree_nodes=None):
        """Cr√©er une t√¢che depuis un dictionnaire"""
        task = cls(
            title=data.get('title', ''),
            description=data.get('description', ''),
            status=data.get('status', '√Ä faire'),
            priority=data.get('priority', 'Moyenne'),
            assignee=data.get('assignee', ''),
            due_date=data.get('due_date', '')
        )
        
        # Restaurer le lien avec le n≈ìud
        linked_node_text = data.get('linked_node_text')
        if linked_node_text and tree_nodes:
            for node in tree_nodes:
                if node.text == linked_node_text:
                    task.linked_node = node
                    break
        
        # Restaurer la date de cr√©ation
        if 'created_date' in data:
            try:
                task.created_date = datetime.datetime.fromisoformat(data['created_date'])
            except:
                task.created_date = datetime.datetime.now()
        
        return task
    

class LogEntry:
    def __init__(self, entry_type="manual", title="", description="", author="", category="Decision"):
        self.id = id(self)
        self.timestamp = datetime.datetime.now()
        self.entry_type = entry_type  # "auto" (automatique) ou "manual"
        self.title = title
        self.description = description
        self.author = author
        self.category = category  # "Decision", "Technical", "Meeting", "Node", "Task", "Status"
        
    def to_dict(self):
        """Convertir l'entr√©e en dictionnaire pour la sauvegarde"""
        timestamp_iso = self.timestamp.isoformat() if isinstance(self.timestamp, datetime.datetime) else datetime.datetime.now().isoformat()
        
        return {
            'entry_type': self.entry_type,
            'title': self.title,
            'description': self.description,
            'author': self.author,
            'category': self.category,
            'timestamp': timestamp_iso
        }
    
    @classmethod
    def from_dict(cls, data):
        """Cr√©er une entr√©e depuis un dictionnaire"""
        entry = cls(
            entry_type=data.get('entry_type', 'manual'),
            title=data.get('title', ''),
            description=data.get('description', ''),
            author=data.get('author', ''),
            category=data.get('category', 'Other')
        )
        
        # Restaurer le timestamp
        if 'timestamp' in data:
            try:
                entry.timestamp = datetime.datetime.fromisoformat(data['timestamp'])
            except:
                entry.timestamp = datetime.datetime.now()
        
        return entry

class Document:
    def __init__(self, filename="", file_path="", category="General", version="1.0", linked_node=None, description=""):
        self.id = id(self)
        self.filename = filename
        self.file_path = file_path
        self.stored_path = ""
        self.category = category
        self.version = version
        self.linked_node = linked_node
        self.description = description
        self.tags = []
        self.upload_date = datetime.datetime.now()
        self.file_size = os.path.getsize(file_path) if file_path and os.path.exists(file_path) else 0
        self.file_type = os.path.splitext(filename)[1].lower() if filename else ""
        
    def format_file_size(self):
        """Formater la taille du fichier de mani√®re lisible"""
        if self.file_size < 1024:
            return f"{self.file_size} B"
        elif self.file_size < 1024 * 1024:
            return f"{self.file_size / 1024:.1f} KB"
        elif self.file_size < 1024 * 1024 * 1024:
            return f"{self.file_size / (1024 * 1024):.1f} MB"
        else:
            return f"{self.file_size / (1024 * 1024 * 1024):.1f} GB"
            
    def get_file_type_icon(self):
        """Obtenir l'ic√¥ne selon le type de fichier"""
        icons = {
            ".pdf": "üìÑ", ".doc": "üìù", ".docx": "üìù", ".txt": "üìù", ".md": "üìù",
            ".xls": "üìä", ".xlsx": "üìä", ".csv": "üìä",
            ".ppt": "üìΩÔ∏è", ".pptx": "üìΩÔ∏è",
            ".jpg": "üñºÔ∏è", ".jpeg": "üñºÔ∏è", ".png": "üñºÔ∏è", ".gif": "üñºÔ∏è", ".bmp": "üñºÔ∏è",
            ".zip": "üì¶", ".rar": "üì¶", ".7z": "üì¶",
            ".py": "üêç", ".js": "üìú", ".html": "üåê", ".css": "üé®", ".json": "üìã"
        }
        return icons.get(self.file_type, "üìÑ")
        
    def get_category_icon(self):
        """Obtenir l'ic√¥ne selon la cat√©gorie"""
        icons = {
            "Sp√©cifications": "üìã", "Tests": "üß™", "Livrables": "üì¶",
            "Documentation": "üìö", "Images": "üñºÔ∏è", "Code": "üíª",
            "Rapports": "üìä", "General": "üìÑ"
        }
        return icons.get(self.category, "üìÑ")
    def to_dict(self):
        """Convertir le document en dictionnaire pour la sauvegarde"""
        upload_date_iso = self.upload_date.isoformat() if isinstance(self.upload_date, datetime.datetime) else datetime.datetime.now().isoformat()
        
        return {
            'id': getattr(self, 'id', id(self)),
            'filename': self.filename,
            'file_path': getattr(self, 'file_path', ''),
            'stored_path': getattr(self, 'stored_path', ''),
            'category': self.category,
            'version': self.version,
            'description': getattr(self, 'description', ''),
            'tags': getattr(self, 'tags', []),
            'upload_date': upload_date_iso,
            'file_size': getattr(self, 'file_size', 0),
            'file_type': getattr(self, 'file_type', ''),
            'linked_node_text': self.linked_node.text if getattr(self, 'linked_node', None) else None
        }
    
    @classmethod
    def from_dict(cls, data, tree_nodes=None):
        """Cr√©er un document depuis un dictionnaire"""
        doc = cls(
            filename=data.get('filename', ''),
            file_path=data.get('file_path', ''),
            category=data.get('category', 'General'),
            version=data.get('version', '1.0')
        )
        
        # Restaurer les attributs
        doc.id = data.get('id', id(doc))
        doc.stored_path = data.get('stored_path', '')
        doc.description = data.get('description', '')
        doc.tags = data.get('tags', [])
        doc.file_size = data.get('file_size', 0)
        doc.file_type = data.get('file_type', '')
        
        # Restaurer la date
        if 'upload_date' in data:
            try:
                doc.upload_date = datetime.datetime.fromisoformat(data['upload_date'])
            except:
                doc.upload_date = datetime.datetime.now()
        
        # Restaurer le lien avec le n≈ìud
        linked_node_text = data.get('linked_node_text')
        if linked_node_text and tree_nodes:
            for node in tree_nodes:
                if node.text == linked_node_text:
                    doc.linked_node = node
                    break
        
        return doc

class ProjectBlock:
    """Classe pour repr√©senter un bloc de projet r√©utilisable"""
    def __init__(self, name="Nouveau Bloc", description="", category="General", domain="", client=""):
        self.id = id(self)
        self.name = name
        self.description = description
        self.category = category  # "Process", "Testing", "CI/CD", "Hardware", "Software", etc.
        self.domain = domain  # "Embedded", "Web", "Mobile", "IoT", etc.
        self.client = client  # Pour les blocs sp√©cifiques client
        self.created_date = datetime.datetime.now()
        self.last_used = None
        self.usage_count = 0
        self.success_rate = 0.0  # Pourcentage de succ√®s dans les projets
        self.average_duration = 0  # Dur√©e moyenne en jours
        self.tags = []
        
        # Contenu du bloc
        self.nodes = []  # Liste des n≈ìuds (s√©rialis√©s)
        self.tasks = []  # Liste des t√¢ches templates
        self.documents = []  # Documents templates/exemples
        self.resources = []  # Templates de ressources
        self.notes = ""  # Notes d'utilisation
        
        # Historique d'utilisation
        self.usage_history = []  # Liste des utilisations avec r√©sultats
        
    def to_dict(self):
        """Convertir le bloc en dictionnaire pour la sauvegarde"""
        # G√©rer last_used
        last_used_iso = None
        if hasattr(self, 'last_used') and self.last_used:
            if isinstance(self.last_used, datetime.datetime):
                last_used_iso = self.last_used.isoformat()
            elif isinstance(self.last_used, str):
                last_used_iso = self.last_used
        
        # G√©rer created_date
        created_date_iso = datetime.datetime.now().isoformat()
        if hasattr(self, 'created_date'):
            if isinstance(self.created_date, datetime.datetime):
                created_date_iso = self.created_date.isoformat()
            elif isinstance(self.created_date, str):
                created_date_iso = self.created_date
        
        return {
            'name': self.name,
            'description': self.description,
            'category': self.category,
            'domain': getattr(self, 'domain', ''),
            'client': getattr(self, 'client', ''),
            'tags': getattr(self, 'tags', []),
            'nodes': getattr(self, 'nodes', []),
            'tasks': getattr(self, 'tasks', []),
            'usage_count': getattr(self, 'usage_count', 0),
            'success_rate': getattr(self, 'success_rate', 0.0),
            'average_duration': getattr(self, 'average_duration', 0.0),
            'last_used': last_used_iso,
            'created_date': created_date_iso,
            'notes': getattr(self, 'notes', ''),
            'usage_history': getattr(self, 'usage_history', [])
        }
    
    @classmethod
    def from_dict(cls, data):
        """Cr√©er un bloc depuis un dictionnaire"""
        block = cls(
            name=data.get('name', ''),
            description=data.get('description', ''),
            category=data.get('category', 'General'),
            domain=data.get('domain', ''),
            client=data.get('client', '')
        )
        
        # Restaurer les attributs
        block.tags = data.get('tags', [])
        block.nodes = data.get('nodes', [])
        block.tasks = data.get('tasks', [])
        block.usage_count = data.get('usage_count', 0)
        block.success_rate = data.get('success_rate', 0.0)
        block.average_duration = data.get('average_duration', 0.0)
        block.notes = data.get('notes', '')
        block.usage_history = data.get('usage_history', [])
        
        # Restaurer les dates
        if 'last_used' in data and data['last_used']:
            try:
                block.last_used = datetime.datetime.fromisoformat(data['last_used'])
            except:
                block.last_used = None
        
        if 'created_date' in data:
            try:
                block.created_date = datetime.datetime.fromisoformat(data['created_date'])
            except:
                block.created_date = datetime.datetime.now()
        
        return block
        
    def add_usage_record(self, project_name, duration_days, success=True, notes=""):
        """Ajouter un enregistrement d'utilisation"""
        record = {
            'project_name': project_name,
            'date': datetime.datetime.now().isoformat(),
            'duration_days': duration_days,
            'success': success,
            'notes': notes
        }
        self.usage_history.append(record)
        self.usage_count += 1
        self.last_used = datetime.datetime.now()
        
        # Recalculer les statistiques
        self.calculate_statistics()
        
    def calculate_statistics(self):
        """Recalculer les statistiques bas√©es sur l'historique"""
        if not self.usage_history:
            return
            
        # Taux de succ√®s
        successful_uses = sum(1 for record in self.usage_history if record.get('success', True))
        self.success_rate = (successful_uses / len(self.usage_history)) * 100
        
        # Dur√©e moyenne
        durations = [record.get('duration_days', 0) for record in self.usage_history if record.get('duration_days', 0) > 0]
        if durations:
            self.average_duration = sum(durations) / len(durations)
            
    def get_category_icon(self):
        """Obtenir l'ic√¥ne selon la cat√©gorie"""
        icons = {
            "Process": "‚öôÔ∏è", "Testing": "üß™", "CI/CD": "üîÑ", "Hardware": "üîå",
            "Software": "üíª", "Integration": "üîó", "Validation": "‚úÖ", "Documentation": "üìö",
            "Planning": "üìÖ", "Quality": "üéØ", "Security": "üîí", "General": "üì¶"
        }
        return icons.get(self.category, "üì¶")

class BlockUsageRecord:
    """Enregistrement d'utilisation d'un bloc"""
    def __init__(self, block_id, project_name, start_date, end_date=None, success=True, notes="", lessons_learned=""):
        self.block_id = block_id
        self.project_name = project_name
        self.start_date = start_date
        self.end_date = end_date
        self.success = success
        self.notes = notes
        self.lessons_learned = lessons_learned
        self.duration_days = 0
        
        if end_date and start_date:
            self.duration_days = (end_date - start_date).days



class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Configuration de la fen√™tre principale
        self.title("Gestionnaire de projet")
        self.geometry("1200x800")
        self.minsize(800, 600)
        
        # Configuration du th√®me
        ctk.set_appearance_mode("dark")  # "light" ou "dark"
        ctk.set_default_color_theme("blue")  # "blue", "green", "dark-blue"
        
        # Cr√©er l'interface utilisateur
        self.create_widgets()
        
        # Configurer la grille principale
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
    def create_widgets(self):
        """Cr√©er tous les widgets de l'interface"""
        
        # Frame de navigation (sidebar)
        self.create_sidebar()
        
        # Frame principal
        self.create_main_frame()
        
        # Barre de statut
        self.create_status_bar()
        
        # Afficher le contenu par d√©faut apr√®s que tous les widgets soient cr√©√©s
        self.show_home()
        
    def create_sidebar(self):
        """Cr√©er la barre lat√©rale de navigation"""
        self.sidebar_frame = ctk.CTkFrame(self, width=200, corner_radius=0)
        self.sidebar_frame.grid(row=0, column=0, rowspan=3, sticky="nsew")
        self.sidebar_frame.grid_rowconfigure(10, weight=1)
        
        # Logo/Titre de l'application
        self.logo_label = ctk.CTkLabel(
            self.sidebar_frame, 
            text="Menu", 
            font=ctk.CTkFont(size=20, weight="bold")
        )
        self.logo_label.grid(row=0, column=0, padx=20, pady=(20, 10))
        
        # Boutons de navigation
        self.sidebar_button_1 = ctk.CTkButton(
            self.sidebar_frame,
            text="Accueil",
            command=self.show_home,
            width=180
        )
        self.sidebar_button_1.grid(row=1, column=0, padx=20, pady=10)
        
        self.sidebar_button_2 = ctk.CTkButton(
            self.sidebar_frame,
            text="üóÇ Cadrage Projet",
            command=self.show_project_charter,
            width=180
        )
        self.sidebar_button_2.grid(row=2, column=0, padx=20, pady=10)
        
        self.sidebar_button_3 = ctk.CTkButton(
            self.sidebar_frame,
            text="üå≥ Diagramme en Arbre",
            command=self.show_tree_diagram,
            width=180
        )
        self.sidebar_button_3.grid(row=3, column=0, padx=20, pady=10)
        
        self.sidebar_button_4 = ctk.CTkButton(
            self.sidebar_frame,
            text="‚úÖ Suivi des T√¢ches",
            command=self.show_task_tracker,
            width=180
        )
        self.sidebar_button_4.grid(row=4, column=0, padx=20, pady=10)
        
        self.sidebar_button_5 = ctk.CTkButton(
            self.sidebar_frame,
            text="üí¨ Journal de Bord",
            command=self.show_decision_log,
            width=180
        )
        self.sidebar_button_5.grid(row=5, column=0, padx=20, pady=10)
        
        self.sidebar_button_6 = ctk.CTkButton(
            self.sidebar_frame,
            text="üìÅ Gestion Documents",
            command=self.show_document_manager,
            width=180
        )
        self.sidebar_button_6.grid(row=6, column=0, padx=20, pady=10)
            
        self.sidebar_button_7 = ctk.CTkButton(
            self.sidebar_frame,
            text="üì¶ Biblioth√®que Blocs",
            command=self.show_block_library,
            width=180
        )
        self.sidebar_button_7.grid(row=8, column=0, padx=20, pady=10)

        # S√©parateur
        self.separator = ctk.CTkFrame(self.sidebar_frame, height=2)
        self.separator.grid(row=9, column=0, padx=20, pady=20, sticky="ew")
        
        # Th√®me selector
        self.appearance_mode_label = ctk.CTkLabel(
            self.sidebar_frame, 
            text="Th√®me:", 
            anchor="w"
        )
        self.appearance_mode_label.grid(row=11, column=0, padx=20, pady=(10, 0))
        
        self.appearance_mode_optionemenu = ctk.CTkOptionMenu(
            self.sidebar_frame,
            values=["Light", "Dark", "System"],
            command=self.change_appearance_mode_event
        )
        self.appearance_mode_optionemenu.grid(row=12, column=0, padx=20, pady=(10, 10))
        
    def create_main_frame(self):
        """Cr√©er le frame principal de contenu"""
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.grid(row=0, column=1, padx=0, pady=0, sticky="nsew")
        self.main_frame.grid_columnconfigure(0, weight=1)
        self.main_frame.grid_rowconfigure(1, weight=1)
        
        # Titre de la page
        self.main_title = ctk.CTkLabel(
            self.main_frame,
            text="Bienvenue dans votre application",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        self.main_title.grid(row=0, column=0, padx=20, pady=10)
        
        # Zone de contenu principal
        self.content_frame = ctk.CTkScrollableFrame(self.main_frame)
        self.content_frame.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="nsew")
        self.content_frame.grid_columnconfigure(0, weight=1)
        
    def create_status_bar(self):
        """Cr√©er la barre de statut"""
        self.status_frame = ctk.CTkFrame(self, height=25)
        self.status_frame.grid(row=1, column=1, padx=0, pady=0, sticky="ew")
        
        self.status_label = ctk.CTkLabel(
            self.status_frame,
            text="Pr√™t",
            anchor="w"
        )
        self.status_label.grid(row=0, column=0, padx=10, pady=5, sticky="w")
        
    def clear_content(self):
        """Effacer le contenu actuel"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
    def show_home(self):
        """Afficher la page d'accueil"""
        self.clear_content()
        self.main_title.configure(text="Accueil")
        
        # Contenu de la page d'accueil
        welcome_text = ctk.CTkTextbox(self.content_frame, height=200)
        welcome_text.grid(row=0, column=0, padx=20, pady=20, sticky="ew")
        welcome_text.insert("0.0", 
            "Bienvenue dans le gestionnaire de projet !\n\n"
            "Cette application vous permet de :\n"
            "‚Ä¢ Naviguer entre diff√©rentes √©tapes de la r√©salisation du projet\n"
            "‚Ä¢ Exporter les diff√©rents tableaux, textes et rapports\n"
            "‚Ä¢ Ajouter votre documentation et la lier aux diff√©rentes √©tapes de conception\n\n"
        )
        
        # Boutons d'exemple
        button_frame = ctk.CTkFrame(self.content_frame)
        button_frame.grid(row=1, column=0, padx=20, pady=10, sticky="ew")
        
        example_button1 = ctk.CTkButton(
            button_frame,
            text="Ouvrir un projet",
            command=self.load_project,
        )
        example_button1.grid(row=0, column=0, padx=10, pady=10)
        
        example_button2 = ctk.CTkButton(
            button_frame,
            text="Enregistrer le projet",
            command=self.save_project,
        )
        example_button2.grid(row=0, column=1, padx=10, pady=10)
        
        self.update_status("Page d'accueil affich√©e")
        
    def show_project_charter(self):
        """Afficher le module de cadrage / charte de projet"""
        self.clear_content()
        self.main_title.configure(text="üóÇ Cadrage Projet")
        
        # Configurer content_frame pour utiliser tout l'espace disponible
        self.content_frame.grid_rowconfigure(1, weight=1)
        self.content_frame.grid_columnconfigure(0, weight=1)
        self.content_frame.grid_columnconfigure(1, weight=1)
        self.content_frame.grid_columnconfigure(2, weight=1)
        
        # Initialiser les variables si elles n'existent pas
        if not hasattr(self, 'charter_data'):
            self.charter_data = {}
        
        # ‚úÖ NOUVEAU : Toolbar avec boutons d'action
        toolbar_frame = ctk.CTkFrame(self.content_frame)
        toolbar_frame.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky="ew")
        toolbar_frame.grid_columnconfigure(0, weight=1)
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(toolbar_frame)
        buttons_frame.pack(pady=10)
        
        ctk.CTkButton(buttons_frame, text="üíæ Sauvegarder", 
                    command=self.save_charter_data, width=120).pack(side="left", padx=5)
        ctk.CTkButton(buttons_frame, text="üìÑ Export PDF", 
                    command=self.export_charter_pdf, width=120).pack(side="left", padx=5)
        ctk.CTkButton(buttons_frame, text="üìù Export Markdown", 
                    command=self.export_charter_markdown, width=120).pack(side="left", padx=5)
        ctk.CTkButton(buttons_frame, text="üëÅÔ∏è Aper√ßu", 
                    command=self.preview_charter, width=120).pack(side="left", padx=5)
        
        # Cr√©er trois colonnes pour organiser les sections
        # Colonne 1 - Sections de base
        col1_frame = ctk.CTkFrame(self.content_frame)
        col1_frame.grid(row=1, column=0, padx=(0, 5), pady=0, sticky="nsew")
        col1_frame.grid_columnconfigure(0, weight=1)
        
        # Colonne 2 - Sections interm√©diaires  
        col2_frame = ctk.CTkFrame(self.content_frame)
        col2_frame.grid(row=1, column=1, padx=5, pady=0, sticky="nsew")
        col2_frame.grid_columnconfigure(0, weight=1)
        
        # Colonne 3 - Sections avanc√©es
        col3_frame = ctk.CTkFrame(self.content_frame)
        col3_frame.grid(row=1, column=2, padx=(5, 0), pady=0, sticky="nsew")
        col3_frame.grid_columnconfigure(0, weight=1)
        
        # === COLONNE 1 - Sections de base ===
        current_row = 0
        
        # 1. Objectif principal
        obj_label = ctk.CTkLabel(col1_frame, text="üéØ Objectif principal:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        obj_label.grid(row=current_row, column=0, padx=15, pady=(15, 5), sticky="w")
        current_row += 1
        
        self.objective_text = ctk.CTkTextbox(col1_frame, height=100)
        self.objective_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'objective' in self.charter_data:
            self.objective_text.insert("0.0", self.charter_data['objective'])
        current_row += 1
        
        # 2. Livrables attendus
        deliv_label = ctk.CTkLabel(col1_frame, text="üì¶ Livrables attendus:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        deliv_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.deliverables_text = ctk.CTkTextbox(col1_frame, height=100)
        self.deliverables_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'deliverables' in self.charter_data:
            self.deliverables_text.insert("0.0", self.charter_data['deliverables'])
        current_row += 1
        
        # 3. Parties prenantes
        stake_label = ctk.CTkLabel(col1_frame, text="üë• Parties prenantes:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        stake_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.stakeholders_text = ctk.CTkTextbox(col1_frame, height=100)
        self.stakeholders_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'stakeholders' in self.charter_data:
            self.stakeholders_text.insert("0.0", self.charter_data['stakeholders'])
        current_row += 1
        
        # 4. Contraintes
        const_label = ctk.CTkLabel(col1_frame, text="‚ö†Ô∏è Contraintes:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        const_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.constraints_text = ctk.CTkTextbox(col1_frame, height=100)
        self.constraints_text.grid(row=current_row, column=0, padx=15, pady=(0, 15), sticky="ew")
        if 'constraints' in self.charter_data:
            self.constraints_text.insert("0.0", self.charter_data['constraints'])
        
        # === COLONNE 2 - Sections interm√©diaires ===
        current_row = 0
        
        # 5. Hypoth√®ses initiales
        hypo_label = ctk.CTkLabel(col2_frame, text="üí≠ Hypoth√®ses initiales:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        hypo_label.grid(row=current_row, column=0, padx=15, pady=(15, 5), sticky="w")
        current_row += 1
        
        self.assumptions_text = ctk.CTkTextbox(col2_frame, height=100)
        self.assumptions_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'assumptions' in self.charter_data:
            self.assumptions_text.insert("0.0", self.charter_data['assumptions'])
        current_row += 1
        
        # 6. Crit√®res de succ√®s
        success_label = ctk.CTkLabel(col2_frame, text="‚úÖ Crit√®res de succ√®s:", 
                                    font=ctk.CTkFont(size=14, weight="bold"))
        success_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.success_criteria_text = ctk.CTkTextbox(col2_frame, height=100)
        self.success_criteria_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'success_criteria' in self.charter_data:
            self.success_criteria_text.insert("0.0", self.charter_data['success_criteria'])
        current_row += 1
        
        # 7. Budget estim√©
        budget_label = ctk.CTkLabel(col2_frame, text="üí∞ Budget estim√©:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        budget_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.budget_text = ctk.CTkTextbox(col2_frame, height=100)
        self.budget_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'budget' in self.charter_data:
            self.budget_text.insert("0.0", self.charter_data['budget'])
        current_row += 1
        
        # 8. √âch√©ancier
        schedule_label = ctk.CTkLabel(col2_frame, text="üìÖ √âch√©ancier:", 
                                    font=ctk.CTkFont(size=14, weight="bold"))
        schedule_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.schedule_text = ctk.CTkTextbox(col2_frame, height=100)
        self.schedule_text.grid(row=current_row, column=0, padx=15, pady=(0, 15), sticky="ew")
        if 'schedule' in self.charter_data:
            self.schedule_text.insert("0.0", self.charter_data['schedule'])
        
        # === COLONNE 3 - Sections avanc√©es ===
        current_row = 0
        
        # 9. Risques identifi√©s
        risks_label = ctk.CTkLabel(col3_frame, text="‚ö° Risques identifi√©s:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        risks_label.grid(row=current_row, column=0, padx=15, pady=(15, 5), sticky="w")
        current_row += 1
        
        self.risks_text = ctk.CTkTextbox(col3_frame, height=100)
        self.risks_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'risks' in self.charter_data:
            self.risks_text.insert("0.0", self.charter_data['risks'])
        current_row += 1
        
        # 10. Technologies / Outils
        tech_label = ctk.CTkLabel(col3_frame, text="üîß Technologies / Outils:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        tech_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.technology_text = ctk.CTkTextbox(col3_frame, height=100)
        self.technology_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'technology' in self.charter_data:
            self.technology_text.insert("0.0", self.charter_data['technology'])
        current_row += 1
        
        # 11. Mesures de qualit√©
        quality_label = ctk.CTkLabel(col3_frame, text="üéØ Mesures de qualit√©:", 
                                    font=ctk.CTkFont(size=14, weight="bold"))
        quality_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.quality_text = ctk.CTkTextbox(col3_frame, height=100)
        self.quality_text.grid(row=current_row, column=0, padx=15, pady=(0, 10), sticky="ew")
        if 'quality' in self.charter_data:
            self.quality_text.insert("0.0", self.charter_data['quality'])
        current_row += 1
        
        # 12. Communication
        comm_label = ctk.CTkLabel(col3_frame, text="üì¢ Communication:", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        comm_label.grid(row=current_row, column=0, padx=15, pady=(5, 5), sticky="w")
        current_row += 1
        
        self.communication_text = ctk.CTkTextbox(col3_frame, height=100)
        self.communication_text.grid(row=current_row, column=0, padx=15, pady=(0, 15), sticky="ew")
        if 'communication' in self.charter_data:
            self.communication_text.insert("0.0", self.charter_data['communication'])
        
        self.update_status("Module de cadrage projet affich√© - toutes sections visibles")

    def save_charter_data(self):
        """Sauvegarder les donn√©es de la charte"""
        try:
            # Sauvegarder toutes les donn√©es des textbox
            self.charter_data = {
                'objective': self.objective_text.get("1.0", "end-1c"),
                'deliverables': self.deliverables_text.get("1.0", "end-1c"),
                'stakeholders': self.stakeholders_text.get("1.0", "end-1c"),
                'constraints': self.constraints_text.get("1.0", "end-1c"),
                'assumptions': self.assumptions_text.get("1.0", "end-1c"),
                'success_criteria': self.success_criteria_text.get("1.0", "end-1c"),
                'budget': self.budget_text.get("1.0", "end-1c"),
                'schedule': self.schedule_text.get("1.0", "end-1c"),
                'risks': self.risks_text.get("1.0", "end-1c"),
                'technology': self.technology_text.get("1.0", "end-1c"),
                'quality': self.quality_text.get("1.0", "end-1c"),
                'communication': self.communication_text.get("1.0", "end-1c")
            }
            
            # Sauvegarder dans un fichier JSON
            with open("charter_data.json", "w", encoding="utf-8") as f:
                json.dump(self.charter_data, f, ensure_ascii=False, indent=2)
                
            messagebox.showinfo("Sauvegarde", "Donn√©es de la charte sauvegard√©es avec succ√®s!")
            self.update_status("Charte sauvegard√©e")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde :\n{str(e)}")

    def export_charter_pdf(self):
        """Exporter la charte en PDF"""
        try:
            # Sauvegarder d'abord les donn√©es
            self.save_charter_data()
            
            # Demander o√π sauvegarder
            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF files", "*.pdf")],
                title="Exporter la charte de projet"
            )
            
            if filename:
                from reportlab.lib.pagesizes import letter
                from reportlab.pdfgen import canvas
                from reportlab.lib.utils import ImageReader
                
                c = canvas.Canvas(filename, pagesize=letter)
                width, height = letter
                
                # Titre
                c.setFont("Helvetica-Bold", 20)
                c.drawString(50, height - 50, "Charte de Projet")
                
                # Date
                c.setFont("Helvetica", 10)
                c.drawString(50, height - 70, f"Cr√©√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}")
                
                y_position = height - 100
                
                sections = [
                    ("Objectif principal", self.charter_data.get('objective', '')),
                    ("Livrables attendus", self.charter_data.get('deliverables', '')),
                    ("Parties prenantes", self.charter_data.get('stakeholders', '')),
                    ("Contraintes", self.charter_data.get('constraints', '')),
                    ("Hypoth√®ses initiales", self.charter_data.get('assumptions', ''))
                ]
                
                for title, content in sections:
                    if y_position < 100:  # Nouvelle page si n√©cessaire
                        c.showPage()
                        y_position = height - 50
                        
                    c.setFont("Helvetica-Bold", 12)
                    c.drawString(50, y_position, title)
                    y_position -= 20
                    
                    c.setFont("Helvetica", 10)
                    lines = content.split('\n')
                    for line in lines:
                        if y_position < 100:
                            c.showPage()
                            y_position = height - 50
                        c.drawString(70, y_position, line[:80])  # Limiter la longueur
                        y_position -= 15
                    
                    y_position -= 10
                
                c.save()
                messagebox.showinfo("Export PDF", f"Charte export√©e avec succ√®s :\n{filename}")
                self.update_status("Charte export√©e en PDF")
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'export PDF :\n{str(e)}")

    def export_charter_markdown(self):
        """Exporter la charte en Markdown"""
        try:
            # Sauvegarder d'abord les donn√©es
            self.save_charter_data()
            
            # Demander o√π sauvegarder
            filename = filedialog.asksaveasfilename(
                defaultextension=".md",
                filetypes=[("Markdown files", "*.md")],
                title="Sauvegarder la charte de projet"
            )
            
            if filename:
                # Cr√©er le contenu Markdown
                md_content = f"""# üóÇ Charte de Projet

    *Cr√©√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}*

    ## üéØ Objectif principal

    {self.charter_data.get('objective', '')}

    ## üì¶ Livrables attendus

    {self.charter_data.get('deliverables', '')}

    ## üë• Parties prenantes / Intervenants cl√©s

    {self.charter_data.get('stakeholders', '')}

    ## ‚ö†Ô∏è Contraintes

    {self.charter_data.get('constraints', '')}

    ## üí≠ Hypoth√®ses initiales

    {self.charter_data.get('assumptions', '')}

    ## ‚úÖ Crit√®res de succ√®s

    {self.charter_data.get('success_criteria', '')}

    ## üí∞ Budget estim√©

    {self.charter_data.get('budget', '')}

    ## üìÖ √âch√©ancier

    {self.charter_data.get('schedule', '')}

    ## ‚ö° Risques identifi√©s

    {self.charter_data.get('risks', '')}

    ## üîß Technologies / Outils

    {self.charter_data.get('technology', '')}

    ## üéØ Mesures de qualit√©

    {self.charter_data.get('quality', '')}

    ## üì¢ Communication

    {self.charter_data.get('communication', '')}

    ---
    *Document g√©n√©r√© automatiquement par l'application de gestion de projet*
    """
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(md_content)
                    
                messagebox.showinfo("Export Markdown", f"Charte export√©e avec succ√®s :\n{filename}")
                self.update_status("Charte export√©e en Markdown")
                
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'export Markdown :\n{str(e)}")

    def preview_charter(self):
        """Afficher un aper√ßu de la charte"""
        # Sauvegarder d'abord les donn√©es
        self.save_charter_data()
        
        # Cr√©er une nouvelle fen√™tre pour l'aper√ßu
        preview_window = ctk.CTkToplevel(self)
        preview_window.title("Aper√ßu de la Charte de Projet")
        preview_window.geometry("800x600")
        
        # Zone de texte pour l'aper√ßu
        preview_text = ctk.CTkTextbox(preview_window)
        preview_text.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Contenu de l'aper√ßu
        preview_content = f"""üóÇ CHARTE DE PROJET

    Cr√©√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}

    üéØ OBJECTIF PRINCIPAL
    {self.charter_data.get('objective', 'Non renseign√©')}

    üì¶ LIVRABLES ATTENDUS
    {self.charter_data.get('deliverables', 'Non renseign√©')}

    üë• PARTIES PRENANTES / INTERVENANTS CL√âS
    {self.charter_data.get('stakeholders', 'Non renseign√©')}

    ‚ö†Ô∏è CONTRAINTES
    {self.charter_data.get('constraints', 'Non renseign√©')}

    üí≠ HYPOTH√àSES INITIALES
    {self.charter_data.get('assumptions', 'Non renseign√©')}

    ‚úÖ CRIT√àRES DE SUCC√àS
    {self.charter_data.get('success_criteria', 'Non renseign√©')}

    üí∞ BUDGET ESTIM√â
    {self.charter_data.get('budget', 'Non renseign√©')}

    üìÖ √âCH√âANCIER
    {self.charter_data.get('schedule', 'Non renseign√©')}

    ‚ö° RISQUES IDENTIFI√âS
    {self.charter_data.get('risks', 'Non renseign√©')}

    üîß TECHNOLOGIES / OUTILS
    {self.charter_data.get('technology', 'Non renseign√©')}

    üéØ MESURES DE QUALIT√â
    {self.charter_data.get('quality', 'Non renseign√©')}

    üì¢ COMMUNICATION
    {self.charter_data.get('communication', 'Non renseign√©')}

    ---
    Document g√©n√©r√© automatiquement par l'application de gestion de projet
    """
        
        preview_text.insert("0.0", preview_content)
        preview_text.configure(state="disabled")
        
        self.update_status("Aper√ßu de la charte affich√©") 
                
    def preview_charter(self):
        """Afficher un aper√ßu de la charte"""
        # Sauvegarder d'abord les donn√©es
        self.save_charter_data()
        
        # Cr√©er une nouvelle fen√™tre pour l'aper√ßu
        preview_window = ctk.CTkToplevel(self)
        preview_window.title("Aper√ßu de la Charte de Projet")
        preview_window.geometry("800x600")
        
        # Zone de texte pour l'aper√ßu
        preview_text = ctk.CTkTextbox(preview_window)
        preview_text.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Contenu de l'aper√ßu
        preview_content = f"""üóÇ CHARTE DE PROJET

Cr√©√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}

üéØ OBJECTIF PRINCIPAL
{self.charter_data.get('objective', 'Non renseign√©')}

üì¶ LIVRABLES ATTENDUS
{self.charter_data.get('deliverables', 'Non renseign√©')}

üë• PARTIES PRENANTES / INTERVENANTS CL√âS
{self.charter_data.get('stakeholders', 'Non renseign√©')}

‚ö†Ô∏è CONTRAINTES
{self.charter_data.get('constraints', 'Non renseign√©')}

üí≠ HYPOTH√àSES INITIALES
{self.charter_data.get('assumptions', 'Non renseign√©')}

---
Document g√©n√©r√© automatiquement par l'application de gestion de projet
"""
        
        preview_text.insert("0.0", preview_content)
        preview_text.configure(state="disabled")
        
        self.update_status("Aper√ßu de la charte affich√©")
        
    def show_tree_diagram(self):
        """Afficher le module de diagramme en arbre - CORRIG√â"""
        self.clear_content()
        self.main_title.configure(text="üå≥ Diagramme en Arbre")
        
        # ‚úÖ CORRECTION : Initialiser seulement si n√©cessaire
        if not hasattr(self, 'tree_nodes'):
            self.tree_nodes = []
        if not hasattr(self, 'selected_tree_node'):
            self.selected_tree_node = None
        if not hasattr(self, 'tree_mode'):
            self.tree_mode = "select"
        if not hasattr(self, 'connection_start'):
            self.connection_start = None
        if not hasattr(self, 'zoom_factor'):
            self.zoom_factor = 1.0
        if not hasattr(self, 'drag_data'):
            self.drag_data = {"x": 0, "y": 0, "item": None}
        
        # Frame pour la toolbar
        toolbar_frame = ctk.CTkFrame(self.content_frame)
        toolbar_frame.grid(row=0, column=0, padx=5, pady=2, sticky="ew")
    
        
        # Modes d'interaction
        mode_label = ctk.CTkLabel(toolbar_frame, text="Mode:")
        mode_label.grid(row=0, column=0, padx=5, pady=5)
        
        mode_frame = ctk.CTkFrame(toolbar_frame)
        mode_frame.grid(row=0, column=1, padx=5, pady=5)
        
        # Boutons de mode
        select_btn = ctk.CTkButton(mode_frame, text="S√©lection", width=80, height=25,
                                command=lambda: self.change_tree_mode("select"))
        select_btn.grid(row=0, column=0, padx=2, pady=2)
        
        add_btn = ctk.CTkButton(mode_frame, text="Ajouter", width=80, height=25,
                            command=lambda: self.change_tree_mode("add_node"))
        add_btn.grid(row=0, column=1, padx=2, pady=2)
        
        connect_btn = ctk.CTkButton(mode_frame, text="Connecter", width=80, height=25,
                                command=lambda: self.change_tree_mode("connect"))
        connect_btn.grid(row=0, column=2, padx=2, pady=2)
        
        delete_btn = ctk.CTkButton(mode_frame, text="Supprimer", width=80, height=25,
                                command=lambda: self.change_tree_mode("delete"))
        delete_btn.grid(row=0, column=3, padx=2, pady=2)
        
        # Boutons d'action
        action_frame = ctk.CTkFrame(toolbar_frame)
        action_frame.grid(row=0, column=2, padx=10, pady=5)
        
        center_btn = ctk.CTkButton(action_frame, text="Centrer", width=60, height=25,
                                command=self.tree_center_view)
        center_btn.grid(row=0, column=0, padx=2)
        
        clear_btn = ctk.CTkButton(action_frame, text="Effacer", width=60, height=25,
                                command=self.clear_tree)
        clear_btn.grid(row=0, column=1, padx=2)
        
        # Frame principal avec canvas
        main_tree_frame = ctk.CTkFrame(self.content_frame)
        main_tree_frame.grid(row=0, column=0, padx=0, pady=0, sticky="nsew")
        main_tree_frame.grid_columnconfigure(0, weight=1)
        main_tree_frame.grid_rowconfigure(0, weight=1)
        
        # Canvas
        canvas_frame = ctk.CTkFrame(main_tree_frame)
        canvas_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 5))
        canvas_frame.grid_columnconfigure(0, weight=1)
        canvas_frame.grid_rowconfigure(0, weight=1)
        
        self.tree_canvas = tk.Canvas(canvas_frame, bg='white', width=1300, height=850)
        self.tree_canvas.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(canvas_frame, orient="vertical", command=self.tree_canvas.yview)
        h_scrollbar = ttk.Scrollbar(canvas_frame, orient="horizontal", command=self.tree_canvas.xview)
        self.tree_canvas.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        # Configuration de la zone de scroll
        self.tree_canvas.configure(scrollregion=(-500, -500, 1500, 1500))
        
        # Panel de propri√©t√©s simple
        self.tree_properties_frame = ctk.CTkFrame(main_tree_frame, width=200)
        self.tree_properties_frame.grid(row=0, column=1, sticky="nsew")
        self.tree_properties_frame.grid_propagate(False)
        
        self.setup_simple_tree_properties()
        
        # Bind des √©v√©nements
        self.tree_canvas.bind("<Button-1>", self.on_tree_canvas_click)
        self.tree_canvas.bind("<B1-Motion>", self.on_tree_canvas_drag)
        self.tree_canvas.bind("<ButtonRelease-1>", self.on_tree_canvas_release)
        
        # ‚úÖ CORRECTION : Cr√©er un n≈ìud racine seulement si l'arbre est vide
        if not self.tree_nodes:
            self.create_tree_root_node()
        else:
            # Redessiner l'arbre existant
            self.redraw_tree_all()
            self.update_tree_statistics()
        
        self.content_frame.grid_rowconfigure(1, weight=1)
        self.update_status("Module de diagramme en arbre affich√©")

    def setup_simple_tree_properties(self):
        """Configurer un panel de propri√©t√©s simplifi√©"""
        # Titre
        title_label = ctk.CTkLabel(self.tree_properties_frame, text="Propri√©t√©s", 
                                font=ctk.CTkFont(size=14, weight="bold"))
        title_label.pack(pady=10)
        
        # Texte du noeud
        text_label = ctk.CTkLabel(self.tree_properties_frame, text="Texte du noeud:")
        text_label.pack(anchor='w', padx=10, pady=(10, 0))
        
        self.tree_text_entry = ctk.CTkEntry(self.tree_properties_frame, width=160)
        self.tree_text_entry.pack(padx=10, pady=5)
        self.tree_text_entry.bind('<Return>', self.update_node_text)
        
        # Bouton pour appliquer
        apply_btn = ctk.CTkButton(self.tree_properties_frame, text="Appliquer", 
                                command=self.update_node_text)
        apply_btn.pack(pady=5)
        
        # Actions rapides
        actions_label = ctk.CTkLabel(self.tree_properties_frame, text="Actions:")
        actions_label.pack(anchor='w', padx=10, pady=(20, 5))
        
        add_child_btn = ctk.CTkButton(self.tree_properties_frame, text="+ Enfant", 
                                    command=self.add_child_to_selected)
        add_child_btn.pack(pady=2, padx=10, fill='x')
        
        delete_node_btn = ctk.CTkButton(self.tree_properties_frame, text="Supprimer", 
                                    command=self.delete_selected_node)
        delete_node_btn.pack(pady=2, padx=10, fill='x')
        
        # Statistiques
        stats_label = ctk.CTkLabel(self.tree_properties_frame, text="Statistiques:")
        stats_label.pack(anchor='w', padx=10, pady=(20, 5))
        
        self.tree_stats_label = ctk.CTkLabel(self.tree_properties_frame, text="Noeuds: 0")
        self.tree_stats_label.pack(padx=10, pady=5)

    def change_tree_mode(self, mode):
        """Changer le mode d'√©dition du diagramme"""
        self.tree_mode = mode
        self.connection_start = None
        self.update_status(f"Mode: {mode}")

    def create_tree_root_node(self):
        """Cr√©er le noeud racine"""
        root_node = TreeNode("Racine", 400, 200)
        self.tree_nodes.append(root_node)
        self.draw_tree_node(root_node)
        self.update_tree_statistics()

    def draw_tree_node(self, node):
        """Dessiner un noeud sur le canvas"""
        # Calculer la taille bas√©e sur le texte
        text_width = len(node.text) * 8 + 20
        node.width = max(60, text_width)
        node.height = 40
        
        # Position sur le canvas
        x, y = node.x, node.y
        w, h = node.width, node.height
        
        # Supprimer l'ancien dessin
        if hasattr(node, 'canvas_id') and node.canvas_id:
            self.tree_canvas.delete(node.canvas_id)
        if hasattr(node, 'text_id') and node.text_id:
            self.tree_canvas.delete(node.text_id)
        
        # Couleur selon la s√©lection
        fill_color = "#FFE082" if node.selected else "#E3F2FD"
        border_color = "#FF5722" if node.selected else "#2196F3"
        border_width = 2 if node.selected else 1
        
        # Dessiner le rectangle
        node.canvas_id = self.tree_canvas.create_rectangle(
            x - w/2, y - h/2, x + w/2, y + h/2,
            fill=fill_color,
            outline=border_color,
            width=border_width,
            tags="node"
        )
        
        # Dessiner le texte
        node.text_id = self.tree_canvas.create_text(
            x, y,
            text=node.text,
            fill="#000000",
            font=("Arial", 10),
            tags="node_text"
        )

    def draw_tree_connections(self):
        """Dessiner toutes les connexions"""
        # Supprimer les anciennes connexions
        self.tree_canvas.delete("connection")
        
        # Dessiner les nouvelles connexions
        for node in self.tree_nodes:
            for child in node.children:
                self.draw_connection(node, child)

    def draw_connection(self, parent, child):
        """Dessiner une connexion entre deux noeuds"""
        x1, y1 = parent.x, parent.y
        x2, y2 = child.x, child.y
        
        # Calculer les points de connexion sur les bords des rectangles
        dx, dy = x2 - x1, y2 - y1
        dist = (dx*dx + dy*dy) ** 0.5
        
        if dist > 0:
            # Points sur les bords
            px1 = x1 + (dx/dist) * (parent.width/2)
            py1 = y1 + (dy/dist) * (parent.height/2)
            px2 = x2 - (dx/dist) * (child.width/2)
            py2 = y2 - (dy/dist) * (child.height/2)
            
            # Dessiner la ligne avec fl√®che
            self.tree_canvas.create_line(
                px1, py1, px2, py2,
                fill="#666666",
                width=2,
                arrow=tk.LAST,
                arrowshape=(8, 10, 3),
                tags="connection"
            )

    def redraw_tree_all(self):
        """Redessiner tout le diagramme"""
        self.tree_canvas.delete("all")
        
        # Dessiner les connexions d'abord
        self.draw_tree_connections()
        
        # Puis dessiner les noeuds
        for node in self.tree_nodes:
            self.draw_tree_node(node)

    def on_tree_canvas_click(self, event):
        """G√©rer les clics sur le canvas"""
        x = self.tree_canvas.canvasx(event.x)
        y = self.tree_canvas.canvasy(event.y)
        
        if self.tree_mode == "select":
            self.select_node_at(x, y)
            self.drag_data = {"x": x, "y": y, "item": self.selected_tree_node}
        elif self.tree_mode == "add_node":
            self.create_node_at(x, y)
        elif self.tree_mode == "connect":
            self.handle_connection_at(x, y)
        elif self.tree_mode == "delete":
            self.delete_node_at(x, y)

    def on_tree_canvas_drag(self, event):
        """G√©rer le glissement"""
        if self.tree_mode == "select" and self.drag_data["item"]:
            x = self.tree_canvas.canvasx(event.x)
            y = self.tree_canvas.canvasy(event.y)
            
            dx = x - self.drag_data["x"]
            dy = y - self.drag_data["y"]
            
            self.drag_data["item"].x += dx
            self.drag_data["item"].y += dy
            
            self.drag_data["x"] = x
            self.drag_data["y"] = y
            
            self.redraw_tree_all()

    def on_tree_canvas_release(self, event):
        """G√©rer le rel√¢chement"""
        self.drag_data = {"x": 0, "y": 0, "item": None}

    def select_node_at(self, x, y):
        """S√©lectionner un noeud √† la position donn√©e"""
        # D√©s√©lectionner le noeud actuel
        if self.selected_tree_node:
            self.selected_tree_node.selected = False
        
        # Trouver le noeud cliqu√©
        clicked_node = None
        for node in self.tree_nodes:
            if (abs(node.x - x) < node.width/2 and 
                abs(node.y - y) < node.height/2):
                clicked_node = node
                break
        
        # S√©lectionner le nouveau noeud
        self.selected_tree_node = clicked_node
        if self.selected_tree_node:
            self.selected_tree_node.selected = True
            self.update_properties_panel()
        
        self.redraw_tree_all()

    def create_node_at(self, x, y):
        """Cr√©er un nouveau noeud"""
        new_node = TreeNode(f"Noeud {len(self.tree_nodes) + 1}", x, y)
        self.tree_nodes.append(new_node)
        self.draw_tree_node(new_node)
        self.update_tree_statistics()

    def handle_connection_at(self, x, y):
        """G√©rer la cr√©ation de connexions"""
        clicked_node = self.find_node_at(x, y)
        
        if clicked_node:
            if self.connection_start is None:
                self.connection_start = clicked_node
                self.update_status("S√©lectionnez le noeud de destination")
            else:
                if self.connection_start != clicked_node:
                    self.connection_start.add_child(clicked_node)
                    self.redraw_tree_all()
                    self.update_status("Connexion cr√©√©e")
                self.connection_start = None

    def delete_node_at(self, x, y):
        """Supprimer un noeud"""
        node_to_delete = self.find_node_at(x, y)
        if node_to_delete and len(self.tree_nodes) > 1:
            self.delete_tree_node(node_to_delete)

    def find_node_at(self, x, y):
        """Trouver le noeud √† la position donn√©e"""
        for node in self.tree_nodes:
            if (abs(node.x - x) < node.width/2 and 
                abs(node.y - y) < node.height/2):
                return node
        return None

    def delete_tree_node(self, node):
        """Supprimer un noeud"""
        # Supprimer des enfants du parent
        if node.parent:
            node.parent.remove_child(node)
        
        # D√©placer les enfants vers le parent
        for child in node.children[:]:
            node.remove_child(child)
            if node.parent:
                node.parent.add_child(child)
        
        # Supprimer de la liste
        self.tree_nodes.remove(node)
        
        if self.selected_tree_node == node:
            self.selected_tree_node = None
            
        self.redraw_tree_all()
        self.update_tree_statistics()

    def tree_center_view(self):
        """Centrer la vue sur les noeuds"""
        if not self.tree_nodes:
            return
        
        # Calculer le centre des noeuds
        min_x = min(node.x for node in self.tree_nodes)
        max_x = max(node.x for node in self.tree_nodes)
        min_y = min(node.y for node in self.tree_nodes)
        max_y = max(node.y for node in self.tree_nodes)
        
        center_x = (min_x + max_x) / 2
        center_y = (min_y + max_y) / 2
        
        # Centrer le canvas
        canvas_width = self.tree_canvas.winfo_width()
        canvas_height = self.tree_canvas.winfo_height()
        
        scroll_x = (center_x - canvas_width/2) / 2000
        scroll_y = (center_y - canvas_height/2) / 2000
        
        self.tree_canvas.xview_moveto(max(0, min(1, scroll_x)))
        self.tree_canvas.yview_moveto(max(0, min(1, scroll_y)))

    def clear_tree(self):
        """Effacer tout le diagramme"""
        if messagebox.askyesno("Confirmation", "Effacer tout le diagramme ?\n\nCette action est irr√©versible !"):
            self.tree_nodes.clear()
            self.selected_tree_node = None
            self.connection_start = None
            self.tree_canvas.delete("all")
            self.create_tree_root_node()
            self.update_status("Diagramme effac√© et r√©initialis√©")

    def update_node_text(self, event=None):
        """Mettre √† jour le texte du noeud s√©lectionn√©"""
        if self.selected_tree_node:
            new_text = self.tree_text_entry.get().strip()
            if new_text:
                self.selected_tree_node.text = new_text
                self.redraw_tree_all()

    def update_properties_panel(self):
        """Mettre √† jour le panel de propri√©t√©s"""
        if self.selected_tree_node:
            self.tree_text_entry.delete(0, tk.END)
            self.tree_text_entry.insert(0, self.selected_tree_node.text)

    def add_child_to_selected(self):
        """Ajouter un enfant au noeud s√©lectionn√©"""
        if not self.selected_tree_node:
            messagebox.showwarning("Attention", "S√©lectionnez d'abord un noeud")
            return
        
        parent = self.selected_tree_node
        child = TreeNode("Nouveau", parent.x + 100, parent.y + 80)
        parent.add_child(child)
        self.tree_nodes.append(child)
        self.redraw_tree_all()
        self.update_tree_statistics()

    def delete_selected_node(self):
        """Supprimer le noeud s√©lectionn√©"""
        if not self.selected_tree_node:
            messagebox.showwarning("Attention", "S√©lectionnez d'abord un noeud")
            return
        
        if len(self.tree_nodes) <= 1:
            messagebox.showwarning("Attention", "Impossible de supprimer le dernier noeud")
            return
        
        if messagebox.askyesno("Confirmation", f"Supprimer '{self.selected_tree_node.text}' ?"):
            self.delete_tree_node(self.selected_tree_node)

    def update_tree_statistics(self):
        """Mettre √† jour les statistiques"""
        count = len(self.tree_nodes)
        self.tree_stats_label.configure(text=f"Noeuds: {count}")
        
    def show_task_tracker(self):
        """Afficher le module de suivi des t√¢ches"""
        self.clear_content()
        self.main_title.configure(text="‚úÖ Module de Suivi des T√¢ches")
        
        # ‚úÖ CORRECTION : Configuration de l'expansion compl√®te
        self.content_frame.grid_rowconfigure(1, weight=1)  # Ligne principale des t√¢ches
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # Initialiser les variables des t√¢ches si n√©cessaire
        if not hasattr(self, 'tasks'):
            self.tasks = []
        if not hasattr(self, 'task_view_mode'):
            self.task_view_mode = "kanban"
        
        # ‚úÖ NOUVEAU : Taille fixe en mode Large
        self.task_area_width = 1600   # Taille Large fixe
        self.task_area_height = 800   # Taille Large fixe
            
        # Toolbar avec boutons d'action
        toolbar_frame = ctk.CTkFrame(self.content_frame)
        toolbar_frame.grid(row=0, column=0, padx=5, pady=2, sticky="ew")
        
        # Boutons principaux
        main_buttons_frame = ctk.CTkFrame(toolbar_frame)
        main_buttons_frame.grid(row=0, column=0, padx=5, pady=5)
        
        ctk.CTkButton(main_buttons_frame, text="‚ûï Nouvelle T√¢che", 
                    command=self.add_new_task).grid(row=0, column=0, padx=5, pady=5)
        ctk.CTkButton(main_buttons_frame, text="üîÑ Synchroniser avec Arbre", 
                    command=self.sync_tasks_with_tree).grid(row=0, column=1, padx=5, pady=5)
        ctk.CTkButton(main_buttons_frame, text="üìù T√¢ches d'exemple", 
                    command=self.create_sample_tasks).grid(row=0, column=2, padx=5, pady=5)
        
        # S√©lecteur de vue
        view_frame = ctk.CTkFrame(toolbar_frame)
        view_frame.grid(row=0, column=1, padx=20, pady=5)
        
        ctk.CTkLabel(view_frame, text="Vue:").grid(row=0, column=0, padx=5, pady=5)
        
        self.task_view_var = tk.StringVar(value=self.task_view_mode)
        view_kanban_btn = ctk.CTkButton(view_frame, text="üìã Kanban", width=80, height=25,
                                    command=lambda: self.change_task_view("kanban"))
        view_kanban_btn.grid(row=0, column=1, padx=2, pady=5)
        
        view_table_btn = ctk.CTkButton(view_frame, text="üìä Tableau", width=80, height=25,
                                    command=lambda: self.change_task_view("table"))
        view_table_btn.grid(row=0, column=2, padx=2, pady=5)
        
        # Statistiques
        stats_frame = ctk.CTkFrame(toolbar_frame)
        stats_frame.grid(row=0, column=2, padx=20, pady=5)
        
        self.task_stats_label = ctk.CTkLabel(stats_frame, text="Chargement...")
        self.task_stats_label.grid(row=0, column=0, padx=10, pady=5)
        
        # ‚úÖ Frame principal avec zone de t√¢ches en taille Large fixe
        main_task_frame = ctk.CTkFrame(self.content_frame)
        main_task_frame.grid(row=1, column=0, padx=5, pady=2, sticky="nsew")
        main_task_frame.grid_columnconfigure(0, weight=1)
        main_task_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas pour la zone de t√¢ches avec taille Large fixe
        task_canvas_frame = ctk.CTkFrame(main_task_frame)
        task_canvas_frame.grid(row=0, column=0, sticky="nsew", padx=0, pady=0)
        task_canvas_frame.grid_columnconfigure(0, weight=1)
        task_canvas_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas principal des t√¢ches avec taille Large (1600x800)
        self.task_canvas = tk.Canvas(task_canvas_frame, bg='#f0f0f0', 
                                    width=self.task_area_width, 
                                    height=self.task_area_height)
        self.task_canvas.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbars pour la zone de t√¢ches
        task_v_scrollbar = ttk.Scrollbar(task_canvas_frame, orient="vertical", command=self.task_canvas.yview)
        task_h_scrollbar = ttk.Scrollbar(task_canvas_frame, orient="horizontal", command=self.task_canvas.xview)
        self.task_canvas.configure(yscrollcommand=task_v_scrollbar.set, xscrollcommand=task_h_scrollbar.set)
        
        task_v_scrollbar.grid(row=0, column=1, sticky="ns")
        task_h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        # Configuration de la zone de scroll
        self.task_canvas.configure(scrollregion=(0, 0, self.task_area_width + 200, self.task_area_height + 200))
        
        # ‚úÖ Frame pour le contenu des t√¢ches √† l'int√©rieur du canvas
        self.task_content_frame = ctk.CTkFrame(self.task_canvas)
        self.task_canvas_window = self.task_canvas.create_window(0, 0, anchor="nw", window=self.task_content_frame)
        self.task_content_frame.grid_columnconfigure(0, weight=1)
        
        # Bind pour ajuster la taille du frame interne
        self.task_content_frame.bind('<Configure>', self.on_task_frame_configure)
        self.task_canvas.bind('<Configure>', self.on_task_canvas_configure)
        
        # Afficher la vue actuelle
        self.refresh_task_view()
        
        self.update_status("Module de suivi des t√¢ches affich√© en taille Large (1600x800)")

    def update_task_area_size(self, value=None):
        """Mettre √† jour la taille de la zone de t√¢ches"""
        # R√©cup√©rer les nouvelles valeurs
        new_width = int(self.task_width_slider.get())
        new_height = int(self.task_height_slider.get())
        
        # Mettre √† jour les variables
        self.task_area_width = new_width
        self.task_area_height = new_height
        
        # Mettre √† jour les labels
        self.task_width_label.configure(text=f"{new_width}px")
        self.task_height_label.configure(text=f"{new_height}px")
        
        # Redimensionner le canvas
        if hasattr(self, 'task_canvas'):
            self.task_canvas.configure(width=new_width, height=new_height)
            self.task_canvas.configure(scrollregion=(0, 0, new_width + 200, new_height + 200))
            
            # Rafra√Æchir l'affichage
            self.refresh_task_view()

    def set_task_area_preset(self, width, height):
        """D√©finir une taille pr√©d√©finie pour la zone de t√¢ches"""
        self.task_area_width = width
        self.task_area_height = height
        
        # Mettre √† jour les sliders
        self.task_width_slider.set(width)
        self.task_height_slider.set(height)
        
        # Appliquer les changements
        self.update_task_area_size()
        
        self.update_status(f"Zone de t√¢ches redimensionn√©e : {width}x{height}")

    def on_task_frame_configure(self, event):
        """G√©rer le redimensionnement du frame de contenu des t√¢ches"""
        # Mettre √† jour la scrollregion pour inclure tout le contenu
        self.task_canvas.configure(scrollregion=self.task_canvas.bbox("all"))

    def on_task_canvas_configure(self, event):
        """G√©rer le redimensionnement du canvas des t√¢ches"""
        # Ajuster la largeur du frame interne au canvas
        canvas_width = event.width
        self.task_canvas.itemconfig(self.task_canvas_window, width=canvas_width)

    def refresh_task_view(self):
        """Rafra√Æchir l'affichage des t√¢ches - MODIFI√â pour utiliser le canvas"""
        print(f"üîÑ Rafra√Æchissement de l'affichage des t√¢ches...")
        print(f"   - Nombre de t√¢ches: {len(self.tasks)}")
        print(f"   - Mode de vue: {self.task_view_mode}")
        print(f"   - Taille zone: {self.task_area_width}x{self.task_area_height}")
        
        # Nettoyer le contenu actuel
        for widget in self.task_content_frame.winfo_children():
            widget.destroy()
            
        # Debug: afficher le nombre de t√¢ches
        print(f"Nombre de t√¢ches: {len(self.tasks)}")
        print(f"Mode de vue: {self.task_view_mode}")
            
        if self.task_view_mode == "kanban":
            print("   ‚û°Ô∏è Affichage vue Kanban")
            self.show_kanban_view()
        else:
            print("   ‚û°Ô∏è Affichage vue Tableau")
            self.show_table_view()
            
        self.update_task_stats()
        print(f"‚úÖ Rafra√Æchissement termin√©")

    def show_kanban_view(self):
        """Afficher la vue Kanban - MODIFI√â pour utiliser l'espace personnalisable"""
        # Cr√©er les colonnes avec largeur adapt√©e
        kanban_frame = ctk.CTkFrame(self.task_content_frame)
        kanban_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=10)
        kanban_frame.grid_columnconfigure(0, weight=1)
        kanban_frame.grid_columnconfigure(1, weight=1)
        kanban_frame.grid_columnconfigure(2, weight=1)
        
        statuses = ["√Ä faire", "En cours", "Termin√©"]
        status_colors = ["#FFE0B2", "#BBDEFB", "#C8E6C9"]
        
        # Calculer la largeur des colonnes selon la zone disponible
        column_width = max(300, (self.task_area_width - 60) // 3)  # 60px pour les marges
        
        for i, status in enumerate(statuses):
            # Colonne
            column_frame = ctk.CTkFrame(kanban_frame, width=column_width)
            column_frame.grid(row=0, column=i, sticky="nsew", padx=5, pady=5)
            column_frame.grid_propagate(False)  # ‚úÖ Maintenir la largeur fixe
            
            # En-t√™te de colonne
            header = ctk.CTkLabel(column_frame, text=f"{status}", 
                                font=ctk.CTkFont(size=16, weight="bold"))
            header.pack(pady=10)
            
            # S√©parateur
            separator = ctk.CTkFrame(column_frame, height=2)
            separator.pack(fill="x", padx=10, pady=5)
            
            # Zone scrollable pour les t√¢ches de cette colonne
            column_scroll = ctk.CTkScrollableFrame(column_frame, 
                                                height=max(400, self.task_area_height - 150))
            column_scroll.pack(fill="both", expand=True, padx=5, pady=5)
            
            # T√¢ches dans cette colonne
            tasks_in_status = [task for task in self.tasks if task.status == status]
            
            for task in tasks_in_status:
                self.create_kanban_task_card_enhanced(column_scroll, task, column_width - 30)

    def create_kanban_task_card_enhanced(self, parent, task, card_width):
        """Cr√©er une carte de t√¢che am√©lior√©e pour la vue Kanban"""
        card = ctk.CTkFrame(parent, width=card_width)
        card.pack(fill="x", padx=5, pady=5)
        card.grid_propagate(False)
        
        # Titre de la t√¢che avec largeur adapt√©e
        title_label = ctk.CTkLabel(card, text=task.title, 
                                font=ctk.CTkFont(size=12, weight="bold"),
                                wraplength=card_width - 20)
        title_label.pack(anchor="w", padx=10, pady=(10, 5))
        
        # Priorit√©
        priority_colors = {"Basse": "#4CAF50", "Moyenne": "#FF9800", "Critique": "#F44336"}
        priority_label = ctk.CTkLabel(card, text=f"üî• {task.priority}", 
                                    text_color=priority_colors.get(task.priority, "#666666"))
        priority_label.pack(anchor="w", padx=10, pady=2)
        
        # Responsable
        if task.assignee:
            assignee_label = ctk.CTkLabel(card, text=f"üë§ {task.assignee}")
            assignee_label.pack(anchor="w", padx=10, pady=2)
            
        # √âch√©ance
        if task.due_date:
            due_label = ctk.CTkLabel(card, text=f"üìÖ {task.due_date}")
            due_label.pack(anchor="w", padx=10, pady=2)
            
        # Lien avec noeud de l'arbre
        if task.linked_node:
            node_label = ctk.CTkLabel(card, text=f"üå≥ {task.linked_node.text}", 
                                    text_color="#2196F3")
            node_label.pack(anchor="w", padx=10, pady=2)
            
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(card)
        buttons_frame.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkButton(buttons_frame, text="‚úèÔ∏è", width=30, height=25,
                    command=lambda: self.edit_task(task)).pack(side="left", padx=2)
        ctk.CTkButton(buttons_frame, text="üóëÔ∏è", width=30, height=25,
                    command=lambda: self.delete_task(task)).pack(side="left", padx=2)
                    
        # Boutons de changement de statut
        if task.status == "√Ä faire":
            ctk.CTkButton(buttons_frame, text="‚ñ∂Ô∏è", width=30, height=25,
                        command=lambda: self.change_task_status(task, "En cours")).pack(side="right", padx=2)
        elif task.status == "En cours":
            ctk.CTkButton(buttons_frame, text="‚úÖ", width=30, height=25,
                        command=lambda: self.change_task_status(task, "Termin√©")).pack(side="right", padx=2)
            ctk.CTkButton(buttons_frame, text="‚è∏Ô∏è", width=30, height=25,
                        command=lambda: self.change_task_status(task, "√Ä faire")).pack(side="right", padx=2)
        else:  # Termin√©
            ctk.CTkButton(buttons_frame, text="üîÑ", width=30, height=25,
                        command=lambda: self.change_task_status(task, "En cours")).pack(side="right", padx=2)

    def show_table_view(self):
        """Afficher la vue tableau - MODIFI√â pour utiliser l'espace personnalisable"""
        # En-t√™tes avec largeur adapt√©e
        headers_frame = ctk.CTkFrame(self.task_content_frame)
        headers_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=5)
        headers_frame.grid_columnconfigure(0, weight=2)  # Titre
        headers_frame.grid_columnconfigure(1, weight=1)  # Statut
        headers_frame.grid_columnconfigure(2, weight=1)  # Priorit√©
        headers_frame.grid_columnconfigure(3, weight=1)  # Responsable
        headers_frame.grid_columnconfigure(4, weight=1)  # √âch√©ance
        headers_frame.grid_columnconfigure(5, weight=1)  # Actions
        
        headers = ["Titre", "Statut", "Priorit√©", "Responsable", "√âch√©ance", "Actions"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(headers_frame, text=header, 
                            font=ctk.CTkFont(size=12, weight="bold"))
            label.grid(row=0, column=i, padx=5, pady=10, sticky="w")
            
        # Zone scrollable pour les lignes de t√¢ches
        table_scroll = ctk.CTkScrollableFrame(self.task_content_frame, 
                                            height=max(500, self.task_area_height - 100))
        table_scroll.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
        table_scroll.grid_columnconfigure(0, weight=1)
            
        # T√¢ches
        for i, task in enumerate(self.tasks):
            self.create_table_task_row_enhanced(table_scroll, task, i)

    def create_table_task_row_enhanced(self, parent, task, row_index):
        """Cr√©er une ligne de t√¢che am√©lior√©e pour la vue tableau"""
        row_frame = ctk.CTkFrame(parent)
        row_frame.grid(row=row_index, column=0, sticky="ew", padx=5, pady=2)
        
        # ‚úÖ CORRECTION : Configuration des colonnes avec weights identiques aux en-t√™tes
        row_frame.grid_columnconfigure(0, weight=2)  # Titre
        row_frame.grid_columnconfigure(1, weight=1)  # Statut
        row_frame.grid_columnconfigure(2, weight=1)  # Priorit√©
        row_frame.grid_columnconfigure(3, weight=1)  # Responsable
        row_frame.grid_columnconfigure(4, weight=1)  # √âch√©ance
        row_frame.grid_columnconfigure(5, weight=1)  # Actions
        
        # ‚úÖ CORRECTION : Titre avec largeur minimale et alignement coh√©rent
        title_text = task.title
        if task.linked_node:
            title_text += f" üå≥"
        title_label = ctk.CTkLabel(row_frame, text=title_text, anchor="w")
        title_label.grid(row=0, column=0, padx=5, pady=5, sticky="ew")  # ‚úÖ sticky="ew"
        
        # ‚úÖ CORRECTION : Statut avec couleur et centrage
        status_colors = {"√Ä faire": "#FF9800", "En cours": "#2196F3", "Termin√©": "#4CAF50"}
        status_label = ctk.CTkLabel(row_frame, text=task.status, 
                                text_color=status_colors.get(task.status, "#666666"))
        status_label.grid(row=0, column=1, padx=5, pady=5, sticky="ew")  # ‚úÖ sticky="ew"
        
        # ‚úÖ CORRECTION : Priorit√© avec couleur et centrage
        priority_colors = {"Basse": "#4CAF50", "Moyenne": "#FF9800", "Critique": "#F44336"}
        priority_label = ctk.CTkLabel(row_frame, text=task.priority,
                                    text_color=priority_colors.get(task.priority, "#666666"))
        priority_label.grid(row=0, column=2, padx=5, pady=5, sticky="ew")  # ‚úÖ sticky="ew"
        
        # ‚úÖ CORRECTION : Responsable avec gestion des textes vides
        assignee_text = task.assignee if task.assignee and task.assignee.strip() else "-"
        assignee_label = ctk.CTkLabel(row_frame, text=assignee_text)
        assignee_label.grid(row=0, column=3, padx=5, pady=5, sticky="ew")  # ‚úÖ sticky="ew"
        
        # ‚úÖ CORRECTION : √âch√©ance avec gestion des dates vides
        due_text = task.due_date if task.due_date and task.due_date.strip() else "-"
        due_label = ctk.CTkLabel(row_frame, text=due_text)
        due_label.grid(row=0, column=4, padx=5, pady=5, sticky="ew")  # ‚úÖ sticky="ew"
        
        # ‚úÖ CORRECTION : Actions avec largeur fixe et centrage
        actions_frame = ctk.CTkFrame(row_frame)
        actions_frame.grid(row=0, column=5, padx=5, pady=5, sticky="ew")  # ‚úÖ sticky="ew"
        
        # ‚úÖ Centrer les boutons dans la colonne Actions
        actions_frame.grid_columnconfigure(0, weight=1)
        actions_frame.grid_columnconfigure(1, weight=1)
        actions_frame.grid_columnconfigure(2, weight=1)
        
        ctk.CTkButton(actions_frame, text="‚úèÔ∏è", width=25, height=25,
                    command=lambda: self.edit_task(task)).grid(row=0, column=0, padx=1)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è", width=25, height=25,
                    command=lambda: self.delete_task(task)).grid(row=0, column=1, padx=1)

    def show_table_view(self):
        """Afficher la vue tableau - MODIFI√â pour un meilleur alignement"""
        # ‚úÖ CORRECTION : En-t√™tes avec configuration exacte
        headers_frame = ctk.CTkFrame(self.task_content_frame)
        headers_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=5)
        
        # ‚úÖ Configuration des colonnes avec proportions pr√©cises
        headers_frame.grid_columnconfigure(0, weight=2, minsize=200)  # Titre - plus large
        headers_frame.grid_columnconfigure(1, weight=1, minsize=100)  # Statut
        headers_frame.grid_columnconfigure(2, weight=1, minsize=100)  # Priorit√©
        headers_frame.grid_columnconfigure(3, weight=1, minsize=120)  # Responsable
        headers_frame.grid_columnconfigure(4, weight=1, minsize=100)  # √âch√©ance
        headers_frame.grid_columnconfigure(5, weight=1, minsize=80)   # Actions
        
        headers = ["Titre", "Statut", "Priorit√©", "Responsable", "√âch√©ance", "Actions"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(headers_frame, text=header, 
                            font=ctk.CTkFont(size=12, weight="bold"))
            # ‚úÖ CORRECTION : Alignement coh√©rent des en-t√™tes
            if i == 0:  # Titre √† gauche
                label.grid(row=0, column=i, padx=5, pady=10, sticky="w")
            else:  # Autres colonnes centr√©es
                label.grid(row=0, column=i, padx=5, pady=10, sticky="ew")
            
        # ‚úÖ CORRECTION : Ligne de s√©paration sous les en-t√™tes
        separator = ctk.CTkFrame(self.task_content_frame, height=2)
        separator.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 5))
        
        # Zone scrollable pour les lignes de t√¢ches
        table_scroll = ctk.CTkScrollableFrame(self.task_content_frame, 
                                            height=max(500, self.task_area_height - 150))
        table_scroll.grid(row=2, column=0, sticky="ew", padx=10, pady=5)  # ‚úÖ row=2 au lieu de row=1
        table_scroll.grid_columnconfigure(0, weight=1)
            
        # T√¢ches
        for i, task in enumerate(self.tasks):
            self.create_table_task_row_enhanced(table_scroll, task, i)

    def change_task_view(self, view_mode):
        """Changer le mode de vue des t√¢ches"""
        self.task_view_mode = view_mode
        self.refresh_task_view()
        self.update_status(f"Vue chang√©e : {view_mode}")

    def on_task_frame_configure(self, event):
        """G√©rer le redimensionnement du frame de contenu des t√¢ches"""
        # Mettre √† jour la scrollregion pour inclure tout le contenu
        if hasattr(self, 'task_canvas'):
            self.task_canvas.configure(scrollregion=self.task_canvas.bbox("all"))

    def on_task_canvas_configure(self, event):
        """G√©rer le redimensionnement du canvas des t√¢ches"""
        # Ajuster la largeur du frame interne au canvas
        if hasattr(self, 'task_canvas_window'):
            canvas_width = event.width
            self.task_canvas.itemconfig(self.task_canvas_window, width=canvas_width)

    def add_new_task(self):
        """Ajouter une nouvelle t√¢che"""
        self.edit_task(None)
        
    def edit_task(self, task):
        """√âditer une t√¢che (nouvelle ou existante)"""
        # Cr√©er une fen√™tre de dialogue
        dialog = ctk.CTkToplevel(self)
        dialog.title("√âditer la t√¢che" if task else "Nouvelle t√¢che")
        dialog.geometry("500x600")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        ctk.CTkLabel(main_frame, text="Titre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        title_entry = ctk.CTkEntry(main_frame, width=400)
        title_entry.pack(fill='x', pady=(0, 10))
        if task:
            title_entry.insert(0, task.title)
            
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        if task:
            desc_textbox.insert("1.0", task.description)
            
        # Statut
        ctk.CTkLabel(main_frame, text="Statut:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        status_var = tk.StringVar(value=task.status if task else "√Ä faire")
        status_menu = ctk.CTkOptionMenu(main_frame, values=["√Ä faire", "En cours", "Termin√©"], 
                                    variable=status_var)
        status_menu.pack(fill='x', pady=(0, 10))
        
        # Priorit√©
        ctk.CTkLabel(main_frame, text="Priorit√©:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        priority_var = tk.StringVar(value=task.priority if task else "Moyenne")
        priority_menu = ctk.CTkOptionMenu(main_frame, values=["Basse", "Moyenne", "Critique"], 
                                        variable=priority_var)
        priority_menu.pack(fill='x', pady=(0, 10))
        
        # Responsable
        ctk.CTkLabel(main_frame, text="Responsable:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        assignee_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Nom ou email")
        assignee_entry.pack(fill='x', pady=(0, 10))
        if task:
            assignee_entry.insert(0, task.assignee)
            
        # √âch√©ance
        ctk.CTkLabel(main_frame, text="√âch√©ance:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        due_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="JJ/MM/AAAA")
        due_entry.pack(fill='x', pady=(0, 10))
        if task:
            due_entry.insert(0, task.due_date)
            
        # Lien avec noeud de l'arbre
        ctk.CTkLabel(main_frame, text="Lien avec noeud de l'arbre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        
        # R√©cup√©rer les noeuds disponibles
        node_options = ["Aucun"]
        if hasattr(self, 'tree_nodes') and self.tree_nodes:
            node_options.extend([node.text for node in self.tree_nodes])
        
        linked_node_var = tk.StringVar(value=task.linked_node.text if task and task.linked_node else "Aucun")
        node_menu = ctk.CTkOptionMenu(main_frame, values=node_options, variable=linked_node_var)
        node_menu.pack(fill='x', pady=(0, 20))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_task():
            # Validation
            if not title_entry.get().strip():
                messagebox.showerror("Erreur", "Le titre est obligatoire!")
                return
                
            # Trouver le noeud li√©
            linked_node = None
            if linked_node_var.get() != "Aucun" and hasattr(self, 'tree_nodes'):
                for node in self.tree_nodes:
                    if node.text == linked_node_var.get():
                        linked_node = node
                        break
            
            if task:
                # Modifier la t√¢che existante
                task.title = title_entry.get().strip()
                task.description = desc_textbox.get("1.0", "end-1c")
                task.status = status_var.get()
                task.priority = priority_var.get()
                task.assignee = assignee_entry.get().strip()
                task.due_date = due_entry.get().strip()
                task.linked_node = linked_node
            else:
                # Cr√©er une nouvelle t√¢che
                new_task = Task(
                    title=title_entry.get().strip(),
                    description=desc_textbox.get("1.0", "end-1c"),
                    status=status_var.get(),
                    priority=priority_var.get(),
                    assignee=assignee_entry.get().strip(),
                    due_date=due_entry.get().strip(),
                    linked_node=linked_node
                )
                self.tasks.append(new_task)
            
            result["saved"] = True
            dialog.destroy()
            
        def cancel():
            dialog.destroy()
            
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Sauvegarder", command=save_task).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_task_view()

    def delete_task(self, task):
        """Supprimer une t√¢che"""
        if messagebox.askyesno("Confirmation", f"Supprimer la t√¢che '{task.title}' ?"):
            self.tasks.remove(task)
            self.refresh_task_view()
            
    def change_task_status(self, task, new_status):
        """Changer le statut d'une t√¢che"""
        task.status = new_status
        self.refresh_task_view()
        
    def sync_tasks_with_tree(self):
        """Synchroniser les t√¢ches avec les noeuds de l'arbre"""
        # V√©rification plus robuste
        if not hasattr(self, 'tree_nodes'):
            messagebox.showwarning("Avertissement", "Le module d'arbre n'a pas √©t√© initialis√©!\nVeuillez d'abord aller dans 'Diagramme en Arbre'.")
            return
            
        if not self.tree_nodes:
            messagebox.showwarning("Avertissement", "L'arbre est vide!\nVeuillez d'abord cr√©er des n≈ìuds dans le diagramme.")
            return
        
        # V√©rifier que les t√¢ches existent
        if not hasattr(self, 'tasks'):
            self.tasks = []
        
        # Compter les t√¢ches cr√©√©es
        created_count = 0
        
        for node in self.tree_nodes:
            # V√©rifier si une t√¢che existe d√©j√† pour ce noeud
            existing_task = None
            for task in self.tasks:
                if hasattr(task, 'linked_node') and task.linked_node == node:
                    existing_task = task
                    break
                    
            if not existing_task:
                # Cr√©er une nouvelle t√¢che pour ce noeud
                new_task = Task(
                    title=f"T√¢che: {node.text}",
                    description=f"T√¢che automatiquement cr√©√©e pour le noeud '{node.text}'",
                    linked_node=node
                )
                self.tasks.append(new_task)
                created_count += 1
                
        if created_count > 0:
            messagebox.showinfo("Synchronisation", f"{created_count} nouvelle(s) t√¢che(s) cr√©√©e(s)!")
            
            # Rafra√Æchir seulement la vue des t√¢ches, PAS l'arbre
            if hasattr(self, 'refresh_task_view'):
                self.refresh_task_view()
            
            # Enregistrement automatique dans le journal
            if hasattr(self, 'add_automatic_log_entry'):
                self.add_automatic_log_entry(
                    title=f"Synchronisation t√¢ches-arbre",
                    description=f"{created_count} nouvelles t√¢ches cr√©√©es depuis l'arbre\nN≈ìuds trait√©s: {len(self.tree_nodes)}",
                    category="Task"
                )
            
            self.update_status(f"‚úÖ {created_count} t√¢ches synchronis√©es")
        else:
            messagebox.showinfo("Synchronisation", "Toutes les t√¢ches sont d√©j√† synchronis√©es!")
            self.update_status("Aucune synchronisation n√©cessaire")

    def update_task_stats(self):
        """Mettre √† jour les statistiques des t√¢ches"""
        total = len(self.tasks)
        todo = len([t for t in self.tasks if t.status == "√Ä faire"])
        in_progress = len([t for t in self.tasks if t.status == "En cours"])
        done = len([t for t in self.tasks if t.status == "Termin√©"])
        critical = len([t for t in self.tasks if t.priority == "Critique"])
        
        stats_text = f"Total: {total} | √Ä faire: {todo} | En cours: {in_progress} | Termin√©: {done}"
        if critical > 0:
            stats_text += f" | üî• Critique: {critical}"
            
        if hasattr(self, 'task_stats_label'):
            self.task_stats_label.configure(text=stats_text)                     
    
    def add_new_task(self):
        """Ajouter une nouvelle t√¢che"""
        self.edit_task(None)
        
    def edit_task(self, task):
        """√âditer une t√¢che (nouvelle ou existante)"""
        # Cr√©er une fen√™tre de dialogue
        dialog = ctk.CTkToplevel(self)
        dialog.title("√âditer la t√¢che" if task else "Nouvelle t√¢che")
        dialog.geometry("500x600")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        ctk.CTkLabel(main_frame, text="Titre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        title_entry = ctk.CTkEntry(main_frame, width=400)
        title_entry.pack(fill='x', pady=(0, 10))
        if task:
            title_entry.insert(0, task.title)
            
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        if task:
            desc_textbox.insert("1.0", task.description)
            
        # Statut
        ctk.CTkLabel(main_frame, text="Statut:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        status_var = tk.StringVar(value=task.status if task else "√Ä faire")
        status_menu = ctk.CTkOptionMenu(main_frame, values=["√Ä faire", "En cours", "Termin√©"], 
                                       variable=status_var)
        status_menu.pack(fill='x', pady=(0, 10))
        
        # Priorit√©
        ctk.CTkLabel(main_frame, text="Priorit√©:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        priority_var = tk.StringVar(value=task.priority if task else "Moyenne")
        priority_menu = ctk.CTkOptionMenu(main_frame, values=["Basse", "Moyenne", "Critique"], 
                                         variable=priority_var)
        priority_menu.pack(fill='x', pady=(0, 10))
        
        # Responsable
        ctk.CTkLabel(main_frame, text="Responsable:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        assignee_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Nom ou email")
        assignee_entry.pack(fill='x', pady=(0, 10))
        if task:
            assignee_entry.insert(0, task.assignee)
            
        # √âch√©ance
        ctk.CTkLabel(main_frame, text="√âch√©ance:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        due_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="JJ/MM/AAAA")
        due_entry.pack(fill='x', pady=(0, 10))
        if task:
            due_entry.insert(0, task.due_date)
            
        # Lien avec noeud de l'arbre
        ctk.CTkLabel(main_frame, text="Lien avec noeud de l'arbre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        
        # R√©cup√©rer les noeuds disponibles
        node_options = ["Aucun"]
        if hasattr(self, 'tree_nodes') and self.tree_nodes:
            node_options.extend([node.text for node in self.tree_nodes])
        
        linked_node_var = tk.StringVar(value=task.linked_node.text if task and task.linked_node else "Aucun")
        node_menu = ctk.CTkOptionMenu(main_frame, values=node_options, variable=linked_node_var)
        node_menu.pack(fill='x', pady=(0, 20))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_task():
            # Validation
            if not title_entry.get().strip():
                messagebox.showerror("Erreur", "Le titre est obligatoire!")
                return
                
            # Trouver le noeud li√©
            linked_node = None
            if linked_node_var.get() != "Aucun" and hasattr(self, 'tree_nodes'):
                for node in self.tree_nodes:
                    if node.text == linked_node_var.get():
                        linked_node = node
                        break
            
            if task:
                # Modifier la t√¢che existante
                task.title = title_entry.get().strip()
                task.description = desc_textbox.get("1.0", "end-1c")
                task.status = status_var.get()
                task.priority = priority_var.get()
                task.assignee = assignee_entry.get().strip()
                task.due_date = due_entry.get().strip()
                task.linked_node = linked_node
            else:
                # Cr√©er une nouvelle t√¢che
                new_task = Task(
                    title=title_entry.get().strip(),
                    description=desc_textbox.get("1.0", "end-1c"),
                    status=status_var.get(),
                    priority=priority_var.get(),
                    assignee=assignee_entry.get().strip(),
                    due_date=due_entry.get().strip(),
                    linked_node=linked_node
                )
                self.tasks.append(new_task)
            
            result["saved"] = True
            dialog.destroy()
            
        def cancel():
            dialog.destroy()
            
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Sauvegarder", command=save_task).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_task_view()
            
    def delete_task(self, task):
        """Supprimer une t√¢che"""
        if messagebox.askyesno("Confirmation", f"Supprimer la t√¢che '{task.title}' ?"):
            self.tasks.remove(task)
            self.refresh_task_view()
            
    def change_task_status(self, task, new_status):
        """Changer le statut d'une t√¢che"""
        task.status = new_status
        self.refresh_task_view()
        
    def sync_tasks_with_tree(self):
        """Synchroniser les t√¢ches avec les noeuds de l'arbre"""
        # V√©rification plus robuste
        if not hasattr(self, 'tree_nodes'):
            messagebox.showwarning("Avertissement", "Le module d'arbre n'a pas √©t√© initialis√©!\nVeuillez d'abord aller dans 'Diagramme en Arbre'.")
            return
            
        if not self.tree_nodes:
            messagebox.showwarning("Avertissement", "L'arbre est vide!\nVeuillez d'abord cr√©er des n≈ìuds dans le diagramme.")
            return
        
        # V√©rifier que les t√¢ches existent
        if not hasattr(self, 'tasks'):
            self.tasks = []
        
        # Compter les t√¢ches cr√©√©es
        created_count = 0
        
        for node in self.tree_nodes:
            # V√©rifier si une t√¢che existe d√©j√† pour ce noeud
            existing_task = None
            for task in self.tasks:
                if hasattr(task, 'linked_node') and task.linked_node == node:
                    existing_task = task
                    break
                    
            if not existing_task:
                # Cr√©er une nouvelle t√¢che pour ce noeud
                new_task = Task(
                    title=f"T√¢che: {node.text}",
                    description=f"T√¢che automatiquement cr√©√©e pour le noeud '{node.text}'",
                    linked_node=node
                )
                self.tasks.append(new_task)
                created_count += 1
                
        if created_count > 0:
            messagebox.showinfo("Synchronisation", f"{created_count} nouvelle(s) t√¢che(s) cr√©√©e(s)!")
            
            # Rafra√Æchir seulement la vue des t√¢ches, PAS l'arbre
            if hasattr(self, 'refresh_task_view'):
                self.refresh_task_view()
            
            # Enregistrement automatique dans le journal
            if hasattr(self, 'add_automatic_log_entry'):
                self.add_automatic_log_entry(
                    title=f"Synchronisation t√¢ches-arbre",
                    description=f"{created_count} nouvelles t√¢ches cr√©√©es depuis l'arbre\nN≈ìuds trait√©s: {len(self.tree_nodes)}",
                    category="Task"
                )
            
            self.update_status(f"‚úÖ {created_count} t√¢ches synchronis√©es")
        else:
            messagebox.showinfo("Synchronisation", "Toutes les t√¢ches sont d√©j√† synchronis√©es!")
            self.update_status("Aucune synchronisation n√©cessaire")
    
    def update_task_stats(self):
        """Mettre √† jour les statistiques des t√¢ches"""
        total = len(self.tasks)
        todo = len([t for t in self.tasks if t.status == "√Ä faire"])
        in_progress = len([t for t in self.tasks if t.status == "En cours"])
        done = len([t for t in self.tasks if t.status == "Termin√©"])
        critical = len([t for t in self.tasks if t.priority == "Critique"])
        
        stats_text = f"Total: {total} | √Ä faire: {todo} | En cours: {in_progress} | Termin√©: {done}"
        if critical > 0:
            stats_text += f" | üî• Critique: {critical}"
            
        if hasattr(self, 'task_stats_label'):
            self.task_stats_label.configure(text=stats_text)
        
    def example_action(self):
        """Action d'exemple"""
        messagebox.showinfo("Information", "Action ex√©cut√©e avec succ√®s !")
        self.update_status("Action ex√©cut√©e")
        
    def change_appearance_mode_event(self, new_appearance_mode: str):
        """Changer le th√®me de l'application"""
        ctk.set_appearance_mode(new_appearance_mode.lower())
        self.update_status(f"Th√®me chang√© : {new_appearance_mode}")
        
    def update_status(self, message: str):
        """Mettre √† jour la barre de statut"""
        if hasattr(self, 'status_label'):
            self.status_label.configure(text=message)
        
    def on_closing(self):
        """Gestionnaire de fermeture de l'application"""
        if messagebox.askokcancel("Quitter", "Voulez-vous vraiment quitter l'application ?"):
            self.destroy()
            
    def create_sample_tasks(self):
        """Cr√©er quelques t√¢ches d'exemple pour les tests"""
        sample_tasks = [
            Task(
                title="Analyser les besoins du projet",
                description="Recueillir et analyser les exigences fonctionnelles",
                status="En cours",
                priority="Critique",
                assignee="Chef de projet",
                due_date="15/12/2024"
            ),
            Task(
                title="Concevoir l'architecture",
                description="D√©finir l'architecture technique du syst√®me",
                status="√Ä faire",
                priority="Moyenne",
                assignee="Architecte",
                due_date="20/12/2024"
            ),
            Task(
                title="D√©velopper le module principal",
                description="Impl√©menter les fonctionnalit√©s de base",
                status="√Ä faire",
                priority="Critique",
                assignee="D√©veloppeur senior",
                due_date="30/12/2024"
            ),
            Task(
                title="Tests unitaires",
                description="Cr√©er et ex√©cuter les tests unitaires",
                status="√Ä faire",
                priority="Moyenne",
                assignee="Testeur",
                due_date="05/01/2025"
            ),
            Task(
                title="Documentation utilisateur",
                description="R√©diger la documentation pour les utilisateurs finaux",
                status="Termin√©",
                priority="Basse",
                assignee="R√©dacteur technique",
                due_date="10/12/2024"
            )
        ]
        
        self.tasks.extend(sample_tasks)
        self.refresh_task_view()
        self.update_status(f"{len(sample_tasks)} t√¢ches d'exemple cr√©√©es")
        
    def show_decision_log(self):
        """Afficher le module journal de bord / carnet de d√©cisions"""
        self.clear_content()
        self.main_title.configure(text="üí¨ Journal de Bord / Carnet de D√©cisions")
        
        # ‚úÖ CORRECTION : Configuration de l'expansion compl√®te
        self.content_frame.grid_rowconfigure(1, weight=1)  # Ligne principale du journal
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # Initialiser les variables du journal si n√©cessaire
        if not hasattr(self, 'log_entries'):
            self.log_entries = []
        if not hasattr(self, 'log_filter_author'):
            self.log_filter_author = "Tous"
        if not hasattr(self, 'log_filter_category'):
            self.log_filter_category = "Toutes"
        if not hasattr(self, 'log_filter_date_from'):
            self.log_filter_date_from = ""
        if not hasattr(self, 'log_filter_date_to'):
            self.log_filter_date_to = ""
        
        # ‚úÖ NOUVEAU : Taille fixe en mode Large
        self.log_area_width = 1600   # Taille Large fixe
        self.log_area_height = 800   # Taille Large fixe
            
        # Toolbar avec contr√¥les
        toolbar_frame = ctk.CTkFrame(self.content_frame)
        toolbar_frame.grid(row=0, column=0, padx=5, pady=2, sticky="ew")
        toolbar_frame.grid_columnconfigure(1, weight=1)
        
        # Section boutons d'action
        actions_frame = ctk.CTkFrame(toolbar_frame)
        actions_frame.grid(row=0, column=0, padx=5, pady=5)
        
        ctk.CTkButton(actions_frame, text="‚ûï Nouvelle Entr√©e", 
                    command=self.add_manual_log_entry).grid(row=0, column=0, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üì• Exporter Journal", 
                    command=self.export_decision_log).grid(row=0, column=1, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è Vider Journal", 
                    command=self.clear_decision_log).grid(row=0, column=2, padx=5, pady=5)
        
        # Section filtres
        filters_frame = ctk.CTkFrame(toolbar_frame)
        filters_frame.grid(row=0, column=1, padx=20, pady=5, sticky="ew")
        filters_frame.grid_columnconfigure(4, weight=1)
        
        ctk.CTkLabel(filters_frame, text="Filtres:").grid(row=0, column=0, padx=5, pady=5)
        
        # Filtre par auteur
        ctk.CTkLabel(filters_frame, text="Auteur:").grid(row=0, column=1, padx=(10, 2), pady=5)
        authors = ["Tous"] + list(set([entry.author for entry in self.log_entries if entry.author]))
        self.log_author_filter = ctk.CTkOptionMenu(filters_frame, values=authors if authors else ["Tous"],
                                                command=self.apply_log_filters, width=100)
        self.log_author_filter.grid(row=0, column=2, padx=2, pady=5)
        
        # Filtre par cat√©gorie
        ctk.CTkLabel(filters_frame, text="Cat√©gorie:").grid(row=0, column=3, padx=(10, 2), pady=5)
        categories = ["Toutes", "Decision", "Technical", "Meeting", "Node", "Task", "Status"]
        self.log_category_filter = ctk.CTkOptionMenu(filters_frame, values=categories,
                                                    command=self.apply_log_filters, width=100)
        self.log_category_filter.grid(row=0, column=4, padx=2, pady=5)
        
        # Filtre par date
        date_frame = ctk.CTkFrame(filters_frame)
        date_frame.grid(row=0, column=5, padx=10, pady=5)
        
        ctk.CTkLabel(date_frame, text="Du:").pack(side="left", padx=2)
        self.log_date_from = ctk.CTkEntry(date_frame, width=80, placeholder_text="JJ/MM/AAAA")
        self.log_date_from.pack(side="left", padx=2)
        self.log_date_from.bind('<KeyRelease>', lambda e: self.apply_log_filters())
        
        ctk.CTkLabel(date_frame, text="Au:").pack(side="left", padx=(10, 2))
        self.log_date_to = ctk.CTkEntry(date_frame, width=80, placeholder_text="JJ/MM/AAAA")
        self.log_date_to.pack(side="left", padx=2)
        self.log_date_to.bind('<KeyRelease>', lambda e: self.apply_log_filters())
        
        ctk.CTkButton(date_frame, text="üîÑ", width=30, 
                    command=self.reset_log_filters).pack(side="left", padx=5)
        
        # Statistiques
        stats_frame = ctk.CTkFrame(toolbar_frame)
        stats_frame.grid(row=0, column=2, padx=10, pady=5)
        
        self.log_stats_label = ctk.CTkLabel(stats_frame, text="Chargement...")
        self.log_stats_label.pack(padx=10, pady=5)
        
        # ‚úÖ Frame principal avec zone de journal en taille Large fixe
        main_log_frame = ctk.CTkFrame(self.content_frame)
        main_log_frame.grid(row=1, column=0, padx=5, pady=2, sticky="nsew")
        main_log_frame.grid_columnconfigure(0, weight=1)
        main_log_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas pour la zone de journal avec taille Large fixe
        log_canvas_frame = ctk.CTkFrame(main_log_frame)
        log_canvas_frame.grid(row=0, column=0, sticky="nsew", padx=0, pady=0)
        log_canvas_frame.grid_columnconfigure(0, weight=1)
        log_canvas_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas principal du journal avec taille Large (1600x800)
        self.log_canvas = tk.Canvas(log_canvas_frame, bg='#f0f0f0', 
                                width=self.log_area_width, 
                                height=self.log_area_height,
                                highlightthickness=0)  # ‚úÖ Retirer la bordure
        self.log_canvas.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbars pour la zone de journal
        log_v_scrollbar = ttk.Scrollbar(log_canvas_frame, orient="vertical", command=self.log_canvas.yview)
        log_h_scrollbar = ttk.Scrollbar(log_canvas_frame, orient="horizontal", command=self.log_canvas.xview)
        self.log_canvas.configure(yscrollcommand=log_v_scrollbar.set, xscrollcommand=log_h_scrollbar.set)
        
        log_v_scrollbar.grid(row=0, column=1, sticky="ns")
        log_h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        # ‚úÖ Configuration de la zone de scroll - taille exacte
        self.log_canvas.configure(scrollregion=(0, 0, self.log_area_width, self.log_area_height))
        
        # ‚úÖ Frame pour le contenu du journal √† l'int√©rieur du canvas
        self.log_content_frame = ctk.CTkFrame(self.log_canvas)
        self.log_canvas_window = self.log_canvas.create_window(0, 0, anchor="nw", window=self.log_content_frame)
        self.log_content_frame.grid_columnconfigure(0, weight=1)
        
        # ‚úÖ Configuration du contenu pour occuper exactement la taille du canvas
        self.log_content_frame.configure(width=self.log_area_width, height=self.log_area_height)
        
        # Bind pour ajuster la taille du frame interne
        self.log_content_frame.bind('<Configure>', self.on_log_frame_configure)
        self.log_canvas.bind('<Configure>', self.on_log_canvas_configure)
        
        # Afficher les entr√©es
        self.refresh_log_view()
        
        self.update_status("Module journal de bord affich√© en taille Large (1600x800)")

    def on_log_frame_configure(self, event):
        """G√©rer le redimensionnement du frame de contenu du journal"""
        # ‚úÖ CORRECTION : Mettre √† jour la scrollregion pour la taille exacte du contenu
        canvas_width = self.log_canvas.winfo_width()
        canvas_height = self.log_canvas.winfo_height()
        
        # Ajuster la taille de la scrollregion au contenu r√©el
        bbox = self.log_canvas.bbox("all")
        if bbox:
            self.log_canvas.configure(scrollregion=bbox)
        else:
            # Si pas de contenu, utiliser la taille exacte du canvas
            self.log_canvas.configure(scrollregion=(0, 0, canvas_width, canvas_height))

    def on_log_canvas_configure(self, event):
        """G√©rer le redimensionnement du canvas du journal"""
        # ‚úÖ CORRECTION : Ajuster la largeur du frame interne exactement au canvas
        canvas_width = event.width
        canvas_height = event.height
        
        # Configurer la fen√™tre du canvas pour occuper exactement l'espace
        self.log_canvas.itemconfig(self.log_canvas_window, width=canvas_width, height=canvas_height)
        
        # Mettre √† jour la taille du frame de contenu
        self.log_content_frame.configure(width=canvas_width, height=canvas_height)

    def refresh_log_view(self):
        """Rafra√Æchir l'affichage du journal - MODIFI√â pour utiliser le canvas"""
        print(f"üîÑ Rafra√Æchissement de l'affichage du journal...")
        print(f"   - Nombre d'entr√©es: {len(self.log_entries)}")
        print(f"   - Taille zone: {self.log_area_width}x{self.log_area_height}")
        
        # Nettoyer le contenu actuel
        for widget in self.log_content_frame.winfo_children():
            widget.destroy()
            
        # Filtrer les entr√©es
        filtered_entries = self.get_filtered_log_entries()
        
        # Trier par date (plus r√©cent en premier)
        filtered_entries.sort(key=lambda x: x.timestamp, reverse=True)
        
        if not filtered_entries:
            no_entries_label = ctk.CTkLabel(self.log_content_frame, 
                                        text="Aucune entr√©e trouv√©e avec les filtres actuels",
                                        font=ctk.CTkFont(size=14))
            no_entries_label.pack(pady=50)
        else:
            # ‚úÖ Utiliser pack au lieu de grid pour une meilleure gestion de l'espace
            for entry in filtered_entries:
                self.create_log_entry_widget_enhanced(entry)
                
        self.update_log_stats(filtered_entries)
        print(f"‚úÖ Rafra√Æchissement termin√©")

    def create_log_entry_widget_enhanced(self, entry):
        """Cr√©er le widget pour une entr√©e de journal - Version am√©lior√©e pour canvas"""
        # ‚úÖ Frame principal pour l'entr√©e avec largeur adapt√©e
        entry_frame = ctk.CTkFrame(self.log_content_frame)
        entry_frame.pack(fill="x", padx=10, pady=5)
        
        # Calculer la largeur disponible
        available_width = max(400, self.log_area_width - 40)  # 40px pour les marges
        
        # Header avec info principale
        header_frame = ctk.CTkFrame(entry_frame)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # Ic√¥ne selon la cat√©gorie
        category_icons = {
            "Decision": "üìã", "Technical": "üîß", "Meeting": "üë•",
            "Node": "üå≥", "Task": "‚úÖ", "Status": "üîÑ", "Auto": "ü§ñ"
        }
        icon = category_icons.get(entry.category, "üìù")
        
        # Type d'entr√©e (auto/manual)
        type_color = "#4CAF50" if entry.entry_type == "auto" else "#2196F3"
        type_text = "AUTO" if entry.entry_type == "auto" else "MANUEL"
        
        # Date et heure
        date_str = entry.timestamp.strftime("%d/%m/%Y √† %H:%M")
        
        # Ligne 1 : Ic√¥ne, titre, type, date
        title_label = ctk.CTkLabel(header_frame, text=f"{icon} {entry.title}", 
                                font=ctk.CTkFont(size=14, weight="bold"),
                                wraplength=available_width - 200)  # Laisser de la place pour les infos
        title_label.pack(side="left", anchor="w", fill="x", expand=True)
        
        info_frame = ctk.CTkFrame(header_frame)
        info_frame.pack(side="right")
        
        type_label = ctk.CTkLabel(info_frame, text=type_text, 
                                text_color=type_color, font=ctk.CTkFont(size=10, weight="bold"))
        type_label.pack(side="right", padx=5)
        
        date_label = ctk.CTkLabel(info_frame, text=date_str, 
                                font=ctk.CTkFont(size=10))
        date_label.pack(side="right", padx=5)
        
        # Ligne 2 : Auteur et cat√©gorie
        meta_frame = ctk.CTkFrame(entry_frame)
        meta_frame.pack(fill="x", padx=10, pady=2)
        
        if entry.author:
            author_label = ctk.CTkLabel(meta_frame, text=f"üë§ {entry.author}", 
                                    font=ctk.CTkFont(size=10))
            author_label.pack(side="left", padx=5)
            
        category_label = ctk.CTkLabel(meta_frame, text=f"üè∑Ô∏è {entry.category}", 
                                    font=ctk.CTkFont(size=10))
        category_label.pack(side="left", padx=5)
        
        # Description (adapt√©e √† la largeur)
        if entry.description:
            desc_frame = ctk.CTkFrame(entry_frame)
            desc_frame.pack(fill="x", padx=10, pady=(2, 5))
            
            # ‚úÖ Hauteur adapt√©e au contenu mais limit√©e
            desc_height = min(150, max(80, len(entry.description) // 10))  # Hauteur dynamique
            
            desc_text = ctk.CTkTextbox(desc_frame, height=desc_height, width=available_width)
            desc_text.pack(fill="x", padx=5, pady=5)
            desc_text.insert("1.0", entry.description)
            desc_text.configure(state="disabled")
            
            # Bouton pour voir en d√©tail si l'entr√©e est longue
            if len(entry.description) > 500:
                detail_btn = ctk.CTkButton(desc_frame, text="üîç Voir en d√©tail", height=25,
                                    command=lambda: self.show_full_log_entry(entry))
                detail_btn.pack(pady=2)
                    
        # Boutons d'action pour les entr√©es manuelles
        if entry.entry_type == "manual":
            actions_frame = ctk.CTkFrame(entry_frame)
            actions_frame.pack(fill="x", padx=10, pady=(0, 10))
            
            ctk.CTkButton(actions_frame, text="‚úèÔ∏è Modifier", width=80, height=25,
                        command=lambda: self.edit_log_entry(entry)).pack(side="right", padx=2)
            ctk.CTkButton(actions_frame, text="üóëÔ∏è Supprimer", width=80, height=25,
                        command=lambda: self.delete_log_entry(entry)).pack(side="right", padx=2)
            ctk.CTkButton(actions_frame, text="üìã Copier", width=80, height=25,
                        command=lambda: self.copy_log_entry_to_clipboard(entry)).pack(side="left", padx=2)

    def copy_log_entry_to_clipboard(self, entry):
        """Copier le contenu d'une entr√©e dans le presse-papiers"""
        try:
            content = f"""--- {entry.title} ---
    Date: {entry.timestamp.strftime('%d/%m/%Y √† %H:%M:%S')}
    Auteur: {entry.author}
    Cat√©gorie: {entry.category}
    Type: {'Automatique' if entry.entry_type == 'auto' else 'Manuelle'}

    {entry.description}
    """
            # Copier dans le presse-papiers (compatible multi-plateforme)
            import tkinter as tk
            self.clipboard_clear()
            self.clipboard_append(content)
            self.update()  # Maintenant il y reste apr√®s que la fen√™tre est ferm√©e
            
            # Message de confirmation temporaire
            self.update_status("Entr√©e copi√©e dans le presse-papiers")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de copier dans le presse-papiers :\n{str(e)}")
        
    def add_manual_log_entry(self):
        """Ajouter une entr√©e manuelle au journal"""
        # Cr√©er une fen√™tre de dialogue
        dialog = ctk.CTkToplevel(self)
        dialog.title("Nouvelle Entr√©e Journal")
        dialog.geometry("600x500")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        ctk.CTkLabel(main_frame, text="Titre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        title_entry = ctk.CTkEntry(main_frame, width=500, placeholder_text="Ex: D√©cision architecture microservices")
        title_entry.pack(fill='x', pady=(0, 10))
        
        # Cat√©gorie
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        category_var = tk.StringVar(value="Decision")
        category_menu = ctk.CTkOptionMenu(main_frame, values=["Decision", "Technical", "Meeting", "Other"], 
                                         variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Auteur
        ctk.CTkLabel(main_frame, text="Auteur:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        author_entry = ctk.CTkEntry(main_frame, width=500, placeholder_text="Votre nom ou email")
        author_entry.pack(fill='x', pady=(0, 10))
        
        # Description
        ctk.CTkLabel(main_frame, text="Description / D√©tails:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=200, width=500)
        desc_textbox.pack(fill='both', expand=True, pady=(0, 20))
        desc_textbox.insert("1.0", "Contexte:\n\n\nD√©cision prise:\n\n\nJustification:\n\n\nImpact:\n\n")
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_entry():
            if not title_entry.get().strip():
                messagebox.showerror("Erreur", "Le titre est obligatoire!")
                return
                
            new_entry = LogEntry(
                entry_type="manual",
                title=title_entry.get().strip(),
                description=desc_textbox.get("1.0", "end-1c"),
                author=author_entry.get().strip(),
                category=category_var.get()
            )
            
            self.log_entries.append(new_entry)
            result["saved"] = True
            dialog.destroy()
            
        def cancel():
            dialog.destroy()
            
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Sauvegarder", command=save_entry).pack(side='right')
        
        # Focus sur le titre
        title_entry.focus()
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_log_view()
            self.update_status("Nouvelle entr√©e ajout√©e au journal")
            
    def add_automatic_log_entry(self, title, description, category="Auto"):
        """Ajouter une entr√©e automatique au journal"""
        entry = LogEntry(
            entry_type="auto",
            title=title,
            description=description,
            author="Syst√®me",
            category=category
        )
        
        if not hasattr(self, 'log_entries'):
            self.log_entries = []
            
        self.log_entries.append(entry)
        
        # Limiter le nombre d'entr√©es automatiques √† 1000 pour √©viter l'encombrement
        auto_entries = [e for e in self.log_entries if e.entry_type == "auto"]
        if len(auto_entries) > 1000:
            # Supprimer les plus anciennes entr√©es automatiques
            auto_entries.sort(key=lambda x: x.timestamp)
            for old_entry in auto_entries[:100]:  # Supprimer les 100 plus anciennes
                self.log_entries.remove(old_entry)
                
    def refresh_log_view(self):
        """Rafra√Æchir l'affichage du journal"""
        # Nettoyer le contenu actuel
        for widget in self.log_content_frame.winfo_children():
            widget.destroy()
            
        # Filtrer les entr√©es
        filtered_entries = self.get_filtered_log_entries()
        
        # Trier par date (plus r√©cent en premier)
        filtered_entries.sort(key=lambda x: x.timestamp, reverse=True)
        
        if not filtered_entries:
            no_entries_label = ctk.CTkLabel(self.log_content_frame, 
                                          text="Aucune entr√©e trouv√©e avec les filtres actuels",
                                          font=ctk.CTkFont(size=14))
            no_entries_label.pack(pady=50)
        else:
            for entry in filtered_entries:
                self.create_log_entry_widget(entry)
                
        self.update_log_stats(filtered_entries)
        
    def get_filtered_log_entries(self):
        """Obtenir les entr√©es filtr√©es selon les crit√®res"""
        filtered = self.log_entries.copy()
        
        # Filtre par auteur
        if hasattr(self, 'log_author_filter') and self.log_author_filter.get() != "Tous":
            filtered = [e for e in filtered if e.author == self.log_author_filter.get()]
            
        # Filtre par cat√©gorie
        if hasattr(self, 'log_category_filter') and self.log_category_filter.get() != "Toutes":
            filtered = [e for e in filtered if e.category == self.log_category_filter.get()]
            
        # Filtre par date
        if hasattr(self, 'log_date_from') and self.log_date_from.get():
            try:
                date_from = datetime.datetime.strptime(self.log_date_from.get(), "%d/%m/%Y")
                filtered = [e for e in filtered if e.timestamp.date() >= date_from.date()]
            except ValueError:
                pass  # Ignorer les dates invalides
                
        if hasattr(self, 'log_date_to') and self.log_date_to.get():
            try:
                date_to = datetime.datetime.strptime(self.log_date_to.get(), "%d/%m/%Y")
                filtered = [e for e in filtered if e.timestamp.date() <= date_to.date()]
            except ValueError:
                pass  # Ignorer les dates invalides
                
        return filtered
        
    def create_log_entry_widget(self, entry):
        """Cr√©er le widget pour une entr√©e de journal"""
        # Frame principal pour l'entr√©e
        entry_frame = ctk.CTkFrame(self.log_content_frame)
        entry_frame.pack(fill="x", padx=10, pady=5)
        
        # Header avec info principale
        header_frame = ctk.CTkFrame(entry_frame)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # Ic√¥ne selon la cat√©gorie
        category_icons = {
            "Decision": "üìã", "Technical": "üîß", "Meeting": "üë•",
            "Node": "üå≥", "Task": "‚úÖ", "Status": "üîÑ", "Auto": "ü§ñ"
        }
        icon = category_icons.get(entry.category, "üìù")
        
        # Type d'entr√©e (auto/manual)
        type_color = "#4CAF50" if entry.entry_type == "auto" else "#2196F3"
        type_text = "AUTO" if entry.entry_type == "auto" else "MANUEL"
        
        # Date et heure
        date_str = entry.timestamp.strftime("%d/%m/%Y √† %H:%M")
        
        # Ligne 1 : Ic√¥ne, titre, type, date
        title_label = ctk.CTkLabel(header_frame, text=f"{icon} {entry.title}", 
                                  font=ctk.CTkFont(size=14, weight="bold"))
        title_label.pack(side="left", anchor="w")
        
        info_frame = ctk.CTkFrame(header_frame)
        info_frame.pack(side="right")
        
        type_label = ctk.CTkLabel(info_frame, text=type_text, 
                                 text_color=type_color, font=ctk.CTkFont(size=10, weight="bold"))
        type_label.pack(side="right", padx=5)
        
        date_label = ctk.CTkLabel(info_frame, text=date_str, 
                                 font=ctk.CTkFont(size=10))
        date_label.pack(side="right", padx=5)
        
        # Ligne 2 : Auteur et cat√©gorie
        meta_frame = ctk.CTkFrame(entry_frame)
        meta_frame.pack(fill="x", padx=10, pady=2)
        
        if entry.author:
            author_label = ctk.CTkLabel(meta_frame, text=f"üë§ {entry.author}", 
                                       font=ctk.CTkFont(size=10))
            author_label.pack(side="left", padx=5)
            
        category_label = ctk.CTkLabel(meta_frame, text=f"üè∑Ô∏è {entry.category}", 
                                     font=ctk.CTkFont(size=10))
        category_label.pack(side="left", padx=5)
        
        # Description (pliable)
        if entry.description:
            desc_frame = ctk.CTkFrame(entry_frame)
            desc_frame.pack(fill="x", padx=10, pady=(2, 5))
            
            # Limiter l'affichage initial
            short_desc = entry.description[:200] + "..." if len(entry.description) > 200 else entry.description
            
            desc_text = ctk.CTkTextbox(desc_frame, height=60)
            desc_text.pack(fill="x", padx=5, pady=5)
            desc_text.insert("1.0", short_desc)
            desc_text.configure(state="disabled")
            
            # Bouton pour voir plus si n√©cessaire
            if len(entry.description) > 200:
                def show_full_description():
                    self.show_full_log_entry(entry)
                    
                more_btn = ctk.CTkButton(desc_frame, text="Voir plus...", height=20,
                                       command=show_full_description)
                more_btn.pack(pady=2)
                
        # Boutons d'action pour les entr√©es manuelles
        if entry.entry_type == "manual":
            actions_frame = ctk.CTkFrame(entry_frame)
            actions_frame.pack(fill="x", padx=10, pady=(0, 10))
            
            ctk.CTkButton(actions_frame, text="‚úèÔ∏è Modifier", width=80, height=25,
                         command=lambda: self.edit_log_entry(entry)).pack(side="right", padx=2)
            ctk.CTkButton(actions_frame, text="üóëÔ∏è Supprimer", width=80, height=25,
                         command=lambda: self.delete_log_entry(entry)).pack(side="right", padx=2)
                         
    def show_full_log_entry(self, entry):
        """Afficher une entr√©e compl√®te dans une nouvelle fen√™tre"""
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"Entr√©e Journal - {entry.title}")
        dialog.geometry("700x600")
        dialog.transient(self)
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # En-t√™te
        header_text = f"""üìã {entry.title}
        
üïê Date: {entry.timestamp.strftime('%d/%m/%Y √† %H:%M:%S')}
üë§ Auteur: {entry.author}
üè∑Ô∏è Cat√©gorie: {entry.category}
üîß Type: {'Automatique' if entry.entry_type == 'auto' else 'Manuelle'}

üìù Description:
"""
        
        header_label = ctk.CTkLabel(main_frame, text=header_text, 
                                   font=ctk.CTkFont(size=12),
                                   justify="left")
        header_label.pack(anchor="w", pady=(0, 10))
        
        # Contenu
        content_text = ctk.CTkTextbox(main_frame)
        content_text.pack(fill='both', expand=True, pady=10)
        content_text.insert("1.0", entry.description)
        content_text.configure(state="disabled")
        
        # Bouton fermer
        ctk.CTkButton(main_frame, text="Fermer", 
                     command=dialog.destroy).pack(pady=10)
                     
    def edit_log_entry(self, entry):
        """Modifier une entr√©e de journal"""
        if entry.entry_type == "auto":
            messagebox.showwarning("Attention", "Les entr√©es automatiques ne peuvent pas √™tre modifi√©es!")
            return
            
        # R√©utiliser la logique d'ajout mais en pr√©-remplissant
        dialog = ctk.CTkToplevel(self)
        dialog.title("Modifier Entr√©e Journal")
        dialog.geometry("600x500")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        ctk.CTkLabel(main_frame, text="Titre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        title_entry = ctk.CTkEntry(main_frame, width=500)
        title_entry.pack(fill='x', pady=(0, 10))
        title_entry.insert(0, entry.title)
        
        # Cat√©gorie
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        category_var = tk.StringVar(value=entry.category)
        category_menu = ctk.CTkOptionMenu(main_frame, values=["Decision", "Technical", "Meeting", "Other"], 
                                         variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Auteur
        ctk.CTkLabel(main_frame, text="Auteur:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        author_entry = ctk.CTkEntry(main_frame, width=500)
        author_entry.pack(fill='x', pady=(0, 10))
        author_entry.insert(0, entry.author)
        
        # Description
        ctk.CTkLabel(main_frame, text="Description / D√©tails:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=200, width=500)
        desc_textbox.pack(fill='both', expand=True, pady=(0, 20))
        desc_textbox.insert("1.0", entry.description)
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_changes():
            if not title_entry.get().strip():
                messagebox.showerror("Erreur", "Le titre est obligatoire!")
                return
                
            entry.title = title_entry.get().strip()
            entry.description = desc_textbox.get("1.0", "end-1c")
            entry.author = author_entry.get().strip()
            entry.category = category_var.get()
            
            result["saved"] = True
            dialog.destroy()
            
        def cancel():
            dialog.destroy()
            
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Sauvegarder", command=save_changes).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_log_view()
            self.update_status("Entr√©e modifi√©e")
            
    def delete_log_entry(self, entry):
        """Supprimer une entr√©e de journal"""
        if messagebox.askyesno("Confirmation", f"Supprimer l'entr√©e '{entry.title}' ?"):
            self.log_entries.remove(entry)
            self.refresh_log_view()
            self.update_status("Entr√©e supprim√©e")
            
    def apply_log_filters(self, *args):
        """Appliquer les filtres et rafra√Æchir la vue"""
        self.refresh_log_view()
        
    def reset_log_filters(self):
        """R√©initialiser tous les filtres"""
        if hasattr(self, 'log_author_filter'):
            self.log_author_filter.set("Tous")
        if hasattr(self, 'log_category_filter'):
            self.log_category_filter.set("Toutes")
        if hasattr(self, 'log_date_from'):
            self.log_date_from.delete(0, 'end')
        if hasattr(self, 'log_date_to'):
            self.log_date_to.delete(0, 'end')
        self.refresh_log_view()
        
    def update_log_stats(self, filtered_entries):
        """Mettre √† jour les statistiques du journal"""
        total = len(self.log_entries)
        filtered_count = len(filtered_entries)
        manual_count = len([e for e in filtered_entries if e.entry_type == "manual"])
        auto_count = len([e for e in filtered_entries if e.entry_type == "auto"])
        
        stats_text = f"Total: {total} | Affich√©es: {filtered_count} | Manuelles: {manual_count} | Auto: {auto_count}"
        
        if hasattr(self, 'log_stats_label'):
            self.log_stats_label.configure(text=stats_text)
            
    def export_decision_log(self):
        """Exporter le journal de bord"""
        if not self.log_entries:
            messagebox.showwarning("Avertissement", "Aucune entr√©e √† exporter!")
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".md",
            filetypes=[("Markdown files", "*.md"), ("Text files", "*.txt")],
            title="Sauvegarder le journal de bord"
        )
        
        if filename:
            try:
                filtered_entries = self.get_filtered_log_entries()
                filtered_entries.sort(key=lambda x: x.timestamp, reverse=True)
                
                content = f"""# üí¨ Journal de Bord / Carnet de D√©cisions

    *Export√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
    *Nombre d'entr√©es : {len(filtered_entries)}*

---

"""
                
                for entry in filtered_entries:
                    entry_type = "ü§ñ AUTOMATIQUE" if entry.entry_type == "auto" else "üë§ MANUELLE"
                    
                    content += f"""## {entry.title}

**üìÖ Date :** {entry.timestamp.strftime('%d/%m/%Y √† %H:%M:%S')}
**üë§ Auteur :** {entry.author}
**üè∑Ô∏è Cat√©gorie :** {entry.category}
**üîß Type :** {entry_type}

**üìù Description :**
{entry.description}

---

"""
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                    
                messagebox.showinfo("Export", f"Journal export√© avec succ√®s :\n{filename}")
                self.update_status("Journal export√©")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'export :\n{str(e)}")
                
    def clear_decision_log(self):
        """Vider le journal de bord"""
        if not self.log_entries:
            messagebox.showwarning("Avertissement", "Le journal est d√©j√† vide!")
            return
            
        response = messagebox.askyesnocancel(
            "Confirmation", 
            "Que voulez-vous supprimer ?\n\n"
            "‚Ä¢ Oui = Tout supprimer\n"
            "‚Ä¢ Non = Supprimer seulement les entr√©es automatiques\n"
            "‚Ä¢ Annuler = Ne rien supprimer"
        )
        
        if response is True:  # Tout supprimer
            self.log_entries.clear()
            self.refresh_log_view()
            self.update_status("Journal vid√© compl√®tement")
        elif response is False:  # Supprimer seulement les automatiques
            self.log_entries = [e for e in self.log_entries if e.entry_type == "manual"]
            self.refresh_log_view()
            self.update_status("Entr√©es automatiques supprim√©es")

    def show_document_manager(self):
        """Afficher le module de gestion documentaire"""
        self.clear_content()
        self.main_title.configure(text="üìÅ Gestionnaire de Documents")
        
        # ‚úÖ CORRECTION : Configuration de l'expansion compl√®te
        self.content_frame.grid_rowconfigure(1, weight=1)  # Ligne principale des documents
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # Initialiser les variables si n√©cessaire
        if not hasattr(self, 'documents'):
            self.documents = []
        if not hasattr(self, 'documents_storage_path'):
            self.documents_storage_path = os.path.join(os.getcwd(), "documents_storage")
            if not os.path.exists(self.documents_storage_path):
                os.makedirs(self.documents_storage_path)
        if not hasattr(self, 'doc_view_mode'):
            self.doc_view_mode = "grid"  # "grid" ou "list"
        if not hasattr(self, 'doc_filter_category'):
            self.doc_filter_category = "Toutes"
        if not hasattr(self, 'doc_filter_node'):
            self.doc_filter_node = "Tous"
        
        # ‚úÖ NOUVEAU : Taille fixe en mode Large
        self.doc_area_width = 1600   # Taille Large fixe
        self.doc_area_height = 800   # Taille Large fixe
            
        # Toolbar avec contr√¥les
        toolbar_frame = ctk.CTkFrame(self.content_frame)
        toolbar_frame.grid(row=0, column=0, padx=5, pady=2, sticky="ew")
        toolbar_frame.grid_columnconfigure(1, weight=1)
        
        # Section boutons d'action
        actions_frame = ctk.CTkFrame(toolbar_frame)
        actions_frame.grid(row=0, column=0, padx=5, pady=5)
        
        ctk.CTkButton(actions_frame, text="üìÅ Ajouter Document", 
                    command=self.add_document).grid(row=0, column=0, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üìã Importer Dossier", 
                    command=self.import_folder).grid(row=0, column=1, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üìä Rapport Documents", 
                    command=self.generate_document_report).grid(row=0, column=2, padx=5, pady=5)
        
        # Section filtres et vues
        filters_frame = ctk.CTkFrame(toolbar_frame)
        filters_frame.grid(row=0, column=1, padx=20, pady=5, sticky="ew")
        filters_frame.grid_columnconfigure(4, weight=1)
        
        ctk.CTkLabel(filters_frame, text="Filtres:").grid(row=0, column=0, padx=5, pady=5)
        
        # Filtre par cat√©gorie
        ctk.CTkLabel(filters_frame, text="Cat√©gorie:").grid(row=0, column=1, padx=(10, 2), pady=5)
        categories = ["Toutes", "Sp√©cifications", "Tests", "Livrables", "Documentation", "Images", "Code", "Rapports", "General"]
        self.doc_category_filter = ctk.CTkOptionMenu(filters_frame, values=categories,
                                                    command=self.apply_document_filters, width=120)
        self.doc_category_filter.grid(row=0, column=2, padx=2, pady=5)
        
        # Filtre par noeud
        ctk.CTkLabel(filters_frame, text="N≈ìud:").grid(row=0, column=3, padx=(10, 2), pady=5)
        nodes = ["Tous"]
        if hasattr(self, 'tree_nodes') and self.tree_nodes:
            nodes.extend([node.text for node in self.tree_nodes])
        self.doc_node_filter = ctk.CTkOptionMenu(filters_frame, values=nodes,
                                                command=self.apply_document_filters, width=120)
        self.doc_node_filter.grid(row=0, column=4, padx=2, pady=5)
        
        # S√©lecteur de vue
        view_frame = ctk.CTkFrame(filters_frame)
        view_frame.grid(row=0, column=5, padx=10, pady=5)
        
        ctk.CTkButton(view_frame, text="‚äû", width=30, height=25,
                    command=lambda: self.change_document_view("grid")).pack(side="left", padx=1)
        ctk.CTkButton(view_frame, text="‚ò∞", width=30, height=25,
                    command=lambda: self.change_document_view("list")).pack(side="left", padx=1)
        
        # Statistiques
        stats_frame = ctk.CTkFrame(toolbar_frame)
        stats_frame.grid(row=0, column=2, padx=10, pady=5)
        
        self.doc_stats_label = ctk.CTkLabel(stats_frame, text="Chargement...")
        self.doc_stats_label.pack(padx=10, pady=5)
        
        # ‚úÖ Frame principal avec zone de documents en taille Large fixe
        main_doc_frame = ctk.CTkFrame(self.content_frame)
        main_doc_frame.grid(row=1, column=0, padx=5, pady=2, sticky="nsew")
        main_doc_frame.grid_columnconfigure(0, weight=1)
        main_doc_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas pour la zone de documents avec taille Large fixe
        doc_canvas_frame = ctk.CTkFrame(main_doc_frame)
        doc_canvas_frame.grid(row=0, column=0, sticky="nsew", padx=0, pady=0)
        doc_canvas_frame.grid_columnconfigure(0, weight=1)
        doc_canvas_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas principal des documents avec taille Large (1600x800)
        self.doc_canvas = tk.Canvas(doc_canvas_frame, bg='#f0f0f0', 
                                width=self.doc_area_width, 
                                height=self.doc_area_height,
                                highlightthickness=0)  # ‚úÖ Retirer la bordure
        self.doc_canvas.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbars pour la zone de documents
        doc_v_scrollbar = ttk.Scrollbar(doc_canvas_frame, orient="vertical", command=self.doc_canvas.yview)
        doc_h_scrollbar = ttk.Scrollbar(doc_canvas_frame, orient="horizontal", command=self.doc_canvas.xview)
        self.doc_canvas.configure(yscrollcommand=doc_v_scrollbar.set, xscrollcommand=doc_h_scrollbar.set)
        
        doc_v_scrollbar.grid(row=0, column=1, sticky="ns")
        doc_h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        # ‚úÖ Configuration de la zone de scroll - taille exacte
        self.doc_canvas.configure(scrollregion=(0, 0, self.doc_area_width, self.doc_area_height))
        
        # ‚úÖ Frame pour le contenu des documents √† l'int√©rieur du canvas
        self.doc_content_frame = ctk.CTkFrame(self.doc_canvas)
        self.doc_canvas_window = self.doc_canvas.create_window(0, 0, anchor="nw", window=self.doc_content_frame)
        self.doc_content_frame.grid_columnconfigure(0, weight=1)
        
        # ‚úÖ Configuration du contenu pour occuper exactement la taille du canvas
        self.doc_content_frame.configure(width=self.doc_area_width, height=self.doc_area_height)
        
        # Bind pour ajuster la taille du frame interne
        self.doc_content_frame.bind('<Configure>', self.on_doc_frame_configure)
        self.doc_canvas.bind('<Configure>', self.on_doc_canvas_configure)
        
        # Afficher les documents
        self.refresh_document_view()
        
        self.update_status("Module de gestion documentaire affich√© en taille Large (1600x800)")

    def on_doc_frame_configure(self, event):
        """G√©rer le redimensionnement du frame de contenu des documents"""
        # ‚úÖ CORRECTION : Mettre √† jour la scrollregion pour la taille exacte du contenu
        canvas_width = self.doc_canvas.winfo_width()
        canvas_height = self.doc_canvas.winfo_height()
        
        # Ajuster la taille de la scrollregion au contenu r√©el
        bbox = self.doc_canvas.bbox("all")
        if bbox:
            self.doc_canvas.configure(scrollregion=bbox)
        else:
            # Si pas de contenu, utiliser la taille exacte du canvas
            self.doc_canvas.configure(scrollregion=(0, 0, canvas_width, canvas_height))

    def on_doc_canvas_configure(self, event):
        """G√©rer le redimensionnement du canvas des documents"""
        # ‚úÖ CORRECTION : Ajuster la largeur du frame interne exactement au canvas
        canvas_width = event.width
        canvas_height = event.height
        
        # Configurer la fen√™tre du canvas pour occuper exactement l'espace
        self.doc_canvas.itemconfig(self.doc_canvas_window, width=canvas_width, height=canvas_height)
        
        # Mettre √† jour la taille du frame de contenu
        self.doc_content_frame.configure(width=canvas_width, height=canvas_height)

    def refresh_document_view(self):
        """Rafra√Æchir l'affichage des documents - MODIFI√â pour utiliser le canvas"""
        print(f"üîÑ Rafra√Æchissement de l'affichage des documents...")
        print(f"   - Nombre de documents: {len(self.documents)}")
        print(f"   - Mode de vue: {self.doc_view_mode}")
        print(f"   - Taille zone: {self.doc_area_width}x{self.doc_area_height}")
        
        # Nettoyer le contenu actuel
        for widget in self.doc_content_frame.winfo_children():
            widget.destroy()
            
        # Filtrer les documents
        filtered_docs = self.get_filtered_documents()
        
        if not filtered_docs:
            no_docs_label = ctk.CTkLabel(self.doc_content_frame, 
                                        text="Aucun document trouv√© avec les filtres actuels",
                                        font=ctk.CTkFont(size=14))
            no_docs_label.pack(pady=50)
        else:
            if self.doc_view_mode == "grid":
                self.show_documents_grid_enhanced(filtered_docs)
            else:
                self.show_documents_list_enhanced(filtered_docs)
                
        self.update_document_stats(filtered_docs)
        print(f"‚úÖ Rafra√Æchissement termin√©")

    def show_documents_grid_enhanced(self, documents):
        """Afficher les documents en vue grille - MODIFI√â pour utiliser l'espace Large"""
        # Container pour la grille
        grid_frame = ctk.CTkFrame(self.doc_content_frame)
        grid_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Calculer le nombre de colonnes selon la largeur disponible
        card_width = 280
        available_width = self.doc_area_width - 40  # 40px pour les marges
        columns = max(1, available_width // (card_width + 10))  # 10px pour l'espacement
        
        # Configurer la grille dynamiquement
        for i in range(columns):
            grid_frame.grid_columnconfigure(i, weight=1)
        
        # Afficher les documents
        for i, doc in enumerate(documents):
            row = i // columns
            col = i % columns
            self.create_document_card_enhanced(grid_frame, doc, row, col, card_width)

    def create_document_card_enhanced(self, parent, doc, row, col, card_width):
        """Cr√©er une carte de document am√©lior√©e pour la vue grille"""
        card = ctk.CTkFrame(parent, width=card_width, height=280)
        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
        card.grid_propagate(False)
        
        # Ic√¥ne du type de fichier (plus grande)
        icon_label = ctk.CTkLabel(card, text=doc.get_file_type_icon(), 
                                font=ctk.CTkFont(size=36))
        icon_label.pack(pady=(15, 8))
        
        # Nom du document (avec wrapping am√©lior√©)
        name_label = ctk.CTkLabel(card, text=doc.filename, 
                                font=ctk.CTkFont(size=12, weight="bold"),
                                wraplength=card_width - 20)
        name_label.pack(padx=10, pady=(0, 5))
        
        # Cat√©gorie et version
        cat_version_text = f"{doc.get_category_icon()} {doc.category} ‚Ä¢ v{doc.version}"
        cat_label = ctk.CTkLabel(card, text=cat_version_text, 
                                font=ctk.CTkFont(size=10))
        cat_label.pack(pady=2)
        
        # Taille et date
        size_date_text = f"{doc.format_file_size()} ‚Ä¢ {doc.upload_date.strftime('%d/%m/%Y')}"
        size_label = ctk.CTkLabel(card, text=size_date_text, 
                                font=ctk.CTkFont(size=9))
        size_label.pack(pady=2)
        
        # Noeud li√©
        if doc.linked_node:
            node_label = ctk.CTkLabel(card, text=f"üå≥ {doc.linked_node.text}", 
                                    text_color="#2196F3", font=ctk.CTkFont(size=9))
            node_label.pack(pady=2)
            
        # Description courte si disponible
        if doc.description:
            desc_short = doc.description[:60] + "..." if len(doc.description) > 60 else doc.description
            desc_label = ctk.CTkLabel(card, text=desc_short, 
                                    font=ctk.CTkFont(size=9),
                                    wraplength=card_width - 20, height=30)
            desc_label.pack(padx=5, pady=3)
        
        # Tags si disponibles
        if doc.tags:
            tags_text = " ".join([f"#{tag}" for tag in doc.tags[:2]])  # Max 2 tags
            tags_label = ctk.CTkLabel(card, text=tags_text, 
                                    text_color="#4CAF50", font=ctk.CTkFont(size=8))
            tags_label.pack(pady=2)
        
        # Boutons d'action (plus compacts)
        buttons_frame = ctk.CTkFrame(card)
        buttons_frame.pack(side="bottom", fill="x", padx=8, pady=8)
        
        ctk.CTkButton(buttons_frame, text="üëÅÔ∏è", width=35, height=25,
                    command=lambda: self.view_document(doc)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="‚úèÔ∏è", width=35, height=25,
                    command=lambda: self.edit_document(doc)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="üìÅ", width=35, height=25,
                    command=lambda: self.open_document_folder(doc)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="üóëÔ∏è", width=35, height=25,
                    command=lambda: self.delete_document(doc)).pack(side="right", padx=1)

    def show_documents_list_enhanced(self, documents):
        """Afficher les documents en vue liste - MODIFI√â pour utiliser l'espace Large"""
        # En-t√™tes avec largeur adapt√©e √† la zone Large
        headers_frame = ctk.CTkFrame(self.doc_content_frame)
        headers_frame.pack(fill="x", padx=10, pady=5)
        
        # ‚úÖ Configuration des colonnes pour la largeur Large
        headers_frame.grid_columnconfigure(0, weight=2, minsize=250)  # Document
        headers_frame.grid_columnconfigure(1, weight=1, minsize=120)  # Cat√©gorie
        headers_frame.grid_columnconfigure(2, weight=1, minsize=80)   # Version
        headers_frame.grid_columnconfigure(3, weight=1, minsize=100)  # Taille
        headers_frame.grid_columnconfigure(4, weight=1, minsize=100)  # Date
        headers_frame.grid_columnconfigure(5, weight=1, minsize=150)  # Noeud
        headers_frame.grid_columnconfigure(6, weight=1, minsize=200)  # Description
        headers_frame.grid_columnconfigure(7, weight=1, minsize=120)  # Actions
        
        headers = ["Document", "Cat√©gorie", "Version", "Taille", "Date", "N≈ìud", "Description", "Actions"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(headers_frame, text=header, 
                            font=ctk.CTkFont(size=12, weight="bold"))
            # ‚úÖ CORRECTION : Alignement coh√©rent des en-t√™tes
            if i == 0:  # Document √† gauche
                label.grid(row=0, column=i, padx=5, pady=10, sticky="w")
            else:  # Autres colonnes centr√©es
                label.grid(row=0, column=i, padx=5, pady=10, sticky="ew")
        
        # ‚úÖ Ligne de s√©paration sous les en-t√™tes
        separator = ctk.CTkFrame(self.doc_content_frame, height=2)
        separator.pack(fill="x", padx=10, pady=(0, 5))
        
        # Zone scrollable pour les lignes de documents
        table_scroll = ctk.CTkScrollableFrame(self.doc_content_frame, 
                                            height=max(500, self.doc_area_height - 150))
        table_scroll.pack(fill="x", padx=10, pady=5)
        table_scroll.grid_columnconfigure(0, weight=1)
            
        # Documents
        for i, doc in enumerate(documents):
            self.create_document_row_enhanced(table_scroll, doc, i)

    def create_document_row_enhanced(self, parent, doc, row_index):
        """Cr√©er une ligne de document am√©lior√©e pour la vue liste"""
        row_frame = ctk.CTkFrame(parent)
        row_frame.pack(fill="x", padx=5, pady=2)
        
        # ‚úÖ Configuration des colonnes identique aux en-t√™tes
        row_frame.grid_columnconfigure(0, weight=2, minsize=250)  # Document
        row_frame.grid_columnconfigure(1, weight=1, minsize=120)  # Cat√©gorie
        row_frame.grid_columnconfigure(2, weight=1, minsize=80)   # Version
        row_frame.grid_columnconfigure(3, weight=1, minsize=100)  # Taille
        row_frame.grid_columnconfigure(4, weight=1, minsize=100)  # Date
        row_frame.grid_columnconfigure(5, weight=1, minsize=150)  # Noeud
        row_frame.grid_columnconfigure(6, weight=1, minsize=200)  # Description
        row_frame.grid_columnconfigure(7, weight=1, minsize=120)  # Actions
        
        # Document avec ic√¥ne
        name_text = f"{doc.get_file_type_icon()} {doc.filename}"
        name_label = ctk.CTkLabel(row_frame, text=name_text, anchor="w")
        name_label.grid(row=0, column=0, padx=5, pady=5, sticky="ew")
        
        # Cat√©gorie avec ic√¥ne
        cat_text = f"{doc.get_category_icon()} {doc.category}"
        cat_label = ctk.CTkLabel(row_frame, text=cat_text)
        cat_label.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        # Version
        version_label = ctk.CTkLabel(row_frame, text=f"v{doc.version}")
        version_label.grid(row=0, column=2, padx=5, pady=5, sticky="ew")
        
        # Taille
        size_label = ctk.CTkLabel(row_frame, text=doc.format_file_size())
        size_label.grid(row=0, column=3, padx=5, pady=5, sticky="ew")
        
        # Date
        date_label = ctk.CTkLabel(row_frame, text=doc.upload_date.strftime('%d/%m/%Y'))
        date_label.grid(row=0, column=4, padx=5, pady=5, sticky="ew")
        
        # Noeud li√©
        node_text = doc.linked_node.text if doc.linked_node else "-"
        node_label = ctk.CTkLabel(row_frame, text=node_text)
        node_label.grid(row=0, column=5, padx=5, pady=5, sticky="ew")
        
        # Description (tronqu√©e)
        desc_text = doc.description[:50] + "..." if doc.description and len(doc.description) > 50 else (doc.description or "-")
        desc_label = ctk.CTkLabel(row_frame, text=desc_text, wraplength=180)
        desc_label.grid(row=0, column=6, padx=5, pady=5, sticky="ew")
        
        # Actions
        actions_frame = ctk.CTkFrame(row_frame)
        actions_frame.grid(row=0, column=7, padx=5, pady=5, sticky="ew")
        
        # ‚úÖ Configuration pour centrer les boutons
        actions_frame.grid_columnconfigure(0, weight=1)
        actions_frame.grid_columnconfigure(1, weight=1)
        actions_frame.grid_columnconfigure(2, weight=1)
        actions_frame.grid_columnconfigure(3, weight=1)
        
        ctk.CTkButton(actions_frame, text="üëÅÔ∏è", width=25, height=25,
                    command=lambda: self.view_document(doc)).grid(row=0, column=0, padx=1)
        ctk.CTkButton(actions_frame, text="‚úèÔ∏è", width=25, height=25,
                    command=lambda: self.edit_document(doc)).grid(row=0, column=1, padx=1)
        ctk.CTkButton(actions_frame, text="üìÅ", width=25, height=25,
                    command=lambda: self.open_document_folder(doc)).grid(row=0, column=2, padx=1)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è", width=25, height=25,
                    command=lambda: self.delete_document(doc)).grid(row=0, column=3, padx=1)
        
    def add_document(self):
        """Ajouter un nouveau document"""
        # S√©lectionner le fichier
        file_path = filedialog.askopenfilename(
            title="S√©lectionner un document",
            filetypes=[
                ("Tous les fichiers", "*.*"),
                ("PDF", "*.pdf"),
                ("Documents Word", "*.doc;*.docx"),
                ("Excel", "*.xls;*.xlsx"),
                ("PowerPoint", "*.ppt;*.pptx"),
                ("Images", "*.jpg;*.jpeg;*.png;*.gif;*.bmp"),
                ("Texte", "*.txt;*.md"),
                ("Archives", "*.zip;*.rar;*.7z")
            ]
        )
        
        if not file_path:
            return
            
        # Cr√©er une fen√™tre de dialogue pour les m√©tadonn√©es
        dialog = ctk.CTkToplevel(self)
        dialog.title("Ajouter un Document")
        dialog.geometry("500x600")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations du fichier
        filename = os.path.basename(file_path)
        file_size = os.path.getsize(file_path)
        file_type = os.path.splitext(filename)[1].lower()
        
        # Afficher les infos du fichier
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text="üìÑ Informations du fichier", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        ctk.CTkLabel(info_frame, text=f"Nom: {filename}").pack(anchor='w', padx=10)
        ctk.CTkLabel(info_frame, text=f"Taille: {Document('', file_path).format_file_size()}").pack(anchor='w', padx=10)
        ctk.CTkLabel(info_frame, text=f"Type: {file_type}").pack(anchor='w', padx=10, pady=(0, 10))
        
        # Nom du document (modifiable)
        ctk.CTkLabel(main_frame, text="Nom du document:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        name_entry = ctk.CTkEntry(main_frame, width=400)
        name_entry.pack(fill='x', pady=(0, 10))
        name_entry.insert(0, os.path.splitext(filename)[0])
        
        # Cat√©gorie (auto-d√©tect√©e)
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        
        # Auto-d√©tection de la cat√©gorie
        auto_category = self.detect_document_category(filename, file_type)
        category_var = tk.StringVar(value=auto_category)
        
        categories = ["Sp√©cifications", "Tests", "Livrables", "Documentation", "Images", "Code", "Rapports", "General"]
        category_menu = ctk.CTkOptionMenu(main_frame, values=categories, variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Version
        ctk.CTkLabel(main_frame, text="Version:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        version_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Ex: 1.0, 2.1, v1.0")
        version_entry.pack(fill='x', pady=(0, 10))
        version_entry.insert(0, "1.0")
        
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        
        # Lien avec noeud de l'arbre
        ctk.CTkLabel(main_frame, text="Lier √† un n≈ìud:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        
        # R√©cup√©rer les noeuds disponibles
        node_options = ["Aucun"]
        if hasattr(self, 'tree_nodes') and self.tree_nodes:
            node_options.extend([node.text for node in self.tree_nodes])
        
        linked_node_var = tk.StringVar(value="Aucun")
        node_menu = ctk.CTkOptionMenu(main_frame, values=node_options, variable=linked_node_var)
        node_menu.pack(fill='x', pady=(0, 10))
        
        # Tags
        ctk.CTkLabel(main_frame, text="Tags (s√©par√©s par des virgules):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        tags_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="urgent, client, v2.0")
        tags_entry.pack(fill='x', pady=(0, 20))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_document():
            try:
                # Trouver le noeud li√©
                linked_node = None
                if linked_node_var.get() != "Aucun" and hasattr(self, 'tree_nodes'):
                    for node in self.tree_nodes:
                        if node.text == linked_node_var.get():
                            linked_node = node
                            break
                
                # Cr√©er le document
                doc = Document(
                    filename=name_entry.get().strip() or filename,
                    file_path=file_path,
                    category=category_var.get(),
                    version=version_entry.get().strip() or "1.0",
                    linked_node=linked_node,
                    description=desc_textbox.get("1.0", "end-1c")
                )
                
                # Traiter les tags
                tags_text = tags_entry.get().strip()
                if tags_text:
                    doc.tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
                
                # Copier le fichier dans le stockage de l'app
                stored_filename = f"{doc.id}_{filename}"
                stored_path = os.path.join(self.documents_storage_path, stored_filename)
                shutil.copy2(file_path, stored_path)
                doc.stored_path = stored_path
                
                # Ajouter √† la liste
                self.documents.append(doc)
                
                # Enregistrement automatique dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Document ajout√© : '{doc.filename}'",
                        description=f"Nouveau document ajout√©.\nCat√©gorie: {doc.category}\nVersion: {doc.version}\nTaille: {doc.format_file_size()}",
                        category="Document"
                    )
                
                result["saved"] = True
                dialog.destroy()
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'ajout du document :\n{str(e)}")
                
        def cancel():
            dialog.destroy()
            
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Ajouter", command=save_document).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_document_view()
            self.update_status("Document ajout√© avec succ√®s")
            
    def detect_document_category(self, filename, file_type):
        """D√©tecter automatiquement la cat√©gorie d'un document"""
        filename_lower = filename.lower()
        
        # Mots-cl√©s pour chaque cat√©gorie
        keywords = {
            "Sp√©cifications": ["spec", "specification", "cahier", "requirements", "req", "exigences"],
            "Tests": ["test", "unittest", "qa", "quality", "validation", "verify"],
            "Livrables": ["deliverable", "livrable", "release", "final", "production"],
            "Documentation": ["doc", "manuel", "guide", "readme", "help", "tutorial"],
            "Images": ["screenshot", "capture", "image", "photo", "mockup", "wireframe"],
            "Code": ["source", "code", "script", "program"],
            "Rapports": ["rapport", "report", "analyse", "summary", "r√©sultat"]
        }
        
        # V√©rifier par type de fichier d'abord
        if file_type in [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".svg"]:
            return "Images"
        elif file_type in [".py", ".js", ".html", ".css", ".java", ".cpp", ".c"]:
            return "Code"
        elif file_type in [".pdf"] and any(word in filename_lower for word in ["rapport", "report"]):
            return "Rapports"
        
        # V√©rifier par mots-cl√©s dans le nom
        for category, words in keywords.items():
            if any(word in filename_lower for word in words):
                return category
                
        return "General"
        
    def import_folder(self):
        """Importer tous les fichiers d'un dossier"""
        folder_path = filedialog.askdirectory(title="S√©lectionner un dossier √† importer")
        
        if not folder_path:
            return
        
        # ‚úÖ V√©rifier et cr√©er le dossier de stockage si n√©cessaire
        if not hasattr(self, 'documents_storage_path'):
            self.documents_storage_path = os.path.join(os.getcwd(), "documents_storage")
        if not os.path.exists(self.documents_storage_path):
            os.makedirs(self.documents_storage_path)


        # Compter les fichiers
        files_to_import = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                # Ignorer les fichiers syst√®me et cach√©s
                if not file.startswith('.') and os.path.isfile(file_path):
                    files_to_import.append(file_path)
        
        if not files_to_import:
            messagebox.showwarning("Avertissement", "Aucun fichier trouv√© dans le dossier s√©lectionn√©!")
            return
            
        # Demander confirmation
        if not messagebox.askyesno("Confirmation", 
                                f"Importer {len(files_to_import)} fichier(s) ?\n\n"
                                f"Les fichiers seront automatiquement cat√©goris√©s."):
            return
            
        # Cr√©er une barre de progression
        progress_dialog = ctk.CTkToplevel(self)
        progress_dialog.title("Import en cours...")
        progress_dialog.geometry("400x150")
        progress_dialog.transient(self)
        progress_dialog.grab_set()
        
        # Centrer la fen√™tre
        progress_dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 200,
            self.winfo_rooty() + 200
        ))
        
        progress_label = ctk.CTkLabel(progress_dialog, text="Import en cours...")
        progress_label.pack(pady=20)
        
        progress_bar = ctk.CTkProgressBar(progress_dialog, width=300)
        progress_bar.pack(pady=10)
        progress_bar.set(0)
        
        status_label = ctk.CTkLabel(progress_dialog, text="")
        status_label.pack(pady=10)
        
        # Importer les fichiers
        imported_count = 0
        total_files = len(files_to_import)
        
        def import_file(index):
            nonlocal imported_count
            
            if index >= total_files:
                # Import termin√©
                progress_dialog.destroy()
                messagebox.showinfo("Import termin√©", f"{imported_count} fichier(s) import√©(s) avec succ√®s!")
                self.refresh_document_view()
                return
                
            file_path = files_to_import[index]
            filename = os.path.basename(file_path)
            
            # Mettre √† jour l'interface
            progress = (index + 1) / total_files
            progress_bar.set(progress)
            status_label.configure(text=f"Import: {filename}")
            progress_dialog.update()
            
            try:
                # Cr√©er le document
                doc = Document(
                    filename=filename,
                    file_path=file_path,
                    category=self.detect_document_category(filename, os.path.splitext(filename)[1].lower()),
                    version="1.0",
                    description=f"Import√© automatiquement depuis {os.path.dirname(file_path)}"
                )
                
                # Copier le fichier
                stored_filename = f"{doc.id}_{filename}"
                stored_path = os.path.join(self.documents_storage_path, stored_filename)
                shutil.copy2(file_path, stored_path)
                doc.stored_path = stored_path
                
                # Ajouter √† la liste
                self.documents.append(doc)
                imported_count += 1
                
            except Exception as e:
                print(f"Erreur lors de l'import de {filename}: {str(e)}")
                
            # Programmer l'import du fichier suivant
            progress_dialog.after(50, lambda: import_file(index + 1))
            
        # Commencer l'import
        import_file(0)
        
    def change_document_view(self, view_mode):
        """Changer le mode de vue des documents"""
        self.doc_view_mode = view_mode
        self.refresh_document_view()
        
    def apply_document_filters(self, *args):
        """Appliquer les filtres et rafra√Æchir la vue"""
        self.refresh_document_view()
        
    def refresh_document_view(self):
        """Rafra√Æchir l'affichage des documents"""
        # Nettoyer le contenu actuel
        for widget in self.doc_content_frame.winfo_children():
            widget.destroy()
            
        # Filtrer les documents
        filtered_docs = self.get_filtered_documents()
        
        if not filtered_docs:
            no_docs_label = ctk.CTkLabel(self.doc_content_frame, 
                                        text="Aucun document trouv√© avec les filtres actuels",
                                        font=ctk.CTkFont(size=14))
            no_docs_label.pack(pady=50)
        else:
            if self.doc_view_mode == "grid":
                self.show_documents_grid(filtered_docs)
            else:
                self.show_documents_list(filtered_docs)
                
        self.update_document_stats(filtered_docs)
        
    def get_filtered_documents(self):
        """Obtenir les documents filtr√©s selon les crit√®res"""
        filtered = self.documents.copy()
        
        # Filtre par cat√©gorie
        if hasattr(self, 'doc_category_filter') and self.doc_category_filter.get() != "Toutes":
            filtered = [d for d in filtered if d.category == self.doc_category_filter.get()]
            
        # Filtre par noeud
        if hasattr(self, 'doc_node_filter') and self.doc_node_filter.get() != "Tous":
            filtered = [d for d in filtered if d.linked_node and d.linked_node.text == self.doc_node_filter.get()]
            
        return filtered
        
    def show_documents_grid(self, documents):
        """Afficher les documents en vue grille"""
        # Container pour la grille
        grid_frame = ctk.CTkFrame(self.doc_content_frame)
        grid_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Configurer la grille (4 colonnes)
        for i in range(4):
            grid_frame.grid_columnconfigure(i, weight=1)
        
        # Afficher les documents
        for i, doc in enumerate(documents):
            row = i // 4
            col = i % 4
            self.create_document_card(grid_frame, doc, row, col)
            
    def create_document_card(self, parent, doc, row, col):
        """Cr√©er une carte de document pour la vue grille"""
        card = ctk.CTkFrame(parent, width=200, height=250)
        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
        card.grid_propagate(False)
        
        # Ic√¥ne du type de fichier
        icon_label = ctk.CTkLabel(card, text=doc.get_file_type_icon(), 
                                font=ctk.CTkFont(size=32))
        icon_label.pack(pady=(15, 5))
        
        # Nom du document
        name_label = ctk.CTkLabel(card, text=doc.filename, 
                                font=ctk.CTkFont(size=12, weight="bold"),
                                wraplength=180)
        name_label.pack(padx=10, pady=5)
        
        # Cat√©gorie et version
        cat_version_text = f"{doc.get_category_icon()} {doc.category} ‚Ä¢ v{doc.version}"
        cat_label = ctk.CTkLabel(card, text=cat_version_text, 
                                font=ctk.CTkFont(size=10))
        cat_label.pack(pady=2)
        
        # Taille et date
        size_date_text = f"{doc.format_file_size()} ‚Ä¢ {doc.upload_date.strftime('%d/%m/%Y')}"
        size_label = ctk.CTkLabel(card, text=size_date_text, 
                                font=ctk.CTkFont(size=9))
        size_label.pack(pady=2)
        
        # Noeud li√©
        if doc.linked_node:
            node_label = ctk.CTkLabel(card, text=f"üå≥ {doc.linked_node.text}", 
                                    text_color="#2196F3", font=ctk.CTkFont(size=9))
            node_label.pack(pady=2)
            
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(card)
        buttons_frame.pack(side="bottom", fill="x", padx=10, pady=10)
        
        ctk.CTkButton(buttons_frame, text="üëÅÔ∏è", width=30, height=25,
                    command=lambda: self.view_document(doc)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="‚úèÔ∏è", width=30, height=25,
                    command=lambda: self.edit_document(doc)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="üìÅ", width=30, height=25,
                    command=lambda: self.open_document_folder(doc)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="üóëÔ∏è", width=30, height=25,
                    command=lambda: self.delete_document(doc)).pack(side="right", padx=1)
                    
    def show_documents_list(self, documents):
        """Afficher les documents en vue liste"""
        # En-t√™tes
        headers_frame = ctk.CTkFrame(self.doc_content_frame)
        headers_frame.pack(fill="x", padx=10, pady=5)
        headers_frame.grid_columnconfigure(0, weight=2)  # Nom
        headers_frame.grid_columnconfigure(1, weight=1)  # Cat√©gorie
        headers_frame.grid_columnconfigure(2, weight=1)  # Version
        headers_frame.grid_columnconfigure(3, weight=1)  # Taille
        headers_frame.grid_columnconfigure(4, weight=1)  # Date
        headers_frame.grid_columnconfigure(5, weight=1)  # Noeud
        headers_frame.grid_columnconfigure(6, weight=1)  # Actions
        
        headers = ["Document", "Cat√©gorie", "Version", "Taille", "Date", "N≈ìud", "Actions"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(headers_frame, text=header, 
                            font=ctk.CTkFont(size=12, weight="bold"))
            label.grid(row=0, column=i, padx=5, pady=10, sticky="w")
            
        # Documents
        for i, doc in enumerate(documents):
            self.create_document_row(i + 1, doc)
            
    def create_document_row(self, row, doc):
        """Cr√©er une ligne de document pour la vue liste"""
        row_frame = ctk.CTkFrame(self.doc_content_frame)
        row_frame.pack(fill="x", padx=10, pady=2)
        row_frame.grid_columnconfigure(0, weight=2)
        row_frame.grid_columnconfigure(1, weight=1)
        row_frame.grid_columnconfigure(2, weight=1)
        row_frame.grid_columnconfigure(3, weight=1)
        row_frame.grid_columnconfigure(4, weight=1)
        row_frame.grid_columnconfigure(5, weight=1)
        row_frame.grid_columnconfigure(6, weight=1)
        
        # Nom avec ic√¥ne
        name_text = f"{doc.get_file_type_icon()} {doc.filename}"
        name_label = ctk.CTkLabel(row_frame, text=name_text, anchor="w")
        name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        # Cat√©gorie avec ic√¥ne
        cat_text = f"{doc.get_category_icon()} {doc.category}"
        cat_label = ctk.CTkLabel(row_frame, text=cat_text)
        cat_label.grid(row=0, column=1, padx=5, pady=5)
        
        # Version
        version_label = ctk.CTkLabel(row_frame, text=f"v{doc.version}")
        version_label.grid(row=0, column=2, padx=5, pady=5)
        
        # Taille
        size_label = ctk.CTkLabel(row_frame, text=doc.format_file_size())
        size_label.grid(row=0, column=3, padx=5, pady=5)
        
        # Date
        date_label = ctk.CTkLabel(row_frame, text=doc.upload_date.strftime('%d/%m/%Y'))
        date_label.grid(row=0, column=4, padx=5, pady=5)
        
        # Noeud li√©
        node_text = doc.linked_node.text if doc.linked_node else "-"
        node_label = ctk.CTkLabel(row_frame, text=node_text)
        node_label.grid(row=0, column=5, padx=5, pady=5)
        
        # Actions
        actions_frame = ctk.CTkFrame(row_frame)
        actions_frame.grid(row=0, column=6, padx=5, pady=5)
        
        ctk.CTkButton(actions_frame, text="üëÅÔ∏è", width=25, height=25,
                    command=lambda: self.view_document(doc)).pack(side="left", padx=1)
        ctk.CTkButton(actions_frame, text="‚úèÔ∏è", width=25, height=25,
                    command=lambda: self.edit_document(doc)).pack(side="left", padx=1)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è", width=25, height=25,
                    command=lambda: self.delete_document(doc)).pack(side="left", padx=1)
                    
    def view_document(self, doc):
        """Visualiser un document"""
        if not os.path.exists(doc.stored_path):
            messagebox.showerror("Erreur", "Le fichier n'existe plus sur le disque!")
            return
            
        # Ouvrir avec l'application par d√©faut du syst√®me
        try:
            if sys.platform.startswith('win'):
                os.startfile(doc.stored_path)
            elif sys.platform.startswith('darwin'):  # macOS
                os.system(f'open "{doc.stored_path}"')
            else:  # Linux
                os.system(f'xdg-open "{doc.stored_path}"')
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d'ouvrir le document :\n{str(e)}")
            
    def edit_document(self, doc):
        """√âditer les m√©tadonn√©es d'un document"""
        # Cr√©er une fen√™tre de dialogue
        dialog = ctk.CTkToplevel(self)
        dialog.title("√âditer le Document")
        dialog.geometry("500x600")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations du fichier (non modifiables)
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text="üìÑ Informations du fichier", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        ctk.CTkLabel(info_frame, text=f"Fichier: {os.path.basename(doc.stored_path)}").pack(anchor='w', padx=10)
        ctk.CTkLabel(info_frame, text=f"Taille: {doc.format_file_size()}").pack(anchor='w', padx=10)
        ctk.CTkLabel(info_frame, text=f"Type: {doc.file_type}").pack(anchor='w', padx=10)
        ctk.CTkLabel(info_frame, text=f"Ajout√©: {doc.upload_date.strftime('%d/%m/%Y √† %H:%M')}").pack(anchor='w', padx=10, pady=(0, 10))
        
        # Nom du document
        ctk.CTkLabel(main_frame, text="Nom du document:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        name_entry = ctk.CTkEntry(main_frame, width=400)
        name_entry.pack(fill='x', pady=(0, 10))
        name_entry.insert(0, doc.filename)
        
        # Cat√©gorie
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        category_var = tk.StringVar(value=doc.category)
        categories = ["Sp√©cifications", "Tests", "Livrables", "Documentation", "Images", "Code", "Rapports", "General"]
        category_menu = ctk.CTkOptionMenu(main_frame, values=categories, variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Version
        ctk.CTkLabel(main_frame, text="Version:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        version_entry = ctk.CTkEntry(main_frame, width=400)
        version_entry.pack(fill='x', pady=(0, 10))
        version_entry.insert(0, doc.version)
        
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        desc_textbox.insert("1.0", doc.description)
        
        # Lien avec noeud de l'arbre
        ctk.CTkLabel(main_frame, text="Lier √† un n≈ìud:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        
        node_options = ["Aucun"]
        if hasattr(self, 'tree_nodes') and self.tree_nodes:
            node_options.extend([node.text for node in self.tree_nodes])
        
        linked_node_var = tk.StringVar(value=doc.linked_node.text if doc.linked_node else "Aucun")
        node_menu = ctk.CTkOptionMenu(main_frame, values=node_options, variable=linked_node_var)
        node_menu.pack(fill='x', pady=(0, 10))
        
        # Tags
        ctk.CTkLabel(main_frame, text="Tags (s√©par√©s par des virgules):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        tags_entry = ctk.CTkEntry(main_frame, width=400)
        tags_entry.pack(fill='x', pady=(0, 20))
        if doc.tags:
            tags_entry.insert(0, ", ".join(doc.tags))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_changes():
            try:
                # Trouver le noeud li√©
                linked_node = None
                if linked_node_var.get() != "Aucun" and hasattr(self, 'tree_nodes'):
                    for node in self.tree_nodes:
                        if node.text == linked_node_var.get():
                            linked_node = node
                            break
                
                # Mettre √† jour le document
                doc.filename = name_entry.get().strip()
                doc.category = category_var.get()
                doc.version = version_entry.get().strip()
                doc.description = desc_textbox.get("1.0", "end-1c")
                doc.linked_node = linked_node
                
                # Traiter les tags
                tags_text = tags_entry.get().strip()
                if tags_text:
                    doc.tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
                else:
                    doc.tags = []
                
                # Enregistrement automatique dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Document modifi√© : '{doc.filename}'",
                        description=f"M√©tadonn√©es du document mises √† jour.",
                        category="Document"
                    )
                
                result["saved"] = True
                dialog.destroy()
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la modification :\n{str(e)}")
                
        def cancel():
            dialog.destroy()
            
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Sauvegarder", command=save_changes).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_document_view()
            self.update_status("Document modifi√©")
            
    def delete_document(self, doc):
        """Supprimer un document"""
        if messagebox.askyesno("Confirmation", 
                            f"Supprimer le document '{doc.filename}' ?\n\n"
                            f"Le fichier sera supprim√© d√©finitivement."):
            try:
                # Supprimer le fichier physique
                if os.path.exists(doc.stored_path):
                    os.remove(doc.stored_path)
                    
                # Supprimer de la liste
                self.documents.remove(doc)
                
                # Enregistrement automatique dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Document supprim√© : '{doc.filename}'",
                        description=f"Document supprim√© d√©finitivement.",
                        category="Document"
                    )
                
                self.refresh_document_view()
                self.update_status("Document supprim√©")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la suppression :\n{str(e)}")
                
    def open_document_folder(self, doc):
        """Ouvrir le dossier contenant le document"""
        try:
            folder_path = os.path.dirname(doc.stored_path)
            if sys.platform.startswith('win'):
                os.startfile(folder_path)
            elif sys.platform.startswith('darwin'):  # macOS
                os.system(f'open "{folder_path}"')
            else:  # Linux
                os.system(f'xdg-open "{folder_path}"')
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d'ouvrir le dossier :\n{str(e)}")
            
    def update_document_stats(self, filtered_docs):
        """Mettre √† jour les statistiques des documents"""
        total = len(self.documents)
        filtered_count = len(filtered_docs)
        
        # Calcul de la taille totale
        total_size = sum(doc.file_size for doc in filtered_docs)
        if total_size < 1024*1024:
            size_text = f"{total_size/1024:.1f} KB"
        else:
            size_text = f"{total_size/(1024*1024):.1f} MB"
        
        # Compter par cat√©gorie
        categories = {}
        for doc in filtered_docs:
            categories[doc.category] = categories.get(doc.category, 0) + 1
        
        stats_text = f"Total: {total} | Affich√©s: {filtered_count} | Taille: {size_text}"
        
        if hasattr(self, 'doc_stats_label'):
            self.doc_stats_label.configure(text=stats_text)
            
    def generate_document_report(self):
        """G√©n√©rer un rapport des documents"""
        if not self.documents:
            messagebox.showwarning("Avertissement", "Aucun document √† inclure dans le rapport!")
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".md",
            filetypes=[("Markdown files", "*.md"), ("Text files", "*.txt")],
            title="Sauvegarder le rapport des documents"
        )
        
        if filename:
            try:
                # Trier les documents par cat√©gorie
                docs_by_category = {}
                for doc in self.documents:
                    if doc.category not in docs_by_category:
                        docs_by_category[doc.category] = []
                    docs_by_category[doc.category].append(doc)
                
                content = f"""# üìÅ Rapport de Gestion Documentaire

    *G√©n√©r√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
    *Nombre total de documents : {len(self.documents)}*

    ## üìä Statistiques G√©n√©rales

    """
                
                # Statistiques par cat√©gorie
                for category, docs in docs_by_category.items():
                    total_size = sum(doc.file_size for doc in docs)
                    size_text = f"{total_size/(1024*1024):.1f} MB" if total_size > 1024*1024 else f"{total_size/1024:.1f} KB"
                    content += f"- **{category}** : {len(docs)} document(s) - {size_text}\n"
                
                content += "\n---\n\n"
                
                # D√©tail par cat√©gorie
                for category, docs in sorted(docs_by_category.items()):
                    icon = docs[0].get_category_icon() if docs else "üìÑ"
                    content += f"## {icon} {category}\n\n"
                    
                    for doc in sorted(docs, key=lambda x: x.filename):
                        linked_text = f" (üå≥ {doc.linked_node.text})" if doc.linked_node else ""
                        tags_text = f" [Tags: {', '.join(doc.tags)}]" if doc.tags else ""
                        
                        content += f"""### {doc.get_file_type_icon()} {doc.filename}

    - **Version :** {doc.version}
    - **Taille :** {doc.format_file_size()}
    - **Date d'ajout :** {doc.upload_date.strftime('%d/%m/%Y √† %H:%M')}
    - **Description :** {doc.description or "Aucune description"}
    - **N≈ìud li√© :** {doc.linked_node.text if doc.linked_node else "Aucun"}{tags_text}

    """
                
                content += f"""
    ---

    *Rapport g√©n√©r√© automatiquement par l'application de gestion de projet*
    *Chemin de stockage : {self.documents_storage_path}*
    """
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                    
                messagebox.showinfo("Rapport g√©n√©r√©", f"Rapport sauvegard√© avec succ√®s :\n{filename}")
                self.update_status("Rapport des documents g√©n√©r√©")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration du rapport :\n{str(e)}")
                        
    def show_block_library(self):
        """Afficher le module de biblioth√®que de blocs r√©utilisables"""
        self.clear_content()
        self.main_title.configure(text="üì¶ Biblioth√®que de Blocs R√©utilisables")
        
        # ‚úÖ CORRECTION : Configuration de l'expansion compl√®te
        self.content_frame.grid_rowconfigure(1, weight=1)  # Ligne principale des blocs
        self.content_frame.grid_columnconfigure(0, weight=1)
        
        # Initialiser les variables si n√©cessaire
        if not hasattr(self, 'project_blocks'):
            self.project_blocks = []
        if not hasattr(self, 'block_view_mode'):
            self.block_view_mode = "grid"  # "grid" ou "list"
        if not hasattr(self, 'block_filter_category'):
            self.block_filter_category = "Toutes"
        if not hasattr(self, 'block_filter_domain'):
            self.block_filter_domain = "Tous"
        if not hasattr(self, 'blocks_storage_path'):
            self.blocks_storage_path = os.path.join(os.getcwd(), "project_blocks")
            if not os.path.exists(self.blocks_storage_path):
                os.makedirs(self.blocks_storage_path)
        
        # ‚úÖ NOUVEAU : Taille fixe en mode Large
        self.block_area_width = 1600   # Taille Large fixe
        self.block_area_height = 800   # Taille Large fixe
        
        # Charger les blocs sauvegard√©s
        self.load_project_blocks()
        
        # Toolbar avec contr√¥les
        toolbar_frame = ctk.CTkFrame(self.content_frame)
        toolbar_frame.grid(row=0, column=0, padx=5, pady=2, sticky="ew")
        toolbar_frame.grid_columnconfigure(1, weight=1)
        
        # Section boutons d'action
        actions_frame = ctk.CTkFrame(toolbar_frame)
        actions_frame.grid(row=0, column=0, padx=5, pady=5)
        
        ctk.CTkButton(actions_frame, text="‚ûï Nouveau Bloc", 
                    command=self.create_new_block).grid(row=0, column=0, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üíæ Cr√©er depuis Arbre", 
                    command=self.create_block_from_tree).grid(row=0, column=1, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üì§ Exporter Blocs", 
                    command=self.export_blocks).grid(row=0, column=2, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üì• Importer Blocs", 
                    command=self.import_blocks).grid(row=0, column=3, padx=5, pady=5)
        ctk.CTkButton(actions_frame, text="üìä Rapport d'Usage", 
                    command=self.generate_usage_report).grid(row=0, column=4, padx=5, pady=5)
        
        # Section filtres et vues
        filters_frame = ctk.CTkFrame(toolbar_frame)
        filters_frame.grid(row=0, column=1, padx=20, pady=5, sticky="ew")
        filters_frame.grid_columnconfigure(4, weight=1)
        
        ctk.CTkLabel(filters_frame, text="Filtres:").grid(row=0, column=0, padx=5, pady=5)
        
        # Filtre par cat√©gorie
        ctk.CTkLabel(filters_frame, text="Cat√©gorie:").grid(row=0, column=1, padx=(10, 2), pady=5)
        categories = ["Toutes", "Process", "Testing", "CI/CD", "Hardware", "Software", "Integration", "Validation", "Documentation", "Planning", "Quality", "Security", "General"]
        self.block_category_filter = ctk.CTkOptionMenu(filters_frame, values=categories,
                                                    command=self.apply_block_filters, width=120)
        self.block_category_filter.grid(row=0, column=2, padx=2, pady=5)
        
        # Filtre par domaine
        ctk.CTkLabel(filters_frame, text="Domaine:").grid(row=0, column=3, padx=(10, 2), pady=5)
        domains = ["Tous", "Embedded", "Web", "Mobile", "IoT", "Desktop", "Cloud", "AI/ML", "Data"]
        self.block_domain_filter = ctk.CTkOptionMenu(filters_frame, values=domains,
                                                    command=self.apply_block_filters, width=120)
        self.block_domain_filter.grid(row=0, column=4, padx=2, pady=5)
        
        # Tri
        ctk.CTkLabel(filters_frame, text="Tri:").grid(row=0, column=5, padx=(10, 2), pady=5)
        sort_options = ["Nom", "Date cr√©ation", "Usage", "Succ√®s", "Derni√®re utilisation"]
        self.block_sort_filter = ctk.CTkOptionMenu(filters_frame, values=sort_options,
                                                command=self.apply_block_filters, width=140)
        self.block_sort_filter.grid(row=0, column=6, padx=2, pady=5)
        
        # S√©lecteur de vue
        view_frame = ctk.CTkFrame(filters_frame)
        view_frame.grid(row=0, column=7, padx=10, pady=5)
        
        ctk.CTkButton(view_frame, text="‚äû", width=30, height=25,
                    command=lambda: self.change_block_view("grid")).pack(side="left", padx=1)
        ctk.CTkButton(view_frame, text="‚ò∞", width=30, height=25,
                    command=lambda: self.change_block_view("list")).pack(side="left", padx=1)
        
        # Statistiques
        stats_frame = ctk.CTkFrame(toolbar_frame)
        stats_frame.grid(row=0, column=2, padx=10, pady=5)
        
        self.block_stats_label = ctk.CTkLabel(stats_frame, text="Chargement...")
        self.block_stats_label.pack(padx=10, pady=5)
        
        # ‚úÖ Frame principal avec zone de blocs en taille Large fixe
        main_block_frame = ctk.CTkFrame(self.content_frame)
        main_block_frame.grid(row=1, column=0, padx=5, pady=2, sticky="nsew")
        main_block_frame.grid_columnconfigure(0, weight=1)
        main_block_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas pour la zone de blocs avec taille Large fixe
        block_canvas_frame = ctk.CTkFrame(main_block_frame)
        block_canvas_frame.grid(row=0, column=0, sticky="nsew", padx=0, pady=0)
        block_canvas_frame.grid_columnconfigure(0, weight=1)
        block_canvas_frame.grid_rowconfigure(0, weight=1)
        
        # ‚úÖ Canvas principal des blocs avec taille Large (1600x800)
        self.block_canvas = tk.Canvas(block_canvas_frame, bg='#f0f0f0', 
                                    width=self.block_area_width, 
                                    height=self.block_area_height,
                                    highlightthickness=0)  # ‚úÖ Retirer la bordure
        self.block_canvas.grid(row=0, column=0, sticky="nsew")
        
        # Scrollbars pour la zone de blocs
        block_v_scrollbar = ttk.Scrollbar(block_canvas_frame, orient="vertical", command=self.block_canvas.yview)
        block_h_scrollbar = ttk.Scrollbar(block_canvas_frame, orient="horizontal", command=self.block_canvas.xview)
        self.block_canvas.configure(yscrollcommand=block_v_scrollbar.set, xscrollcommand=block_h_scrollbar.set)
        
        block_v_scrollbar.grid(row=0, column=1, sticky="ns")
        block_h_scrollbar.grid(row=1, column=0, sticky="ew")
        
        # ‚úÖ Configuration de la zone de scroll - taille exacte
        self.block_canvas.configure(scrollregion=(0, 0, self.block_area_width, self.block_area_height))
        
        # ‚úÖ Frame pour le contenu des blocs √† l'int√©rieur du canvas
        self.block_content_frame = ctk.CTkFrame(self.block_canvas)
        self.block_canvas_window = self.block_canvas.create_window(0, 0, anchor="nw", window=self.block_content_frame)
        self.block_content_frame.grid_columnconfigure(0, weight=1)
        
        # ‚úÖ Configuration du contenu pour occuper exactement la taille du canvas
        self.block_content_frame.configure(width=self.block_area_width, height=self.block_area_height)
        
        # Bind pour ajuster la taille du frame interne
        self.block_content_frame.bind('<Configure>', self.on_block_frame_configure)
        self.block_canvas.bind('<Configure>', self.on_block_canvas_configure)
        
        # Cr√©er quelques blocs d'exemple si la biblioth√®que est vide
        if not self.project_blocks:
            self.create_sample_blocks()
        
        # Afficher les blocs
        self.refresh_block_view()
        
        self.update_status("Module biblioth√®que de blocs affich√© en taille Large (1600x800)")

    def on_block_frame_configure(self, event):
        """G√©rer le redimensionnement du frame de contenu des blocs"""
        # ‚úÖ CORRECTION : Mettre √† jour la scrollregion pour la taille exacte du contenu
        canvas_width = self.block_canvas.winfo_width()
        canvas_height = self.block_canvas.winfo_height()
        
        # Ajuster la taille de la scrollregion au contenu r√©el
        bbox = self.block_canvas.bbox("all")
        if bbox:
            self.block_canvas.configure(scrollregion=bbox)
        else:
            # Si pas de contenu, utiliser la taille exacte du canvas
            self.block_canvas.configure(scrollregion=(0, 0, canvas_width, canvas_height))

    def on_block_canvas_configure(self, event):
        """G√©rer le redimensionnement du canvas des blocs"""
        # ‚úÖ CORRECTION : Ajuster la largeur du frame interne exactement au canvas
        canvas_width = event.width
        canvas_height = event.height
        
        # Configurer la fen√™tre du canvas pour occuper exactement l'espace
        self.block_canvas.itemconfig(self.block_canvas_window, width=canvas_width, height=canvas_height)
        
        # Mettre √† jour la taille du frame de contenu
        self.block_content_frame.configure(width=canvas_width, height=canvas_height)

    def refresh_block_view(self):
        """Rafra√Æchir l'affichage des blocs - MODIFI√â pour utiliser le canvas"""
        print(f"üîÑ Rafra√Æchissement de l'affichage des blocs...")
        print(f"   - Nombre de blocs: {len(self.project_blocks)}")
        print(f"   - Mode de vue: {self.block_view_mode}")
        print(f"   - Taille zone: {self.block_area_width}x{self.block_area_height}")
        
        # Nettoyer le contenu actuel
        for widget in self.block_content_frame.winfo_children():
            widget.destroy()
        
        # Filtrer et trier les blocs
        filtered_blocks = self.get_filtered_blocks()
        
        if not filtered_blocks:
            no_blocks_label = ctk.CTkLabel(self.block_content_frame, 
                                        text="Aucun bloc trouv√© avec les filtres actuels",
                                        font=ctk.CTkFont(size=14))
            no_blocks_label.pack(pady=50)
        else:
            if self.block_view_mode == "grid":
                self.show_blocks_grid_enhanced(filtered_blocks)
            else:
                self.show_blocks_list_enhanced(filtered_blocks)
        
        self.update_block_stats(filtered_blocks)
        print(f"‚úÖ Rafra√Æchissement termin√©")

    def show_blocks_grid_enhanced(self, blocks):
        """Afficher les blocs en vue grille - MODIFI√â pour utiliser l'espace Large"""
        # Container pour la grille
        grid_frame = ctk.CTkFrame(self.block_content_frame)
        grid_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Calculer le nombre de colonnes selon la largeur disponible
        card_width = 320
        available_width = self.block_area_width - 40  # 40px pour les marges
        columns = max(1, available_width // (card_width + 15))  # 15px pour l'espacement
        
        # Configurer la grille dynamiquement
        for i in range(columns):
            grid_frame.grid_columnconfigure(i, weight=1)
        
        # Afficher les blocs
        for i, block in enumerate(blocks):
            row = i // columns
            col = i % columns
            self.create_block_card_enhanced(grid_frame, block, row, col, card_width)

    def create_block_card_enhanced(self, parent, block, row, col, card_width):
        """Cr√©er une carte de bloc am√©lior√©e pour la vue grille"""
        card = ctk.CTkFrame(parent, width=card_width, height=380)
        card.grid(row=row, column=col, padx=8, pady=8, sticky="nsew")
        card.grid_propagate(False)
        
        # En-t√™te avec ic√¥ne et nom
        header_frame = ctk.CTkFrame(card)
        header_frame.pack(fill="x", padx=12, pady=(12, 8))
        
        icon_label = ctk.CTkLabel(header_frame, text=block.get_category_icon(), 
                                font=ctk.CTkFont(size=28))
        icon_label.pack(side="left", padx=(8, 15))
        
        name_frame = ctk.CTkFrame(header_frame)
        name_frame.pack(side="left", fill="x", expand=True)
        
        name_label = ctk.CTkLabel(name_frame, text=block.name, 
                                font=ctk.CTkFont(size=13, weight="bold"),
                                wraplength=card_width - 80)
        name_label.pack(anchor="w", pady=(5, 0))
        
        # Cat√©gorie et domaine
        cat_domain_text = f"üè∑Ô∏è {block.category}"
        if block.domain:
            cat_domain_text += f" ‚Ä¢ üåê {block.domain}"
        cat_label = ctk.CTkLabel(card, text=cat_domain_text, 
                                font=ctk.CTkFont(size=10))
        cat_label.pack(padx=12, pady=3)
        
        # Client si sp√©cifi√©
        if block.client:
            client_label = ctk.CTkLabel(card, text=f"üë§ Client: {block.client}", 
                                    font=ctk.CTkFont(size=10),
                                    text_color="#2196F3")
            client_label.pack(padx=12, pady=3)
        
        # Description (adapt√©e √† la largeur)
        desc_text = block.description[:120] + "..." if len(block.description) > 120 else block.description
        desc_label = ctk.CTkLabel(card, text=desc_text, 
                                font=ctk.CTkFont(size=10),
                                wraplength=card_width - 24, height=60)
        desc_label.pack(padx=12, pady=8, fill="x")
        
        # Statistiques d√©taill√©es
        stats_frame = ctk.CTkFrame(card)
        stats_frame.pack(fill="x", padx=12, pady=8)
        
        # Ligne 1 : Usage et succ√®s
        stats1_frame = ctk.CTkFrame(stats_frame)
        stats1_frame.pack(fill="x", pady=3)
        
        usage_label = ctk.CTkLabel(stats1_frame, text=f"üìä Utilis√© {block.usage_count} fois", 
                                font=ctk.CTkFont(size=9))
        usage_label.pack(side="left", padx=8)
        
        if block.usage_count > 0:
            success_color = "#4CAF50" if block.success_rate > 80 else "#FF9800" if block.success_rate > 60 else "#F44336"
            success_label = ctk.CTkLabel(stats1_frame, text=f"‚úÖ {block.success_rate:.0f}%", 
                                        text_color=success_color, font=ctk.CTkFont(size=9))
            success_label.pack(side="right", padx=8)
        
        # Ligne 2 : Dur√©e et derni√®re utilisation
        stats2_frame = ctk.CTkFrame(stats_frame)
        stats2_frame.pack(fill="x", pady=3)
        
        if block.average_duration > 0:
            duration_label = ctk.CTkLabel(stats2_frame, text=f"‚è±Ô∏è {block.average_duration:.0f}j moy.", 
                                        font=ctk.CTkFont(size=9))
            duration_label.pack(side="left", padx=8)
        
        if block.last_used:
            days_ago = (datetime.datetime.now() - block.last_used).days
            last_used_text = f"Il y a {days_ago}j" if days_ago > 0 else "Aujourd'hui"
            last_used_label = ctk.CTkLabel(stats2_frame, text=f"üïê {last_used_text}", 
                                        font=ctk.CTkFont(size=9))
            last_used_label.pack(side="right", padx=8)
        
        # Ligne 3 : Contenu du bloc
        if block.nodes or block.tasks:
            content_frame = ctk.CTkFrame(stats_frame)
            content_frame.pack(fill="x", pady=3)
            
            if block.nodes:
                nodes_count = self.count_nodes_in_structure(block.nodes) if hasattr(self, 'count_nodes_in_structure') else 1
                nodes_label = ctk.CTkLabel(content_frame, text=f"üå≥ {nodes_count} n≈ìuds", 
                                        font=ctk.CTkFont(size=9))
                nodes_label.pack(side="left", padx=8)
            
            if block.tasks:
                tasks_label = ctk.CTkLabel(content_frame, text=f"‚úÖ {len(block.tasks)} t√¢ches", 
                                        font=ctk.CTkFont(size=9))
                tasks_label.pack(side="right", padx=8)
        
        # Tags (limit√©s √† 3 pour l'espace)
        if block.tags:
            tags_text = " ".join([f"#{tag}" for tag in block.tags[:3]])  # Max 3 tags
            if len(block.tags) > 3:
                tags_text += f" +{len(block.tags) - 3}"
            tags_label = ctk.CTkLabel(card, text=tags_text, 
                                    text_color="#2196F3", font=ctk.CTkFont(size=9))
            tags_label.pack(padx=12, pady=5)
        
        # Boutons d'action (plus compacts et mieux organis√©s)
        buttons_frame = ctk.CTkFrame(card)
        buttons_frame.pack(side="bottom", fill="x", padx=12, pady=12)
        
        # Ligne 1 : Actions principales
        main_actions = ctk.CTkFrame(buttons_frame)
        main_actions.pack(fill="x", pady=(0, 5))
        
        ctk.CTkButton(main_actions, text="üîç D√©tails", width=70, height=28,
                    command=lambda: self.view_block_details(block)).pack(side="left", padx=2)
        ctk.CTkButton(main_actions, text="üì• Importer", width=70, height=28,
                    command=lambda: self.import_block_to_project(block)).pack(side="left", padx=2)
        ctk.CTkButton(main_actions, text="‚úèÔ∏è √âditer", width=60, height=28,
                    command=lambda: self.edit_block(block)).pack(side="right", padx=2)
        
        # Ligne 2 : Actions secondaires
        secondary_actions = ctk.CTkFrame(buttons_frame)
        secondary_actions.pack(fill="x")
        
        ctk.CTkButton(secondary_actions, text="üìù T√¢ches", width=65, height=25,
                    command=lambda: self.edit_block_tasks(block)).pack(side="left", padx=2)
        ctk.CTkButton(secondary_actions, text="üóëÔ∏è Suppr.", width=60, height=25,
                    command=lambda: self.delete_block(block)).pack(side="right", padx=2)

    def show_blocks_list_enhanced(self, blocks):
        """Afficher les blocs en vue liste - MODIFI√â pour utiliser l'espace Large"""
        # En-t√™tes avec largeur adapt√©e √† la zone Large
        headers_frame = ctk.CTkFrame(self.block_content_frame)
        headers_frame.pack(fill="x", padx=10, pady=5)
        
        # ‚úÖ Configuration des colonnes pour la largeur Large
        headers_frame.grid_columnconfigure(0, weight=2, minsize=220)  # Nom - plus large
        headers_frame.grid_columnconfigure(1, weight=1, minsize=120)  # Cat√©gorie
        headers_frame.grid_columnconfigure(2, weight=1, minsize=100)  # Domaine
        headers_frame.grid_columnconfigure(3, weight=1, minsize=80)   # Usage
        headers_frame.grid_columnconfigure(4, weight=1, minsize=80)   # Succ√®s
        headers_frame.grid_columnconfigure(5, weight=1, minsize=100)  # Dur√©e
        headers_frame.grid_columnconfigure(6, weight=1, minsize=120)  # Derni√®re util.
        headers_frame.grid_columnconfigure(7, weight=2, minsize=200)  # Description
        headers_frame.grid_columnconfigure(8, weight=1, minsize=150)  # Actions
        
        headers = ["Nom du Bloc", "Cat√©gorie", "Domaine", "Usage", "Succ√®s", "Dur√©e Moy.", "Derni√®re Util.", "Description", "Actions"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(headers_frame, text=header, 
                            font=ctk.CTkFont(size=12, weight="bold"))
            # ‚úÖ CORRECTION : Alignement coh√©rent des en-t√™tes
            if i == 0:  # Nom √† gauche
                label.grid(row=0, column=i, padx=5, pady=10, sticky="w")
            else:  # Autres colonnes centr√©es
                label.grid(row=0, column=i, padx=5, pady=10, sticky="ew")
        
        # ‚úÖ Ligne de s√©paration sous les en-t√™tes
        separator = ctk.CTkFrame(self.block_content_frame, height=2)
        separator.pack(fill="x", padx=10, pady=(0, 5))
        
        # Zone scrollable pour les lignes de blocs
        table_scroll = ctk.CTkScrollableFrame(self.block_content_frame, 
                                            height=max(500, self.block_area_height - 150))
        table_scroll.pack(fill="x", padx=10, pady=5)
        table_scroll.grid_columnconfigure(0, weight=1)
        
        # Blocs
        for i, block in enumerate(blocks):
            self.create_block_row_enhanced(table_scroll, block, i)

    def create_block_row_enhanced(self, parent, block, row_index):
        """Cr√©er une ligne de bloc am√©lior√©e pour la vue liste"""
        row_frame = ctk.CTkFrame(parent)
        row_frame.pack(fill="x", padx=5, pady=2)
        
        # ‚úÖ Configuration des colonnes identique aux en-t√™tes
        row_frame.grid_columnconfigure(0, weight=2, minsize=220)  # Nom
        row_frame.grid_columnconfigure(1, weight=1, minsize=120)  # Cat√©gorie
        row_frame.grid_columnconfigure(2, weight=1, minsize=100)  # Domaine
        row_frame.grid_columnconfigure(3, weight=1, minsize=80)   # Usage
        row_frame.grid_columnconfigure(4, weight=1, minsize=80)   # Succ√®s
        row_frame.grid_columnconfigure(5, weight=1, minsize=100)  # Dur√©e
        row_frame.grid_columnconfigure(6, weight=1, minsize=120)  # Derni√®re util.
        row_frame.grid_columnconfigure(7, weight=2, minsize=200)  # Description
        row_frame.grid_columnconfigure(8, weight=1, minsize=150)  # Actions
        
        # Nom avec ic√¥ne
        name_text = f"{block.get_category_icon()} {block.name}"
        name_label = ctk.CTkLabel(row_frame, text=name_text, anchor="w")
        name_label.grid(row=0, column=0, padx=5, pady=5, sticky="ew")
        
        # Cat√©gorie
        cat_label = ctk.CTkLabel(row_frame, text=block.category)
        cat_label.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        
        # Domaine
        domain_label = ctk.CTkLabel(row_frame, text=block.domain or "-")
        domain_label.grid(row=0, column=2, padx=5, pady=5, sticky="ew")
        
        # Usage
        usage_label = ctk.CTkLabel(row_frame, text=str(block.usage_count))
        usage_label.grid(row=0, column=3, padx=5, pady=5, sticky="ew")
        
        # Succ√®s
        if block.usage_count > 0:
            success_color = "#4CAF50" if block.success_rate > 80 else "#FF9800" if block.success_rate > 60 else "#F44336"
            success_text = f"{block.success_rate:.0f}%"
        else:
            success_color = "#666666"
            success_text = "N/A"
        success_label = ctk.CTkLabel(row_frame, text=success_text, text_color=success_color)
        success_label.grid(row=0, column=4, padx=5, pady=5, sticky="ew")
        
        # Dur√©e moyenne
        duration_text = f"{block.average_duration:.0f}j" if block.average_duration > 0 else "N/A"
        duration_label = ctk.CTkLabel(row_frame, text=duration_text)
        duration_label.grid(row=0, column=5, padx=5, pady=5, sticky="ew")
        
        # Derni√®re utilisation
        if block.last_used:
            days_ago = (datetime.datetime.now() - block.last_used).days
            last_used_text = f"Il y a {days_ago}j" if days_ago > 0 else "Aujourd'hui"
        else:
            last_used_text = "Jamais"
        last_used_label = ctk.CTkLabel(row_frame, text=last_used_text)
        last_used_label.grid(row=0, column=6, padx=5, pady=5, sticky="ew")
        
        # Description (tronqu√©e)
        desc_text = block.description[:80] + "..." if len(block.description) > 80 else block.description
        desc_label = ctk.CTkLabel(row_frame, text=desc_text, wraplength=180)
        desc_label.grid(row=0, column=7, padx=5, pady=5, sticky="ew")
        
        # Actions
        actions_frame = ctk.CTkFrame(row_frame)
        actions_frame.grid(row=0, column=8, padx=5, pady=5, sticky="ew")
        
        # ‚úÖ Configuration pour centrer les boutons
        actions_frame.grid_columnconfigure(0, weight=1)
        actions_frame.grid_columnconfigure(1, weight=1)
        actions_frame.grid_columnconfigure(2, weight=1)
        actions_frame.grid_columnconfigure(3, weight=1)
        actions_frame.grid_columnconfigure(4, weight=1)
        
        ctk.CTkButton(actions_frame, text="üîç", width=25, height=25,
                    command=lambda: self.view_block_details(block)).grid(row=0, column=0, padx=1)
        ctk.CTkButton(actions_frame, text="üì•", width=25, height=25,
                    command=lambda: self.import_block_to_project(block)).grid(row=0, column=1, padx=1)
        ctk.CTkButton(actions_frame, text="üìù", width=25, height=25,
                    command=lambda: self.edit_block_tasks(block)).grid(row=0, column=2, padx=1)
        ctk.CTkButton(actions_frame, text="‚úèÔ∏è", width=25, height=25,
                    command=lambda: self.edit_block(block)).grid(row=0, column=3, padx=1)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è", width=25, height=25,
                    command=lambda: self.delete_block(block)).grid(row=0, column=4, padx=1)
    def create_sample_blocks(self):
        """Cr√©er quelques blocs d'exemple"""
        sample_blocks = [
            ProjectBlock(
                name="Pipeline CI/CD Standard",
                description="Pipeline complet avec tests automatis√©s, build et d√©ploiement",
                category="CI/CD",
                domain="Software",
                client=""
            ),
            ProjectBlock(
                name="Processus de Validation Embarqu√©",
                description="Tests HIL, SIL et validation mat√©rielle pour syst√®mes embarqu√©s",
                category="Testing",
                domain="Embedded",
                client=""
            ),
            ProjectBlock(
                name="Phase d'Int√©gration IoT",
                description="Int√©gration capteurs, communication et cloud pour projets IoT",
                category="Integration",
                domain="IoT",
                client=""
            ),
            ProjectBlock(
                name="Documentation Technique",
                description="Template complet de documentation projet avec livrables",
                category="Documentation",
                domain="General",
                client=""
            ),
            ProjectBlock(
                name="Tests de S√©curit√©",
                description="Audit s√©curit√©, tests de p√©n√©tration et validation",
                category="Security",
                domain="Web",
                client=""
            )
        ]
        
        # Ajouter des donn√©es d'usage fictives
        for i, block in enumerate(sample_blocks):
            block.usage_count = (i + 1) * 3
            block.success_rate = 85 + (i * 3)
            block.average_duration = 10 + (i * 5)
            block.tags = ["standard", "test√©", "fiable"]
            
            # Ajouter quelques t√¢ches d'exemple
            block.tasks = [
                {"title": f"T√¢che 1 - {block.name}", "description": "Description de la t√¢che", "priority": "Moyenne"},
                {"title": f"T√¢che 2 - {block.name}", "description": "Description de la t√¢che", "priority": "Critique"}
            ]
            
            # Historique d'usage
            for j in range(block.usage_count):
                block.usage_history.append({
                    'project_name': f"Projet-{j+1}",
                    'date': (datetime.datetime.now() - datetime.timedelta(days=j*30)).isoformat(),
                    'duration_days': block.average_duration + (j-1),
                    'success': j % 4 != 0,  # 3/4 de succ√®s
                    'notes': f"Utilisation {j+1}"
                })
        
        self.project_blocks.extend(sample_blocks)
        self.save_project_blocks()

    def load_project_blocks(self):
        """Charger les blocs depuis le fichier de sauvegarde"""
        blocks_file = os.path.join(self.blocks_storage_path, "project_blocks.json")
        if os.path.exists(blocks_file):
            try:
                with open(blocks_file, 'r', encoding='utf-8') as f:
                    blocks_data = json.load(f)
                
                self.project_blocks = []
                for block_data in blocks_data:
                    block = ProjectBlock.from_dict(block_data)
                    self.project_blocks.append(block)
                    
            except Exception as e:
                print(f"Erreur lors du chargement des blocs : {str(e)}")
                self.project_blocks = []

    def save_project_blocks(self):
        """Sauvegarder les blocs dans un fichier"""
        blocks_file = os.path.join(self.blocks_storage_path, "project_blocks.json")
        try:
            blocks_data = [block.to_dict() for block in self.project_blocks]
            with open(blocks_file, 'w', encoding='utf-8') as f:
                json.dump(blocks_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Erreur lors de la sauvegarde des blocs : {str(e)}")

    def change_block_view(self, view_mode):
        """Changer le mode de vue des blocs"""
        self.block_view_mode = view_mode
        self.refresh_block_view()

    def apply_block_filters(self, *args):
        """Appliquer les filtres et rafra√Æchir la vue"""
        self.refresh_block_view()

    def refresh_block_view(self):
        """Rafra√Æchir l'affichage des blocs"""
        # Nettoyer le contenu actuel
        for widget in self.block_content_frame.winfo_children():
            widget.destroy()
        
        # Filtrer et trier les blocs
        filtered_blocks = self.get_filtered_blocks()
        
        if not filtered_blocks:
            no_blocks_label = ctk.CTkLabel(self.block_content_frame, 
                                        text="Aucun bloc trouv√© avec les filtres actuels",
                                        font=ctk.CTkFont(size=14))
            no_blocks_label.pack(pady=50)
        else:
            if self.block_view_mode == "grid":
                self.show_blocks_grid(filtered_blocks)
            else:
                self.show_blocks_list(filtered_blocks)
        
        self.update_block_stats(filtered_blocks)

    def get_filtered_blocks(self):
        """Obtenir les blocs filtr√©s et tri√©s"""
        filtered = self.project_blocks.copy()
        
        # Filtre par cat√©gorie
        if hasattr(self, 'block_category_filter') and self.block_category_filter.get() != "Toutes":
            filtered = [b for b in filtered if b.category == self.block_category_filter.get()]
        
        # Filtre par domaine
        if hasattr(self, 'block_domain_filter') and self.block_domain_filter.get() != "Tous":
            filtered = [b for b in filtered if b.domain == self.block_domain_filter.get()]
        
        # Tri
        sort_option = getattr(self, 'block_sort_filter', None)
        if sort_option:
            sort_key = sort_option.get() if hasattr(sort_option, 'get') else "Nom"
            
            if sort_key == "Nom":
                filtered.sort(key=lambda x: x.name.lower())
            elif sort_key == "Date cr√©ation":
                filtered.sort(key=lambda x: x.created_date, reverse=True)
            elif sort_key == "Usage":
                filtered.sort(key=lambda x: x.usage_count, reverse=True)
            elif sort_key == "Succ√®s":
                filtered.sort(key=lambda x: x.success_rate, reverse=True)
            elif sort_key == "Derni√®re utilisation":
                filtered.sort(key=lambda x: x.last_used or datetime.datetime.min, reverse=True)
        
        return filtered

    def show_blocks_grid(self, blocks):
        """Afficher les blocs en vue grille"""
        # Container pour la grille
        grid_frame = ctk.CTkFrame(self.block_content_frame)
        grid_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Configurer la grille (3 colonnes)
        for i in range(3):
            grid_frame.grid_columnconfigure(i, weight=1)
        
        # Afficher les blocs
        for i, block in enumerate(blocks):
            row = i // 3
            col = i % 3
            self.create_block_card(grid_frame, block, row, col)

    def create_block_card(self, parent, block, row, col):
        """Cr√©er une carte de bloc pour la vue grille"""
        card = ctk.CTkFrame(parent, width=280, height=320)
        card.grid(row=row, column=col, padx=8, pady=8, sticky="nsew")
        card.grid_propagate(False)
        
        # En-t√™te avec ic√¥ne et nom
        header_frame = ctk.CTkFrame(card)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        icon_label = ctk.CTkLabel(header_frame, text=block.get_category_icon(), 
                                font=ctk.CTkFont(size=24))
        icon_label.pack(side="left", padx=(5, 10))
        
        name_label = ctk.CTkLabel(header_frame, text=block.name, 
                                font=ctk.CTkFont(size=12, weight="bold"),
                                wraplength=200)
        name_label.pack(side="left", anchor="w")
        
        # Cat√©gorie et domaine
        cat_domain_text = f"üè∑Ô∏è {block.category}"
        if block.domain:
            cat_domain_text += f" ‚Ä¢ üåê {block.domain}"
        cat_label = ctk.CTkLabel(card, text=cat_domain_text, 
                                font=ctk.CTkFont(size=10))
        cat_label.pack(padx=10, pady=2)
        
        # Client si sp√©cifi√©
        if block.client:
            client_label = ctk.CTkLabel(card, text=f"üë§ Client: {block.client}", 
                                    font=ctk.CTkFont(size=10))
            client_label.pack(padx=10, pady=2)
        
        # Description
        desc_label = ctk.CTkLabel(card, text=block.description, 
                                font=ctk.CTkFont(size=10),
                                wraplength=250, height=60)
        desc_label.pack(padx=10, pady=5, fill="x")
        
        # Statistiques
        stats_frame = ctk.CTkFrame(card)
        stats_frame.pack(fill="x", padx=10, pady=5)
        
        # Ligne 1 : Usage et succ√®s
        stats1_frame = ctk.CTkFrame(stats_frame)
        stats1_frame.pack(fill="x", pady=2)
        
        usage_label = ctk.CTkLabel(stats1_frame, text=f"üìä Utilis√© {block.usage_count} fois", 
                                font=ctk.CTkFont(size=9))
        usage_label.pack(side="left", padx=5)
        
        if block.usage_count > 0:
            success_color = "#4CAF50" if block.success_rate > 80 else "#FF9800" if block.success_rate > 60 else "#F44336"
            success_label = ctk.CTkLabel(stats1_frame, text=f"‚úÖ {block.success_rate:.0f}%", 
                                        text_color=success_color, font=ctk.CTkFont(size=9))
            success_label.pack(side="right", padx=5)
        
        # Ligne 2 : Dur√©e et derni√®re utilisation
        stats2_frame = ctk.CTkFrame(stats_frame)
        stats2_frame.pack(fill="x", pady=2)
        
        if block.average_duration > 0:
            duration_label = ctk.CTkLabel(stats2_frame, text=f"‚è±Ô∏è {block.average_duration:.0f}j moy.", 
                                        font=ctk.CTkFont(size=9))
            duration_label.pack(side="left", padx=5)
        
        if block.last_used:
            days_ago = (datetime.datetime.now() - block.last_used).days
            last_used_text = f"Il y a {days_ago}j" if days_ago > 0 else "Aujourd'hui"
            last_used_label = ctk.CTkLabel(stats2_frame, text=f"üïê {last_used_text}", 
                                        font=ctk.CTkFont(size=9))
            last_used_label.pack(side="right", padx=5)
        
        # Tags
        if block.tags:
            tags_text = " ".join([f"#{tag}" for tag in block.tags[:3]])  # Max 3 tags
            tags_label = ctk.CTkLabel(card, text=tags_text, 
                                    text_color="#2196F3", font=ctk.CTkFont(size=9))
            tags_label.pack(padx=10, pady=2)
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(card)
        buttons_frame.pack(side="bottom", fill="x", padx=10, pady=10)
        
        ctk.CTkButton(buttons_frame, text="üîç Voir", width=50, height=25,
                    command=lambda: self.view_block_details(block)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="üì• Importer", width=60, height=25,
                    command=lambda: self.import_block_to_project(block)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="‚úèÔ∏è", width=30, height=25,
                    command=lambda: self.edit_block(block)).pack(side="left", padx=1)
        ctk.CTkButton(buttons_frame, text="üóëÔ∏è", width=30, height=25,
                    command=lambda: self.delete_block(block)).pack(side="right", padx=1)

    def show_blocks_list(self, blocks):
        """Afficher les blocs en vue liste"""
        # En-t√™tes
        headers_frame = ctk.CTkFrame(self.block_content_frame)
        headers_frame.pack(fill="x", padx=10, pady=5)
        headers_frame.grid_columnconfigure(0, weight=2)  # Nom
        headers_frame.grid_columnconfigure(1, weight=1)  # Cat√©gorie
        headers_frame.grid_columnconfigure(2, weight=1)  # Domaine
        headers_frame.grid_columnconfigure(3, weight=1)  # Usage
        headers_frame.grid_columnconfigure(4, weight=1)  # Succ√®s
        headers_frame.grid_columnconfigure(5, weight=1)  # Dur√©e
        headers_frame.grid_columnconfigure(6, weight=1)  # Actions
        
        headers = ["Nom du Bloc", "Cat√©gorie", "Domaine", "Usage", "Succ√®s", "Dur√©e Moy.", "Actions"]
        for i, header in enumerate(headers):
            label = ctk.CTkLabel(headers_frame, text=header, 
                                font=ctk.CTkFont(size=12, weight="bold"))
            label.grid(row=0, column=i, padx=5, pady=10, sticky="w")
        
        # Blocs
        for i, block in enumerate(blocks):
            self.create_block_row(i + 1, block)

    def create_block_row(self, row, block):
        """Cr√©er une ligne de bloc pour la vue liste"""
        row_frame = ctk.CTkFrame(self.block_content_frame)
        row_frame.pack(fill="x", padx=10, pady=2)
        row_frame.grid_columnconfigure(0, weight=2)
        row_frame.grid_columnconfigure(1, weight=1)
        row_frame.grid_columnconfigure(2, weight=1)
        row_frame.grid_columnconfigure(3, weight=1)
        row_frame.grid_columnconfigure(4, weight=1)
        row_frame.grid_columnconfigure(5, weight=1)
        row_frame.grid_columnconfigure(6, weight=1)
        
        # Nom avec ic√¥ne
        name_text = f"{block.get_category_icon()} {block.name}"
        name_label = ctk.CTkLabel(row_frame, text=name_text, anchor="w")
        name_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")
        
        # Cat√©gorie
        cat_label = ctk.CTkLabel(row_frame, text=block.category)
        cat_label.grid(row=0, column=1, padx=5, pady=5)
        
        # Domaine
        domain_label = ctk.CTkLabel(row_frame, text=block.domain or "-")
        domain_label.grid(row=0, column=2, padx=5, pady=5)
        
        # Usage
        usage_label = ctk.CTkLabel(row_frame, text=str(block.usage_count))
        usage_label.grid(row=0, column=3, padx=5, pady=5)
        
        # Succ√®s
        if block.usage_count > 0:
            success_color = "#4CAF50" if block.success_rate > 80 else "#FF9800" if block.success_rate > 60 else "#F44336"
            success_text = f"{block.success_rate:.0f}%"
        else:
            success_color = "#666666"
            success_text = "N/A"
        success_label = ctk.CTkLabel(row_frame, text=success_text, text_color=success_color)
        success_label.grid(row=0, column=4, padx=5, pady=5)
        
        # Dur√©e moyenne
        duration_text = f"{block.average_duration:.0f}j" if block.average_duration > 0 else "N/A"
        duration_label = ctk.CTkLabel(row_frame, text=duration_text)
        duration_label.grid(row=0, column=5, padx=5, pady=5)
        
        # Actions
        actions_frame = ctk.CTkFrame(row_frame)
        actions_frame.grid(row=0, column=6, padx=5, pady=5)
        
        ctk.CTkButton(actions_frame, text="üîç", width=25, height=25,
                    command=lambda: self.view_block_details(block)).pack(side="left", padx=1)
        ctk.CTkButton(actions_frame, text="üì•", width=25, height=25,
                    command=lambda: self.import_block_to_project(block)).pack(side="left", padx=1)
        ctk.CTkButton(actions_frame, text="‚úèÔ∏è", width=25, height=25,
                    command=lambda: self.edit_block(block)).pack(side="left", padx=1)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è", width=25, height=25,
                    command=lambda: self.delete_block(block)).pack(side="left", padx=1)

    def update_block_stats(self, filtered_blocks):
        """Mettre √† jour les statistiques des blocs"""
        total = len(self.project_blocks)
        filtered_count = len(filtered_blocks)
        total_usage = sum(block.usage_count for block in filtered_blocks)
        avg_success = sum(block.success_rate for block in filtered_blocks if block.usage_count > 0) / len([b for b in filtered_blocks if b.usage_count > 0]) if [b for b in filtered_blocks if b.usage_count > 0] else 0
        
        stats_text = f"Total: {total} | Affich√©s: {filtered_count} | Usage total: {total_usage} | Succ√®s moy: {avg_success:.0f}%"
        
        if hasattr(self, 'block_stats_label'):
            self.block_stats_label.configure(text=stats_text)

    def create_new_block(self):
        """Cr√©er un nouveau bloc vide"""
        self.edit_block(None)

    def create_block_from_tree(self):
        """Cr√©er un bloc √† partir de l'arbre actuel"""
        if not hasattr(self, 'tree_nodes') or not self.tree_nodes:
            messagebox.showwarning("Avertissement", "Aucun diagramme en arbre trouv√©!")
            return
        
        if not hasattr(self, 'selected_tree_node') or not self.selected_tree_node:
            messagebox.showwarning("Avertissement", "S√©lectionnez d'abord un n≈ìud racine dans l'arbre!")
            return
        
        # Demander les informations du bloc
        dialog = ctk.CTkToplevel(self)
        dialog.title("Cr√©er un Bloc depuis l'Arbre")
        dialog.geometry("500x400")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations du n≈ìud s√©lectionn√©
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text="üå≥ N≈ìud racine s√©lectionn√©", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        ctk.CTkLabel(info_frame, text=f"N≈ìud: {self.selected_tree_node.text}").pack(anchor='w', padx=10)
        
        # Compter les descendants
        descendants = self.selected_tree_node.get_all_descendants()
        ctk.CTkLabel(info_frame, text=f"Sous-n≈ìuds inclus: {len(descendants)}").pack(anchor='w', padx=10, pady=(0, 10))
        
        # Nom du bloc
        ctk.CTkLabel(main_frame, text="Nom du bloc:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        name_entry = ctk.CTkEntry(main_frame, width=400)
        name_entry.pack(fill='x', pady=(0, 10))
        name_entry.insert(0, f"Bloc - {self.selected_tree_node.text}")
        
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        desc_textbox.insert("1.0", f"Bloc cr√©√© √† partir du n≈ìud '{self.selected_tree_node.text}' et ses {len(descendants)} sous-n≈ìuds.")
        
        # Cat√©gorie
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        category_var = tk.StringVar(value="Process")
        categories = ["Process", "Testing", "CI/CD", "Hardware", "Software", "Integration", "Validation", "Documentation", "Planning", "Quality", "Security", "General"]
        category_menu = ctk.CTkOptionMenu(main_frame, values=categories, variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Domaine
        ctk.CTkLabel(main_frame, text="Domaine:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        domain_var = tk.StringVar(value="General")
        domains = ["General", "Embedded", "Web", "Mobile", "IoT", "Desktop", "Cloud", "AI/ML", "Data"]
        domain_menu = ctk.CTkOptionMenu(main_frame, values=domains, variable=domain_var)
        domain_menu.pack(fill='x', pady=(0, 10))
        
        # Client
        ctk.CTkLabel(main_frame, text="Client (optionnel):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        client_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Nom du client sp√©cifique")
        client_entry.pack(fill='x', pady=(0, 10))
        
        # Tags
        ctk.CTkLabel(main_frame, text="Tags (s√©par√©s par des virgules):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        tags_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="standard, test√©, √©prouv√©")
        tags_entry.pack(fill='x', pady=(0, 20))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_block():
            if not name_entry.get().strip():
                messagebox.showerror("Erreur", "Le nom du bloc est obligatoire!")
                return
            
            # Cr√©er le bloc
            new_block = ProjectBlock(
                name=name_entry.get().strip(),
                description=desc_textbox.get("1.0", "end-1c"),
                category=category_var.get(),
                domain=domain_var.get(),
                client=client_entry.get().strip()
            )
            
            # Traiter les tags
            tags_text = tags_entry.get().strip()
            if tags_text:
                new_block.tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
            
            # Sauvegarder les n≈ìuds
            new_block.nodes = self.serialize_tree_branch(self.selected_tree_node)
            
            # Chercher les t√¢ches li√©es
            if hasattr(self, 'tasks'):
                linked_tasks = [task for task in self.tasks if task.linked_node and 
                            (task.linked_node == self.selected_tree_node or task.linked_node in descendants)]
                new_block.tasks = [task.to_dict() for task in linked_tasks]
            
            # Ajouter √† la biblioth√®que
            self.project_blocks.append(new_block)
            self.save_project_blocks()
            
            # Enregistrement dans le journal
            if hasattr(self, 'add_automatic_log_entry'):
                self.add_automatic_log_entry(
                    title=f"Bloc cr√©√© : '{new_block.name}'",
                    description=f"Nouveau bloc cr√©√© depuis l'arbre.\nN≈ìuds inclus: {len(new_block.nodes)}\nT√¢ches li√©es: {len(new_block.tasks)}",
                    category="Block"
                )
            
            result["saved"] = True
            dialog.destroy()
        
        def cancel():
            dialog.destroy()
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Cr√©er le Bloc", command=save_block).pack(side='right')
        
        # Focus sur le nom
        name_entry.focus()
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_block_view()
            self.update_status("Bloc cr√©√© depuis l'arbre")

    def serialize_tree_branch(self, root_node):
        """S√©rialiser une branche d'arbre en format JSON"""
        def node_to_dict(node):
            return {
                'text': node.text,
                'x': node.x,
                'y': node.y,
                'color': node.color,
                'border_color': node.border_color,
                'children': [node_to_dict(child) for child in node.children]
            }
        
        return node_to_dict(root_node)

    def view_block_details(self, block):
        """Afficher les d√©tails complets d'un bloc"""
        # Cr√©er une nouvelle fen√™tre
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"D√©tails - {block.name}")
        dialog.geometry("800x700")
        dialog.transient(self)
        
        # Frame principal avec onglets
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # En-t√™te
        header_frame = ctk.CTkFrame(main_frame)
        header_frame.pack(fill="x", pady=(0, 20))
        
        # Titre avec ic√¥ne
        title_frame = ctk.CTkFrame(header_frame)
        title_frame.pack(fill="x", padx=10, pady=10)
        
        icon_label = ctk.CTkLabel(title_frame, text=block.get_category_icon(), 
                                font=ctk.CTkFont(size=32))
        icon_label.pack(side="left", padx=(10, 15))
        
        info_frame = ctk.CTkFrame(title_frame)
        info_frame.pack(side="left", fill="x", expand=True)
        
        name_label = ctk.CTkLabel(info_frame, text=block.name, 
                                font=ctk.CTkFont(size=18, weight="bold"))
        name_label.pack(anchor="w", pady=(5, 0))
        
        meta_text = f"üè∑Ô∏è {block.category}"
        if block.domain:
            meta_text += f" ‚Ä¢ üåê {block.domain}"
        if block.client:
            meta_text += f" ‚Ä¢ üë§ {block.client}"
        
        meta_label = ctk.CTkLabel(info_frame, text=meta_text, 
                                font=ctk.CTkFont(size=12))
        meta_label.pack(anchor="w", pady=(0, 5))
        
        # Statistiques rapides
        stats_frame = ctk.CTkFrame(header_frame)
        stats_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        stats_text = f"üìä Utilis√© {block.usage_count} fois"
        if block.usage_count > 0:
            stats_text += f" ‚Ä¢ ‚úÖ {block.success_rate:.0f}% de succ√®s"
            if block.average_duration > 0:
                stats_text += f" ‚Ä¢ ‚è±Ô∏è {block.average_duration:.0f}j en moyenne"
        
        stats_label = ctk.CTkLabel(stats_frame, text=stats_text)
        stats_label.pack(padx=10, pady=5)
        
        # Contenu avec onglets simul√©s
        content_frame = ctk.CTkScrollableFrame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # Description
        desc_section = ctk.CTkFrame(content_frame)
        desc_section.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(desc_section, text="üìù Description", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
        
        desc_text = ctk.CTkTextbox(desc_section, height=80)
        desc_text.pack(fill="x", padx=10, pady=(0, 10))
        desc_text.insert("1.0", block.description)
        desc_text.configure(state="disabled")
        
        # N≈ìuds inclus
        if block.nodes:
            nodes_section = ctk.CTkFrame(content_frame)
            nodes_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(nodes_section, text=f"üå≥ Structure ({self.count_nodes_in_structure(block.nodes)} n≈ìuds)", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            nodes_text = ctk.CTkTextbox(nodes_section, height=100)
            nodes_text.pack(fill="x", padx=10, pady=(0, 10))
            nodes_text.insert("1.0", self.format_node_structure(block.nodes))
            nodes_text.configure(state="disabled")
        
        # T√¢ches
        if block.tasks:
            tasks_section = ctk.CTkFrame(content_frame)
            tasks_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(tasks_section, text=f"‚úÖ T√¢ches templates ({len(block.tasks)})", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            for i, task in enumerate(block.tasks[:5]):  # Montrer max 5 t√¢ches
                task_name = task.get('title', 'T√¢che sans nom') if isinstance(task, dict) else str(task)
                task_frame = ctk.CTkFrame(tasks_section)
                task_frame.pack(fill="x", padx=20, pady=2)
                
                ctk.CTkLabel(task_frame, text=f"‚Ä¢ {task_name}").pack(anchor="w", padx=10, pady=5)
            
            if len(block.tasks) > 5:
                ctk.CTkLabel(tasks_section, text=f"... et {len(block.tasks) - 5} autres t√¢ches").pack(anchor="w", padx=20, pady=5)
        
        # Historique d'utilisation
        if block.usage_history:
            history_section = ctk.CTkFrame(content_frame)
            history_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(history_section, text=f"üìà Historique d'utilisation ({len(block.usage_history)} projets)", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            # Afficher les 5 derni√®res utilisations
            recent_usage = sorted(block.usage_history, key=lambda x: x.get('date', ''), reverse=True)[:5]
            
            for usage in recent_usage:
                usage_frame = ctk.CTkFrame(history_section)
                usage_frame.pack(fill="x", padx=20, pady=2)
                
                project_name = usage.get('project_name', 'Projet inconnu')
                date_str = usage.get('date', '')
                if date_str:
                    try:
                        date_obj = datetime.datetime.fromisoformat(date_str)
                        date_display = date_obj.strftime('%d/%m/%Y')
                    except:
                        date_display = date_str
                else:
                    date_display = "Date inconnue"
                
                success_icon = "‚úÖ" if usage.get('success', True) else "‚ùå"
                duration = usage.get('duration_days', 0)
                duration_text = f" ({duration}j)" if duration > 0 else ""
                
                usage_text = f"{success_icon} {project_name} - {date_display}{duration_text}"
                ctk.CTkLabel(usage_frame, text=usage_text).pack(anchor="w", padx=10, pady=5)
        
        # Tags
        if block.tags:
            tags_section = ctk.CTkFrame(content_frame)
            tags_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(tags_section, text="üè∑Ô∏è Tags", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            tags_text = " ".join([f"#{tag}" for tag in block.tags])
            ctk.CTkLabel(tags_section, text=tags_text, 
                        text_color="#2196F3").pack(anchor="w", padx=20, pady=(0, 10))
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(main_frame)
        buttons_frame.pack(fill="x", pady=(20, 0))
        
        ctk.CTkButton(buttons_frame, text="üì• Importer dans le Projet", 
                    command=lambda: [dialog.destroy(), self.import_block_to_project(block)]).pack(side="left", padx=10, pady=10)
        ctk.CTkButton(buttons_frame, text="üìù √âditer T√¢ches", 
                    command=lambda: [dialog.destroy(), self.edit_block_tasks(block)]).pack(side="left", padx=5, pady=10)
        ctk.CTkButton(buttons_frame, text="‚úèÔ∏è Modifier", 
                    command=lambda: [dialog.destroy(), self.edit_block(block)]).pack(side="left", padx=5, pady=10)
        ctk.CTkButton(buttons_frame, text="Fermer", 
                    command=dialog.destroy).pack(side="right", padx=10, pady=10)


    def count_nodes_in_structure(self, node_structure):
        """Compter le nombre de n≈ìuds dans une structure"""
        if isinstance(node_structure, dict):
            count = 1  # Le n≈ìud lui-m√™me
            for child in node_structure.get('children', []):
                count += self.count_nodes_in_structure(child)
            return count
        return 1

    def format_node_structure(self, node_structure, indent=0):
        """Formater la structure des n≈ìuds pour affichage"""
        if isinstance(node_structure, dict):
            text = "  " * indent + f"‚Ä¢ {node_structure.get('text', 'N≈ìud')}\n"
            for child in node_structure.get('children', []):
                text += self.format_node_structure(child, indent + 1)
            return text
        return f"  " * indent + f"‚Ä¢ {str(node_structure)}\n"

    def import_block_to_project(self, block):
        """Importer un bloc dans le projet actuel"""
        # Demander confirmation et options d'import
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"Importer - {block.name}")
        dialog.geometry("600x500")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations du bloc
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text=f"üì¶ Import du bloc : {block.name}", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        stats_text = f"Inclus : {self.count_nodes_in_structure(block.nodes) if block.nodes else 0} n≈ìuds, {len(block.tasks)} t√¢ches"
        ctk.CTkLabel(info_frame, text=stats_text).pack(pady=5)
        
        # Options d'import
        options_frame = ctk.CTkFrame(main_frame)
        options_frame.pack(fill='x', pady=10)
        
        ctk.CTkLabel(options_frame, text="üîß Options d'import", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
        
        # Position d'insertion
        pos_frame = ctk.CTkFrame(options_frame)
        pos_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(pos_frame, text="Position dans l'arbre:").pack(anchor="w", padx=10, pady=5)
        position_var = tk.StringVar(value="racine")
        
        ctk.CTkRadioButton(pos_frame, text="Cr√©er comme nouvelle racine", 
                        variable=position_var, value="racine").pack(anchor="w", padx=20, pady=2)
        ctk.CTkRadioButton(pos_frame, text="Ajouter comme enfant du n≈ìud s√©lectionn√©", 
                        variable=position_var, value="enfant").pack(anchor="w", padx=20, pady=2)
        ctk.CTkRadioButton(pos_frame, text="Remplacer l'arbre actuel", 
                        variable=position_var, value="remplacer").pack(anchor="w", padx=20, pady=2)
        
        # Options d'adaptation
        adapt_frame = ctk.CTkFrame(options_frame)
        adapt_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(adapt_frame, text="Adaptations:").pack(anchor="w", padx=10, pady=5)
        
        import_tasks_var = tk.BooleanVar(value=True)
        adapt_dates_var = tk.BooleanVar(value=True)
        preserve_links_var = tk.BooleanVar(value=True)
        
        ctk.CTkCheckBox(adapt_frame, text="Importer les t√¢ches associ√©es", 
                    variable=import_tasks_var).pack(anchor="w", padx=20, pady=2)
        ctk.CTkCheckBox(adapt_frame, text="Adapter les dates au projet actuel", 
                    variable=adapt_dates_var).pack(anchor="w", padx=20, pady=2)
        ctk.CTkCheckBox(adapt_frame, text="Pr√©server les liens entre n≈ìuds et t√¢ches", 
                    variable=preserve_links_var).pack(anchor="w", padx=20, pady=2)
        
        # Nom du projet pour l'historique
        project_frame = ctk.CTkFrame(main_frame)
        project_frame.pack(fill='x', pady=10)
        
        ctk.CTkLabel(project_frame, text="üìä Suivi d'utilisation", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
        
        ctk.CTkLabel(project_frame, text="Nom du projet (pour statistiques):").pack(anchor="w", padx=10, pady=(5, 0))
        project_name_entry = ctk.CTkEntry(project_frame, width=400, 
                                        placeholder_text="Ex: Projet IoT Client XYZ")
        project_name_entry.pack(fill="x", padx=10, pady=(5, 10))
        
        # Variable pour le r√©sultat
        result = {"imported": False}
        
        def perform_import():
            try:
                position = position_var.get()
                project_name = project_name_entry.get().strip() or "Projet sans nom"
                
                # Import des n≈ìuds
                if block.nodes and position != "skip":
                    imported_nodes = self.import_nodes_from_structure(block.nodes, position)
                    print(f"‚úÖ {len(imported_nodes)} n≈ìuds import√©s")
                
                # Import des t√¢ches
                if import_tasks_var.get() and block.tasks:
                    imported_tasks = self.import_tasks_from_block(block, adapt_dates_var.get(), preserve_links_var.get())
                    print(f"‚úÖ {len(imported_tasks)} t√¢ches import√©es")
                
                # Enregistrer l'utilisation
                block.add_usage_record(project_name, 0, True, "Import dans projet")
                self.save_project_blocks()
                
                # Enregistrement dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Bloc import√© : '{block.name}'",
                        description=f"Bloc import√© dans le projet '{project_name}'.\nPosition: {position}\nT√¢ches incluses: {import_tasks_var.get()}",
                        category="Block"
                    )
                
                result["imported"] = True
                dialog.destroy()
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'import :\n{str(e)}")
        
        def cancel():
            dialog.destroy()
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=20)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="üì• Importer", command=perform_import).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir les vues si import√©
        if result["imported"]:
            if hasattr(self, 'refresh_task_view'):
                self.refresh_task_view()
            if hasattr(self, 'redraw_tree_all'):
                self.redraw_tree_all()
            self.refresh_block_view()
            self.update_status(f"Bloc '{block.name}' import√© avec succ√®s")

    def import_nodes_from_structure(self, node_structure, position="racine"):
        """Importer des n≈ìuds depuis une structure sauvegard√©e"""
        if not hasattr(self, 'tree_nodes'):
            self.tree_nodes = []
        
    def create_new_block(self):
        """Cr√©er un nouveau bloc vide"""
        self.edit_block(None)

    def create_block_from_tree(self):
        """Cr√©er un bloc √† partir de l'arbre actuel"""
        if not hasattr(self, 'tree_nodes') or not self.tree_nodes:
            messagebox.showwarning("Avertissement", "Aucun diagramme en arbre trouv√©!")
            return
        
        if not hasattr(self, 'selected_tree_node') or not self.selected_tree_node:
            messagebox.showwarning("Avertissement", "S√©lectionnez d'abord un n≈ìud racine dans l'arbre!")
            return
        
        # Demander les informations du bloc
        dialog = ctk.CTkToplevel(self)
        dialog.title("Cr√©er un Bloc depuis l'Arbre")
        dialog.geometry("500x400")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations du n≈ìud s√©lectionn√©
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text="üå≥ N≈ìud racine s√©lectionn√©", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        ctk.CTkLabel(info_frame, text=f"N≈ìud: {self.selected_tree_node.text}").pack(anchor='w', padx=10)
        
        # Compter les descendants
        descendants = self.selected_tree_node.get_all_descendants()
        ctk.CTkLabel(info_frame, text=f"Sous-n≈ìuds inclus: {len(descendants)}").pack(anchor='w', padx=10, pady=(0, 10))
        
        # Nom du bloc
        ctk.CTkLabel(main_frame, text="Nom du bloc:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        name_entry = ctk.CTkEntry(main_frame, width=400)
        name_entry.pack(fill='x', pady=(0, 10))
        name_entry.insert(0, f"Bloc - {self.selected_tree_node.text}")
        
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        desc_textbox.insert("1.0", f"Bloc cr√©√© √† partir du n≈ìud '{self.selected_tree_node.text}' et ses {len(descendants)} sous-n≈ìuds.")
        
        # Cat√©gorie
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        category_var = tk.StringVar(value="Process")
        categories = ["Process", "Testing", "CI/CD", "Hardware", "Software", "Integration", "Validation", "Documentation", "Planning", "Quality", "Security", "General"]
        category_menu = ctk.CTkOptionMenu(main_frame, values=categories, variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Domaine
        ctk.CTkLabel(main_frame, text="Domaine:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        domain_var = tk.StringVar(value="General")
        domains = ["General", "Embedded", "Web", "Mobile", "IoT", "Desktop", "Cloud", "AI/ML", "Data"]
        domain_menu = ctk.CTkOptionMenu(main_frame, values=domains, variable=domain_var)
        domain_menu.pack(fill='x', pady=(0, 10))
        
        # Client
        ctk.CTkLabel(main_frame, text="Client (optionnel):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        client_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Nom du client sp√©cifique")
        client_entry.pack(fill='x', pady=(0, 10))
        
        # Tags
        ctk.CTkLabel(main_frame, text="Tags (s√©par√©s par des virgules):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        tags_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="standard, test√©, √©prouv√©")
        tags_entry.pack(fill='x', pady=(0, 20))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_block():
            if not name_entry.get().strip():
                messagebox.showerror("Erreur", "Le nom du bloc est obligatoire!")
                return
            
            # Cr√©er le bloc
            new_block = ProjectBlock(
                name=name_entry.get().strip(),
                description=desc_textbox.get("1.0", "end-1c"),
                category=category_var.get(),
                domain=domain_var.get(),
                client=client_entry.get().strip()
            )
            
            # Traiter les tags
            tags_text = tags_entry.get().strip()
            if tags_text:
                new_block.tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
            
            # Sauvegarder les n≈ìuds
            new_block.nodes = self.serialize_tree_branch(self.selected_tree_node)
            
            # Chercher les t√¢ches li√©es
            if hasattr(self, 'tasks'):
                linked_tasks = [task for task in self.tasks if task.linked_node and 
                            (task.linked_node == self.selected_tree_node or task.linked_node in descendants)]
                new_block.tasks = [task.to_dict() for task in linked_tasks]
            
            # Ajouter √† la biblioth√®que
            self.project_blocks.append(new_block)
            self.save_project_blocks()
            
            # Enregistrement dans le journal
            if hasattr(self, 'add_automatic_log_entry'):
                self.add_automatic_log_entry(
                    title=f"Bloc cr√©√© : '{new_block.name}'",
                    description=f"Nouveau bloc cr√©√© depuis l'arbre.\nN≈ìuds inclus: {len(new_block.nodes)}\nT√¢ches li√©es: {len(new_block.tasks)}",
                    category="Block"
                )
            
            result["saved"] = True
            dialog.destroy()
        
        def cancel():
            dialog.destroy()
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Cr√©er le Bloc", command=save_block).pack(side='right')
        
        # Focus sur le nom
        name_entry.focus()
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_block_view()
            self.update_status("Bloc cr√©√© depuis l'arbre")

    def serialize_tree_branch(self, root_node):
        """S√©rialiser une branche d'arbre en format JSON"""
        def node_to_dict(node):
            return {
                'text': node.text,
                'x': node.x,
                'y': node.y,
                'color': node.color,
                'border_color': node.border_color,
                'children': [node_to_dict(child) for child in node.children]
            }
        
        return node_to_dict(root_node)

    def view_block_details(self, block):
        """Afficher les d√©tails complets d'un bloc"""
        # Cr√©er une nouvelle fen√™tre
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"D√©tails - {block.name}")
        dialog.geometry("800x700")
        dialog.transient(self)
        
        # Frame principal avec onglets
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # En-t√™te
        header_frame = ctk.CTkFrame(main_frame)
        header_frame.pack(fill="x", pady=(0, 20))
        
        # Titre avec ic√¥ne
        title_frame = ctk.CTkFrame(header_frame)
        title_frame.pack(fill="x", padx=10, pady=10)
        
        icon_label = ctk.CTkLabel(title_frame, text=block.get_category_icon(), 
                                font=ctk.CTkFont(size=32))
        icon_label.pack(side="left", padx=(10, 15))
        
        info_frame = ctk.CTkFrame(title_frame)
        info_frame.pack(side="left", fill="x", expand=True)
        
        name_label = ctk.CTkLabel(info_frame, text=block.name, 
                                font=ctk.CTkFont(size=18, weight="bold"))
        name_label.pack(anchor="w", pady=(5, 0))
        
        meta_text = f"üè∑Ô∏è {block.category}"
        if block.domain:
            meta_text += f" ‚Ä¢ üåê {block.domain}"
        if block.client:
            meta_text += f" ‚Ä¢ üë§ {block.client}"
        
        meta_label = ctk.CTkLabel(info_frame, text=meta_text, 
                                font=ctk.CTkFont(size=12))
        meta_label.pack(anchor="w", pady=(0, 5))
        
        # Statistiques rapides
        stats_frame = ctk.CTkFrame(header_frame)
        stats_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        stats_text = f"üìä Utilis√© {block.usage_count} fois"
        if block.usage_count > 0:
            stats_text += f" ‚Ä¢ ‚úÖ {block.success_rate:.0f}% de succ√®s"
            if block.average_duration > 0:
                stats_text += f" ‚Ä¢ ‚è±Ô∏è {block.average_duration:.0f}j en moyenne"
        
        stats_label = ctk.CTkLabel(stats_frame, text=stats_text)
        stats_label.pack(padx=10, pady=5)
        
        # Contenu avec onglets simul√©s
        content_frame = ctk.CTkScrollableFrame(main_frame)
        content_frame.pack(fill="both", expand=True)
        
        # Description
        desc_section = ctk.CTkFrame(content_frame)
        desc_section.pack(fill="x", padx=10, pady=10)
        
        ctk.CTkLabel(desc_section, text="üìù Description", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
        
        desc_text = ctk.CTkTextbox(desc_section, height=80)
        desc_text.pack(fill="x", padx=10, pady=(0, 10))
        desc_text.insert("1.0", block.description)
        desc_text.configure(state="disabled")
        
        # N≈ìuds inclus
        if block.nodes:
            nodes_section = ctk.CTkFrame(content_frame)
            nodes_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(nodes_section, text=f"üå≥ Structure ({self.count_nodes_in_structure(block.nodes)} n≈ìuds)", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            nodes_text = ctk.CTkTextbox(nodes_section, height=100)
            nodes_text.pack(fill="x", padx=10, pady=(0, 10))
            nodes_text.insert("1.0", self.format_node_structure(block.nodes))
            nodes_text.configure(state="disabled")
        
        # T√¢ches
        if block.tasks:
            tasks_section = ctk.CTkFrame(content_frame)
            tasks_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(tasks_section, text=f"‚úÖ T√¢ches templates ({len(block.tasks)})", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            for i, task in enumerate(block.tasks[:5]):  # Montrer max 5 t√¢ches
                task_name = task.get('title', 'T√¢che sans nom') if isinstance(task, dict) else str(task)
                task_frame = ctk.CTkFrame(tasks_section)
                task_frame.pack(fill="x", padx=20, pady=2)
                
                ctk.CTkLabel(task_frame, text=f"‚Ä¢ {task_name}").pack(anchor="w", padx=10, pady=5)
            
            if len(block.tasks) > 5:
                ctk.CTkLabel(tasks_section, text=f"... et {len(block.tasks) - 5} autres t√¢ches").pack(anchor="w", padx=20, pady=5)
        
        # Historique d'utilisation
        if block.usage_history:
            history_section = ctk.CTkFrame(content_frame)
            history_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(history_section, text=f"üìà Historique d'utilisation ({len(block.usage_history)} projets)", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            # Afficher les 5 derni√®res utilisations
            recent_usage = sorted(block.usage_history, key=lambda x: x.get('date', ''), reverse=True)[:5]
            
            for usage in recent_usage:
                usage_frame = ctk.CTkFrame(history_section)
                usage_frame.pack(fill="x", padx=20, pady=2)
                
                project_name = usage.get('project_name', 'Projet inconnu')
                date_str = usage.get('date', '')
                if date_str:
                    try:
                        date_obj = datetime.datetime.fromisoformat(date_str)
                        date_display = date_obj.strftime('%d/%m/%Y')
                    except:
                        date_display = date_str
                else:
                    date_display = "Date inconnue"
                
                success_icon = "‚úÖ" if usage.get('success', True) else "‚ùå"
                duration = usage.get('duration_days', 0)
                duration_text = f" ({duration}j)" if duration > 0 else ""
                
                usage_text = f"{success_icon} {project_name} - {date_display}{duration_text}"
                ctk.CTkLabel(usage_frame, text=usage_text).pack(anchor="w", padx=10, pady=5)
        
        # Tags
        if block.tags:
            tags_section = ctk.CTkFrame(content_frame)
            tags_section.pack(fill="x", padx=10, pady=10)
            
            ctk.CTkLabel(tags_section, text="üè∑Ô∏è Tags", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
            
            tags_text = " ".join([f"#{tag}" for tag in block.tags])
            ctk.CTkLabel(tags_section, text=tags_text, 
                        text_color="#2196F3").pack(anchor="w", padx=20, pady=(0, 10))
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(main_frame)
        buttons_frame.pack(fill="x", pady=(20, 0))
        
        ctk.CTkButton(buttons_frame, text="üì• Importer dans le Projet", 
                    command=lambda: [dialog.destroy(), self.import_block_to_project(block)]).pack(side="left", padx=10, pady=10)
        ctk.CTkButton(buttons_frame, text="‚úèÔ∏è Modifier", 
                    command=lambda: [dialog.destroy(), self.edit_block(block)]).pack(side="left", padx=5, pady=10)
        ctk.CTkButton(buttons_frame, text="Fermer", 
                    command=dialog.destroy).pack(side="right", padx=10, pady=10)
        ctk.CTkButton(buttons_frame, text="üìù √âditer T√¢ches", 
                    command=lambda: [dialog.destroy(), self.edit_block_tasks(block)]).pack(side="left", padx=5, pady=10)

    def count_nodes_in_structure(self, node_structure):
        """Compter le nombre de n≈ìuds dans une structure"""
        if isinstance(node_structure, dict):
            count = 1  # Le n≈ìud lui-m√™me
            for child in node_structure.get('children', []):
                count += self.count_nodes_in_structure(child)
            return count
        return 1

    def format_node_structure(self, node_structure, indent=0):
        """Formater la structure des n≈ìuds pour affichage"""
        if isinstance(node_structure, dict):
            text = "  " * indent + f"‚Ä¢ {node_structure.get('text', 'N≈ìud')}\n"
            for child in node_structure.get('children', []):
                text += self.format_node_structure(child, indent + 1)
            return text
        return f"  " * indent + f"‚Ä¢ {str(node_structure)}\n"

    def import_block_to_project(self, block):
        """Importer un bloc dans le projet actuel"""
        # Demander confirmation et options d'import
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"Importer - {block.name}")
        dialog.geometry("600x500")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations du bloc
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(info_frame, text=f"üì¶ Import du bloc : {block.name}", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        stats_text = f"Inclus : {self.count_nodes_in_structure(block.nodes) if block.nodes else 0} n≈ìuds, {len(block.tasks)} t√¢ches"
        ctk.CTkLabel(info_frame, text=stats_text).pack(pady=5)
        
        # Options d'import
        options_frame = ctk.CTkFrame(main_frame)
        options_frame.pack(fill='x', pady=10)
        
        ctk.CTkLabel(options_frame, text="üîß Options d'import", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
        
        # Position d'insertion
        pos_frame = ctk.CTkFrame(options_frame)
        pos_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(pos_frame, text="Position dans l'arbre:").pack(anchor="w", padx=10, pady=5)
        position_var = tk.StringVar(value="racine")
        
        ctk.CTkRadioButton(pos_frame, text="Cr√©er comme nouvelle racine", 
                        variable=position_var, value="racine").pack(anchor="w", padx=20, pady=2)
        ctk.CTkRadioButton(pos_frame, text="Ajouter comme enfant du n≈ìud s√©lectionn√©", 
                        variable=position_var, value="enfant").pack(anchor="w", padx=20, pady=2)
        ctk.CTkRadioButton(pos_frame, text="Remplacer l'arbre actuel", 
                        variable=position_var, value="remplacer").pack(anchor="w", padx=20, pady=2)
        
        # Options d'adaptation
        adapt_frame = ctk.CTkFrame(options_frame)
        adapt_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkLabel(adapt_frame, text="Adaptations:").pack(anchor="w", padx=10, pady=5)
        
        import_tasks_var = tk.BooleanVar(value=True)
        adapt_dates_var = tk.BooleanVar(value=True)
        preserve_links_var = tk.BooleanVar(value=True)
        
        ctk.CTkCheckBox(adapt_frame, text="Importer les t√¢ches associ√©es", 
                    variable=import_tasks_var).pack(anchor="w", padx=20, pady=2)
        ctk.CTkCheckBox(adapt_frame, text="Adapter les dates au projet actuel", 
                    variable=adapt_dates_var).pack(anchor="w", padx=20, pady=2)
        ctk.CTkCheckBox(adapt_frame, text="Pr√©server les liens entre n≈ìuds et t√¢ches", 
                    variable=preserve_links_var).pack(anchor="w", padx=20, pady=2)
        
        # Nom du projet pour l'historique
        project_frame = ctk.CTkFrame(main_frame)
        project_frame.pack(fill='x', pady=10)
        
        ctk.CTkLabel(project_frame, text="üìä Suivi d'utilisation", 
                    font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", padx=10, pady=(10, 5))
        
        ctk.CTkLabel(project_frame, text="Nom du projet (pour statistiques):").pack(anchor="w", padx=10, pady=(5, 0))
        project_name_entry = ctk.CTkEntry(project_frame, width=400, 
                                        placeholder_text="Ex: Projet IoT Client XYZ")
        project_name_entry.pack(fill="x", padx=10, pady=(5, 10))
        
        # Variable pour le r√©sultat
        result = {"imported": False}
        
        def perform_import():
            try:
                position = position_var.get()
                project_name = project_name_entry.get().strip() or "Projet sans nom"
                
                # Import des n≈ìuds
                if block.nodes and position != "skip":
                    imported_nodes = self.import_nodes_from_structure(block.nodes, position)
                    print(f"‚úÖ {len(imported_nodes)} n≈ìuds import√©s")
                
                # Import des t√¢ches
                if import_tasks_var.get() and block.tasks:
                    imported_tasks = self.import_tasks_from_block(block, adapt_dates_var.get(), preserve_links_var.get())
                    print(f"‚úÖ {len(imported_tasks)} t√¢ches import√©es")
                
                # Enregistrer l'utilisation
                block.add_usage_record(project_name, 0, True, "Import dans projet")
                self.save_project_blocks()
                
                # Enregistrement dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Bloc import√© : '{block.name}'",
                        description=f"Bloc import√© dans le projet '{project_name}'.\nPosition: {position}\nT√¢ches incluses: {import_tasks_var.get()}",
                        category="Block"
                    )
                
                result["imported"] = True
                dialog.destroy()
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'import :\n{str(e)}")
        
        def cancel():
            dialog.destroy()
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=20)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="üì• Importer", command=perform_import).pack(side='right')
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir les vues si import√©
        if result["imported"]:
            if hasattr(self, 'refresh_task_view'):
                self.refresh_task_view()
            if hasattr(self, 'redraw_tree_all'):
                self.redraw_tree_all()
            self.refresh_block_view()
            self.update_status(f"Bloc '{block.name}' import√© avec succ√®s")

    def import_nodes_from_structure(self, node_structure, position="racine"):
        """Importer des n≈ìuds depuis une structure sauvegard√©e"""
        if not hasattr(self, 'tree_nodes'):
            self.tree_nodes = []
        
        def create_node_from_dict(node_dict, parent=None, offset_x=0, offset_y=0):
            """Cr√©er un n≈ìud depuis un dictionnaire"""
            # Cr√©er le n≈ìud
            new_node = TreeNode(
                text=node_dict.get('text', 'N≈ìud'),
                x=node_dict.get('x', 100) + offset_x,
                y=node_dict.get('y', 100) + offset_y
            )
            new_node.color = node_dict.get('color', '#E3F2FD')
            new_node.border_color = node_dict.get('border_color', '#2196F3')
            
            # D√©finir le parent
            if parent:
                parent.add_child(new_node)
            
            # Ajouter √† la liste des n≈ìuds
            self.tree_nodes.append(new_node)
            
            # Cr√©er les enfants r√©cursivement
            for child_dict in node_dict.get('children', []):
                create_node_from_dict(child_dict, new_node, offset_x, offset_y)
            
            return new_node
        
        imported_nodes = []
        
        if position == "racine":
            # Nouvelle racine - d√©caler pour √©viter les conflits
            offset_x = 500 if self.tree_nodes else 0
            offset_y = 100
            root_node = create_node_from_dict(node_structure, None, offset_x, offset_y)
            imported_nodes.append(root_node)
            
        elif position == "enfant" and hasattr(self, 'selected_tree_node') and self.selected_tree_node:
            # Enfant du n≈ìud s√©lectionn√©
            offset_x = self.selected_tree_node.x + 150
            offset_y = self.selected_tree_node.y + 100
            child_node = create_node_from_dict(node_structure, self.selected_tree_node, offset_x, offset_y)
            imported_nodes.append(child_node)
            
        elif position == "remplacer":
            # Remplacer l'arbre actuel
            if messagebox.askyesno("Confirmation", "Remplacer compl√®tement l'arbre actuel ?"):
                self.tree_nodes.clear()
                root_node = create_node_from_dict(node_structure, None, 400, 200)
                imported_nodes.append(root_node)
        
        # Redessiner l'arbre
        if hasattr(self, 'redraw_tree_all'):
            self.redraw_tree_all()
            
        return imported_nodes

    def import_tasks_from_block(self, block, adapt_dates=True, preserve_links=True):
        """Importer les t√¢ches depuis un bloc"""
        if not hasattr(self, 'tasks'):
            self.tasks = []
        
        imported_tasks = []
        
        for task_data in block.tasks:
            # Cr√©er la t√¢che
            if isinstance(task_data, dict):
                new_task = Task(
                    title=task_data.get('title', 'T√¢che import√©e'),
                    description=task_data.get('description', ''),
                    status=task_data.get('status', '√Ä faire'),
                    priority=task_data.get('priority', 'Moyenne'),
                    assignee=task_data.get('assignee', ''),
                    due_date=task_data.get('due_date', '') if not adapt_dates else self.adapt_date_to_current(),
                    linked_node=None  # Sera li√© plus tard si preserve_links
                )
            else:
                # Ancienne structure ou format diff√©rent
                new_task = Task(title=str(task_data), description="T√¢che import√©e depuis un bloc")
            
            # Lien avec n≈ìud si demand√©
            if preserve_links and isinstance(task_data, dict) and task_data.get('linked_node'):
                # Chercher le n≈ìud correspondant dans l'arbre actuel
                for node in getattr(self, 'tree_nodes', []):
                    if node.text == task_data['linked_node']:
                        new_task.linked_node = node
                        break
            
            self.tasks.append(new_task)
            imported_tasks.append(new_task)
        
        return imported_tasks

    def adapt_date_to_current(self):
        """Adapter une date au projet actuel (ajouter 1 semaine par exemple)"""
        from datetime import datetime, timedelta
        future_date = datetime.now() + timedelta(days=7)
        return future_date.strftime('%d/%m/%Y')

    def edit_block(self, block):
        """√âditer un bloc (nouveau ou existant)"""
        # Cr√©er une fen√™tre de dialogue
        dialog = ctk.CTkToplevel(self)
        dialog.title("√âditer le Bloc" if block else "Nouveau Bloc")
        dialog.geometry("600x700")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Informations de base
        basic_frame = ctk.CTkFrame(main_frame)
        basic_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(basic_frame, text="üì¶ Informations du bloc", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        # Nom
        ctk.CTkLabel(main_frame, text="Nom du bloc:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        name_entry = ctk.CTkEntry(main_frame, width=500)
        name_entry.pack(fill='x', pady=(0, 10))
        if block:
            name_entry.insert(0, block.name)
        
        # Description
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=100, width=500)
        desc_textbox.pack(fill='x', pady=(0, 10))
        if block:
            desc_textbox.insert("1.0", block.description)
        
        # Cat√©gorie
        ctk.CTkLabel(main_frame, text="Cat√©gorie:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        category_var = tk.StringVar(value=block.category if block else "Process")
        categories = ["Process", "Testing", "CI/CD", "Hardware", "Software", "Integration", "Validation", "Documentation", "Planning", "Quality", "Security", "General"]
        category_menu = ctk.CTkOptionMenu(main_frame, values=categories, variable=category_var)
        category_menu.pack(fill='x', pady=(0, 10))
        
        # Domaine
        ctk.CTkLabel(main_frame, text="Domaine:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        domain_var = tk.StringVar(value=block.domain if block else "General")
        domains = ["General", "Embedded", "Web", "Mobile", "IoT", "Desktop", "Cloud", "AI/ML", "Data", "Automotive", "Medical", "Aerospace"]
        domain_menu = ctk.CTkOptionMenu(main_frame, values=domains, variable=domain_var)
        domain_menu.pack(fill='x', pady=(0, 10))
        
        # Client
        ctk.CTkLabel(main_frame, text="Client sp√©cifique (optionnel):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        client_entry = ctk.CTkEntry(main_frame, width=500, placeholder_text="Nom du client pour des blocs sp√©cialis√©s")
        client_entry.pack(fill='x', pady=(0, 10))
        if block:
            client_entry.insert(0, block.client)
        
        # Tags
        ctk.CTkLabel(main_frame, text="Tags (s√©par√©s par des virgules):", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        tags_entry = ctk.CTkEntry(main_frame, width=500, placeholder_text="standard, √©prouv√©, rapide, complexe")
        tags_entry.pack(fill='x', pady=(0, 10))
        if block and block.tags:
            tags_entry.insert(0, ", ".join(block.tags))
        
        # Notes d'utilisation
        ctk.CTkLabel(main_frame, text="Notes d'utilisation:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(10, 5))
        notes_textbox = ctk.CTkTextbox(main_frame, height=80, width=500)
        notes_textbox.pack(fill='x', pady=(0, 10))
        notes_placeholder = """Conseils d'utilisation, pr√©requis, points d'attention...
    Ex: - N√©cessite un environnement de test isol√©
        - Pr√©voir 2j suppl√©mentaires pour la premi√®re utilisation
        - Compatible uniquement avec les projets > 1 mois"""
        if block:
            notes_textbox.insert("1.0", block.notes)
        else:
            notes_textbox.insert("1.0", notes_placeholder)
        
        # Statistiques (en lecture seule si bloc existant)
        if block:
            stats_frame = ctk.CTkFrame(main_frame)
            stats_frame.pack(fill='x', pady=10)
            
            ctk.CTkLabel(stats_frame, text="üìä Statistiques d'utilisation", 
                        font=ctk.CTkFont(size=14, weight="bold")).pack(pady=(10, 5))
            
            stats_text = f"""‚Ä¢ Utilis√© {block.usage_count} fois
    ‚Ä¢ Taux de succ√®s : {block.success_rate:.0f}%
    ‚Ä¢ Dur√©e moyenne : {block.average_duration:.0f} jours
    ‚Ä¢ Cr√©√© le : {block.created_date.strftime('%d/%m/%Y')}
    ‚Ä¢ Derni√®re utilisation : {block.last_used.strftime('%d/%m/%Y') if block.last_used else 'Jamais'}"""
            
            ctk.CTkLabel(stats_frame, text=stats_text, justify="left").pack(padx=10, pady=(0, 10))
        
        # Variable pour le r√©sultat
        result = {"saved": False}
        
        def save_block():
            if not name_entry.get().strip():
                messagebox.showerror("Erreur", "Le nom du bloc est obligatoire!")
                return
            
            if block:
                # Modifier le bloc existant
                block.name = name_entry.get().strip()
                block.description = desc_textbox.get("1.0", "end-1c")
                block.category = category_var.get()
                block.domain = domain_var.get()
                block.client = client_entry.get().strip()
                block.notes = notes_textbox.get("1.0", "end-1c")
                
                # Traiter les tags
                tags_text = tags_entry.get().strip()
                if tags_text:
                    block.tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
                else:
                    block.tags = []
            else:
                # Cr√©er un nouveau bloc
                new_block = ProjectBlock(
                    name=name_entry.get().strip(),
                    description=desc_textbox.get("1.0", "end-1c"),
                    category=category_var.get(),
                    domain=domain_var.get(),
                    client=client_entry.get().strip()
                )
                new_block.notes = notes_textbox.get("1.0", "end-1c")
                
                # Traiter les tags
                tags_text = tags_entry.get().strip()
                if tags_text:
                    new_block.tags = [tag.strip() for tag in tags_text.split(",") if tag.strip()]
                
                # Ajouter √† la biblioth√®que
                self.project_blocks.append(new_block)
            
            # Sauvegarder
            self.save_project_blocks()
            
            # Enregistrement dans le journal
            if hasattr(self, 'add_automatic_log_entry'):
                action = "modifi√©" if block else "cr√©√©"
                self.add_automatic_log_entry(
                    title=f"Bloc {action} : '{name_entry.get().strip()}'",
                    description=f"Bloc {action} dans la biblioth√®que.\nCat√©gorie: {category_var.get()}\nDomaine: {domain_var.get()}",
                    category="Block"
                )
            
            result["saved"] = True
            dialog.destroy()
        
        def cancel():
            dialog.destroy()
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=20)
        
        ctk.CTkButton(button_frame, text="Annuler", command=cancel).pack(side='right', padx=(5, 0))
        save_text = "Sauvegarder" if block else "Cr√©er le Bloc"
        ctk.CTkButton(button_frame, text=save_text, command=save_block).pack(side='right')
        
        # Focus sur le nom
        name_entry.focus()
        
        # Attendre la fermeture
        dialog.wait_window()
        
        # Rafra√Æchir l'affichage si sauvegard√©
        if result["saved"]:
            self.refresh_block_view()
            action = "modifi√©" if block else "cr√©√©"
            self.update_status(f"Bloc {action} avec succ√®s")

    def delete_block(self, block):
        """Supprimer un bloc de la biblioth√®que"""
        if messagebox.askyesno("Confirmation", 
                            f"Supprimer d√©finitivement le bloc '{block.name}' ?\n\n"
                            f"Cette action est irr√©versible.\n"
                            f"Le bloc a √©t√© utilis√© {block.usage_count} fois."):
            try:
                self.project_blocks.remove(block)
                self.save_project_blocks()
                
                # Enregistrement dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Bloc supprim√© : '{block.name}'",
                        description=f"Bloc supprim√© de la biblioth√®que.\nUtilisations: {block.usage_count}\nTaux de succ√®s: {block.success_rate:.0f}%",
                        category="Block"
                    )
                
                self.refresh_block_view()
                self.update_status("Bloc supprim√©")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la suppression :\n{str(e)}")

    def export_blocks(self):
        """Exporter la biblioth√®que de blocs"""
        if not self.project_blocks:
            messagebox.showwarning("Avertissement", "Aucun bloc √† exporter!")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="Exporter la biblioth√®que de blocs"
        )
        
        if filename:
            try:
                export_data = {
                    'metadata': {
                        'export_date': datetime.datetime.now().isoformat(),
                        'total_blocks': len(self.project_blocks),
                        'exported_by': 'PCSwmm Application',
                        'version': '1.0'
                    },
                    'blocks': [block.to_dict() for block in self.project_blocks]
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, ensure_ascii=False, indent=2)
                
                messagebox.showinfo("Export r√©ussi", 
                                f"Biblioth√®que export√©e avec succ√®s !\n\n"
                                f"Fichier: {filename}\n"
                                f"Blocs export√©s: {len(self.project_blocks)}")
                
                self.update_status("Biblioth√®que export√©e")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'export :\n{str(e)}")

    def import_blocks(self):
        """Importer une biblioth√®que de blocs"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="Importer une biblioth√®que de blocs"
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    import_data = json.load(f)
                
                # V√©rifier la structure
                if 'blocks' not in import_data:
                    messagebox.showerror("Erreur", "Format de fichier invalide!")
                    return
                
                imported_blocks = import_data['blocks']
                metadata = import_data.get('metadata', {})
                
                # Demander confirmation
                total_blocks = len(imported_blocks)
                export_date = metadata.get('export_date', 'Inconnue')
                
                if not messagebox.askyesno("Confirmation d'import", 
                                        f"Importer {total_blocks} bloc(s) ?\n\n"
                                        f"Export√© le: {export_date}\n"
                                        f"Version: {metadata.get('version', 'Inconnue')}\n\n"
                                        f"Les blocs avec des noms identiques seront renomm√©s."):
                    return
                
                # Importer les blocs
                imported_count = 0
                renamed_count = 0
                
                for block_data in imported_blocks:
                    try:
                        new_block = ProjectBlock.from_dict(block_data)
                        
                        # V√©rifier les doublons de nom
                        original_name = new_block.name
                        counter = 1
                        while any(b.name == new_block.name for b in self.project_blocks):
                            new_block.name = f"{original_name} (Import√© {counter})"
                            counter += 1
                            renamed_count += 1
                        
                        self.project_blocks.append(new_block)
                        imported_count += 1
                        
                    except Exception as e:
                        print(f"Erreur lors de l'import du bloc : {str(e)}")
                        continue
                
                # Sauvegarder
                self.save_project_blocks()
                
                # Message de confirmation
                message = f"Import r√©ussi !\n\n"
                message += f"‚Ä¢ {imported_count} bloc(s) import√©(s)\n"
                if renamed_count > 0:
                    message += f"‚Ä¢ {renamed_count} bloc(s) renomm√©(s) (doublons)\n"
                
                messagebox.showinfo("Import r√©ussi", message)
                
                # Enregistrement dans le journal
                if hasattr(self, 'add_automatic_log_entry'):
                    self.add_automatic_log_entry(
                        title=f"Biblioth√®que import√©e : {imported_count} blocs",
                        description=f"Import depuis: {filename}\nBlocs import√©s: {imported_count}\nBlocs renomm√©s: {renamed_count}",
                        category="Block"
                    )
                
                self.refresh_block_view()
                self.update_status(f"{imported_count} blocs import√©s")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'import :\n{str(e)}")

    def generate_usage_report(self):
        """G√©n√©rer un rapport d'utilisation des blocs"""
        if not self.project_blocks:
            messagebox.showwarning("Avertissement", "Aucun bloc dans la biblioth√®que!")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".md",
            filetypes=[("Markdown files", "*.md"), ("Text files", "*.txt")],
            title="Sauvegarder le rapport d'usage"
        )
        
        if filename:
            try:
                # Trier les blocs par usage
                blocks_by_usage = sorted(self.project_blocks, key=lambda x: x.usage_count, reverse=True)
                
                content = f"""# üìä Rapport d'Usage - Biblioth√®que de Blocs

    *G√©n√©r√© le : {datetime.datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
    *Total de blocs : {len(self.project_blocks)}*

    ## üìà Statistiques Globales

    """
                
                # Statistiques g√©n√©rales
                total_usage = sum(b.usage_count for b in self.project_blocks)
                used_blocks = len([b for b in self.project_blocks if b.usage_count > 0])
                avg_success = sum(b.success_rate for b in self.project_blocks if b.usage_count > 0) / max(used_blocks, 1)
                
                content += f"""- **Total d'utilisations** : {total_usage}
    - **Blocs utilis√©s** : {used_blocks}/{len(self.project_blocks)} ({used_blocks/len(self.project_blocks)*100:.0f}%)
    - **Taux de succ√®s moyen** : {avg_success:.0f}%
    - **Blocs inutilis√©s** : {len(self.project_blocks) - used_blocks}

    """
                
                # Top 10 des blocs les plus utilis√©s
                content += "## üèÜ Top 10 - Blocs les Plus Utilis√©s\n\n"
                
                for i, block in enumerate(blocks_by_usage[:10]):
                    if block.usage_count > 0:
                        success_indicator = "üü¢" if block.success_rate > 80 else "üü°" if block.success_rate > 60 else "üî¥"
                        content += f"{i+1}. **{block.name}** {success_indicator}\n"
                        content += f"   - Utilis√© {block.usage_count} fois\n"
                        content += f"   - Succ√®s : {block.success_rate:.0f}%\n"
                        content += f"   - Dur√©e moyenne : {block.average_duration:.0f}j\n"
                        content += f"   - Cat√©gorie : {block.category}\n\n"
                
                # Analyse par cat√©gorie
                content += "## üè∑Ô∏è Analyse par Cat√©gorie\n\n"
                
                categories = {}
                for block in self.project_blocks:
                    if block.category not in categories:
                        categories[block.category] = {
                            'count': 0, 'total_usage': 0, 'avg_success': [], 'blocks': []
                        }
                    categories[block.category]['count'] += 1
                    categories[block.category]['total_usage'] += block.usage_count
                    if block.usage_count > 0:
                        categories[block.category]['avg_success'].append(block.success_rate)
                    categories[block.category]['blocks'].append(block)
                
                for category, data in sorted(categories.items()):
                    avg_success_cat = sum(data['avg_success']) / max(len(data['avg_success']), 1)
                    content += f"### {block.get_category_icon() if hasattr(block, 'get_category_icon') else 'üì¶'} {category}\n\n"
                    content += f"- **Nombre de blocs** : {data['count']}\n"
                    content += f"- **Utilisations totales** : {data['total_usage']}\n"
                    content += f"- **Succ√®s moyen** : {avg_success_cat:.0f}%\n"
                    content += f"- **Blocs utilis√©s** : {len(data['avg_success'])}/{data['count']}\n\n"
                
                # Analyse par domaine
                content += "## üåê Analyse par Domaine\n\n"
                
                domains = {}
                for block in self.project_blocks:
                    domain = block.domain or "Non sp√©cifi√©"
                    if domain not in domains:
                        domains[domain] = {'count': 0, 'total_usage': 0, 'blocks': []}
                    domains[domain]['count'] += 1
                    domains[domain]['total_usage'] += block.usage_count
                    domains[domain]['blocks'].append(block)
                
                for domain, data in sorted(domains.items(), key=lambda x: x[1]['total_usage'], reverse=True):
                    content += f"- **{domain}** : {data['count']} blocs, {data['total_usage']} utilisations\n"
                
                # Blocs probl√©matiques
                problematic_blocks = [b for b in self.project_blocks if b.usage_count > 0 and b.success_rate < 70]
                if problematic_blocks:
                    content += "\n## ‚ö†Ô∏è Blocs √† Am√©liorer (< 70% de succ√®s)\n\n"
                    for block in sorted(problematic_blocks, key=lambda x: x.success_rate):
                        content += f"- **{block.name}** : {block.success_rate:.0f}% de succ√®s ({block.usage_count} utilisations)\n"
                        if block.notes:
                            content += f"  Notes : {block.notes[:100]}...\n"
                        content += "\n"
                
                # Recommandations
                content += "\n## üí° Recommandations\n\n"
                
                unused_blocks = [b for b in self.project_blocks if b.usage_count == 0]
                if unused_blocks:
                    content += f"1. **Promouvoir l'utilisation** : {len(unused_blocks)} blocs n'ont jamais √©t√© utilis√©s\n"
                
                if problematic_blocks:
                    content += f"2. **Am√©liorer la qualit√©** : {len(problematic_blocks)} blocs ont un taux de succ√®s faible\n"
                
                high_success_blocks = [b for b in self.project_blocks if b.usage_count > 2 and b.success_rate > 90]
                if high_success_blocks:
                    content += f"3. **Dupliquer les bonnes pratiques** : {len(high_success_blocks)} blocs ont un excellent taux de succ√®s\n"
                
                content += f"\n---\n\n*Rapport g√©n√©r√© automatiquement par l'application de gestion de projet*"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                messagebox.showinfo("Rapport g√©n√©r√©", 
                                f"Rapport d'usage sauvegard√© avec succ√®s !\n\n"
                                f"Fichier: {filename}")
                
                self.update_status("Rapport d'usage g√©n√©r√©")
                
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la g√©n√©ration du rapport :\n{str(e)}")

    def edit_block_tasks(self, block):
        """√âditer les t√¢ches d'un bloc"""
        dialog = ctk.CTkToplevel(self)
        dialog.title(f"T√¢ches - {block.name}")
        dialog.geometry("700x600")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        # Frame principal
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # En-t√™te
        header_frame = ctk.CTkFrame(main_frame)
        header_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(header_frame, text=f"üìù T√¢ches du bloc : {block.name}", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        # Toolbar avec boutons
        toolbar_frame = ctk.CTkFrame(main_frame)
        toolbar_frame.pack(fill="x", pady=(0, 10))
        
        ctk.CTkButton(toolbar_frame, text="‚ûï Nouvelle T√¢che", 
                    command=lambda: self.add_task_to_block(block, task_list_frame)).pack(side="left", padx=5, pady=5)
        ctk.CTkButton(toolbar_frame, text="üì• Importer depuis Projet", 
                    command=lambda: self.import_project_tasks_to_block(block, task_list_frame)).pack(side="left", padx=5, pady=5)
        ctk.CTkButton(toolbar_frame, text="üóëÔ∏è Tout Supprimer", 
                    command=lambda: self.clear_block_tasks(block, task_list_frame)).pack(side="right", padx=5, pady=5)
        
        # Liste des t√¢ches
        task_list_frame = ctk.CTkScrollableFrame(main_frame)
        task_list_frame.pack(fill="both", expand=True, pady=(0, 20))
        
        # Afficher les t√¢ches existantes
        self.refresh_block_tasks_view(block, task_list_frame)
        
        # Boutons de fermeture
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill="x")
        
        ctk.CTkButton(button_frame, text="üíæ Sauvegarder", 
                    command=lambda: self.save_block_and_close(block, dialog)).pack(side="right", padx=(5, 0))
        ctk.CTkButton(button_frame, text="Fermer", 
                    command=dialog.destroy).pack(side="right")

    def refresh_block_tasks_view(self, block, parent_frame):
        """Rafra√Æchir l'affichage des t√¢ches du bloc"""
        # Nettoyer le contenu
        for widget in parent_frame.winfo_children():
            widget.destroy()
        
        if not block.tasks:
            # Message si aucune t√¢che
            no_tasks_label = ctk.CTkLabel(parent_frame, 
                                        text="Aucune t√¢che dans ce bloc\n\nUtilisez les boutons ci-dessus pour en ajouter", 
                                        font=ctk.CTkFont(size=14))
            no_tasks_label.pack(pady=50)
            return
        
        # Afficher chaque t√¢che
        for i, task_data in enumerate(block.tasks):
            self.create_block_task_widget(task_data, i, block, parent_frame)

    def create_block_task_widget(self, task_data, index, block, parent_frame):
        """Cr√©er le widget pour une t√¢che du bloc"""
        task_frame = ctk.CTkFrame(parent_frame)
        task_frame.pack(fill="x", padx=10, pady=5)
        
        # En-t√™te de la t√¢che
        header_frame = ctk.CTkFrame(task_frame)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # Titre et priorit√©
        title = task_data.get('title', 'T√¢che sans nom') if isinstance(task_data, dict) else str(task_data)
        priority = task_data.get('priority', 'Moyenne') if isinstance(task_data, dict) else 'Moyenne'
        
        priority_colors = {"Basse": "#4CAF50", "Moyenne": "#FF9800", "Critique": "#F44336"}
        priority_color = priority_colors.get(priority, "#666666")
        
        title_label = ctk.CTkLabel(header_frame, text=f"üìã {title}", 
                                font=ctk.CTkFont(size=12, weight="bold"))
        title_label.pack(side="left", anchor="w")
        
        priority_label = ctk.CTkLabel(header_frame, text=f"üî• {priority}", 
                                    text_color=priority_color, font=ctk.CTkFont(size=10))
        priority_label.pack(side="right", padx=5)
        
        # D√©tails de la t√¢che
        if isinstance(task_data, dict):
            details_frame = ctk.CTkFrame(task_frame)
            details_frame.pack(fill="x", padx=10, pady=2)
            
            if task_data.get('description'):
                desc_text = task_data['description'][:100] + "..." if len(task_data['description']) > 100 else task_data['description']
                ctk.CTkLabel(details_frame, text=f"üìù {desc_text}", 
                            font=ctk.CTkFont(size=10)).pack(anchor="w", padx=5, pady=2)
            
            if task_data.get('assignee'):
                ctk.CTkLabel(details_frame, text=f"üë§ {task_data['assignee']}", 
                            font=ctk.CTkFont(size=10)).pack(anchor="w", padx=5, pady=2)
            
            if task_data.get('due_date'):
                ctk.CTkLabel(details_frame, text=f"üìÖ {task_data['due_date']}", 
                            font=ctk.CTkFont(size=10)).pack(anchor="w", padx=5, pady=2)
        
        # Boutons d'action
        actions_frame = ctk.CTkFrame(task_frame)
        actions_frame.pack(fill="x", padx=10, pady=(5, 10))
        
        ctk.CTkButton(actions_frame, text="‚úèÔ∏è Modifier", width=80, height=25,
                    command=lambda: self.edit_block_task(task_data, index, block, parent_frame)).pack(side="left", padx=2)
        ctk.CTkButton(actions_frame, text="üóëÔ∏è Supprimer", width=80, height=25,
                    command=lambda: self.delete_block_task(index, block, parent_frame)).pack(side="right", padx=2)

    def add_task_to_block(self, block, parent_frame):
        """Ajouter une nouvelle t√¢che au bloc"""
        self.edit_block_task(None, -1, block, parent_frame)

    def edit_block_task(self, task_data, index, block, parent_frame):
        """√âditer une t√¢che du bloc"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("√âditer T√¢che du Bloc" if task_data else "Nouvelle T√¢che du Bloc")
        dialog.geometry("500x600")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 150,
            self.winfo_rooty() + 150
        ))
        
        # Frame principal
        main_frame = ctk.CTkScrollableFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Champs de saisie
        ctk.CTkLabel(main_frame, text="Titre:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        title_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Ex: Configurer l'environnement de test")
        title_entry.pack(fill='x', pady=(0, 10))
        
        ctk.CTkLabel(main_frame, text="Description:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        desc_textbox = ctk.CTkTextbox(main_frame, height=100, width=400)
        desc_textbox.pack(fill='x', pady=(0, 10))
        
        ctk.CTkLabel(main_frame, text="Priorit√©:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        priority_var = tk.StringVar(value="Moyenne")
        priority_menu = ctk.CTkOptionMenu(main_frame, values=["Basse", "Moyenne", "Critique"], variable=priority_var)
        priority_menu.pack(fill='x', pady=(0, 10))
        
        ctk.CTkLabel(main_frame, text="Responsable:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        assignee_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Nom ou r√¥le du responsable")
        assignee_entry.pack(fill='x', pady=(0, 10))
        
        ctk.CTkLabel(main_frame, text="√âch√©ance estim√©e:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        due_entry = ctk.CTkEntry(main_frame, width=400, placeholder_text="Ex: J+5, Semaine 2, 15/01/2025")
        due_entry.pack(fill='x', pady=(0, 10))
        
        ctk.CTkLabel(main_frame, text="Statut:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(0, 5))
        status_var = tk.StringVar(value="Template")
        status_menu = ctk.CTkOptionMenu(main_frame, values=["Template", "√Ä faire", "En cours", "Termin√©"], variable=status_var)
        status_menu.pack(fill='x', pady=(0, 10))
        
        # Notes sp√©ciales pour les blocs
        ctk.CTkLabel(main_frame, text="Notes pour r√©utilisation:", font=ctk.CTkFont(weight="bold")).pack(anchor='w', pady=(10, 5))
        notes_textbox = ctk.CTkTextbox(main_frame, height=80, width=400)
        notes_textbox.pack(fill='x', pady=(0, 20))
        notes_textbox.insert("1.0", "Conseils pour adapter cette t√¢che aux futurs projets...")
        
        # Pr√©-remplir si modification
        if task_data and isinstance(task_data, dict):
            title_entry.insert(0, task_data.get('title', ''))
            desc_textbox.insert("1.0", task_data.get('description', ''))
            priority_var.set(task_data.get('priority', 'Moyenne'))
            assignee_entry.insert(0, task_data.get('assignee', ''))
            due_entry.insert(0, task_data.get('due_date', ''))
            status_var.set(task_data.get('status', 'Template'))
            if task_data.get('notes'):
                notes_textbox.delete("1.0", "end")
                notes_textbox.insert("1.0", task_data['notes'])
        
        def save_task():
            if not title_entry.get().strip():
                messagebox.showerror("Erreur", "Le titre est obligatoire!")
                return
            
            new_task_data = {
                'title': title_entry.get().strip(),
                'description': desc_textbox.get("1.0", "end-1c"),
                'priority': priority_var.get(),
                'assignee': assignee_entry.get().strip(),
                'due_date': due_entry.get().strip(),
                'status': status_var.get(),
                'notes': notes_textbox.get("1.0", "end-1c"),
                'created_date': datetime.datetime.now().strftime('%d/%m/%Y')
            }
            
            if index >= 0:
                # Modification
                block.tasks[index] = new_task_data
            else:
                # Ajout
                block.tasks.append(new_task_data)
            
            dialog.destroy()
            self.refresh_block_tasks_view(block, parent_frame)
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill='x', pady=10)
        
        ctk.CTkButton(button_frame, text="Annuler", command=dialog.destroy).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Sauvegarder", command=save_task).pack(side='right')

    def delete_block_task(self, index, block, parent_frame):
        """Supprimer une t√¢che du bloc"""
        task_title = block.tasks[index].get('title', 'T√¢che') if isinstance(block.tasks[index], dict) else str(block.tasks[index])
        
        if messagebox.askyesno("Confirmation", f"Supprimer la t√¢che '{task_title}' ?"):
            block.tasks.pop(index)
            self.refresh_block_tasks_view(block, parent_frame)

    def import_project_tasks_to_block(self, block, parent_frame):
        """Importer les t√¢ches du projet actuel dans le bloc"""
        if not hasattr(self, 'tasks') or not self.tasks:
            messagebox.showwarning("Avertissement", "Aucune t√¢che dans le projet actuel!")
            return
        
        # Dialog de s√©lection
        dialog = ctk.CTkToplevel(self)
        dialog.title("Importer des T√¢ches du Projet")
        dialog.geometry("600x500")
        dialog.transient(self)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.geometry("+%d+%d" % (
            self.winfo_rootx() + 100,
            self.winfo_rooty() + 100
        ))
        
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(main_frame, text="S√©lectionner les t√¢ches √† importer", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        # Liste des t√¢ches avec checkboxes
        tasks_frame = ctk.CTkScrollableFrame(main_frame)
        tasks_frame.pack(fill="both", expand=True, pady=(0, 20))
        
        task_vars = []
        for task in self.tasks:
            var = tk.BooleanVar()
            task_vars.append((var, task))
            
            task_frame = ctk.CTkFrame(tasks_frame)
            task_frame.pack(fill="x", padx=10, pady=2)
            
            ctk.CTkCheckBox(task_frame, text=f"{task.title} ({task.priority})", 
                        variable=var).pack(anchor="w", padx=10, pady=5)
        
        def import_selected():
            imported_count = 0
            for var, task in task_vars:
                if var.get():
                    task_dict = task.to_dict()
                    # Adapter pour le bloc
                    task_dict['status'] = 'Template'
                    task_dict['notes'] = f"Import√© du projet le {datetime.datetime.now().strftime('%d/%m/%Y')}"
                    block.tasks.append(task_dict)
                    imported_count += 1
            
            if imported_count > 0:
                messagebox.showinfo("Import r√©ussi", f"{imported_count} t√¢che(s) import√©e(s)!")
                self.refresh_block_tasks_view(block, parent_frame)
            
            dialog.destroy()
        
        # Boutons
        button_frame = ctk.CTkFrame(main_frame)
        button_frame.pack(fill="x")
        
        ctk.CTkButton(button_frame, text="Annuler", command=dialog.destroy).pack(side='right', padx=(5, 0))
        ctk.CTkButton(button_frame, text="Importer S√©lectionn√©es", command=import_selected).pack(side='right')

    def clear_block_tasks(self, block, parent_frame):
        """Supprimer toutes les t√¢ches du bloc"""
        if block.tasks and messagebox.askyesno("Confirmation", f"Supprimer toutes les {len(block.tasks)} t√¢ches du bloc ?"):
            block.tasks.clear()
            self.refresh_block_tasks_view(block, parent_frame)

    def save_block_and_close(self, block, dialog):
        """Sauvegarder le bloc et fermer la dialog"""
        self.save_project_blocks()
        messagebox.showinfo("Sauvegarde", "T√¢ches du bloc sauvegard√©es!")
        dialog.destroy()
        self.refresh_block_view()

    def save_project(self):
        """Sauvegarder tout le projet dans un fichier"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".prjt",
            filetypes=[("Project files", "*.prjt"), ("JSON files", "*.json"), ("All files", "*.*")],
            title="Sauvegarder le projet"
        )
        
        if not filename:
            return
        
        try:
            # Cr√©er la structure de donn√©es compl√®te du projet
            project_data = {
                'metadata': {
                    'project_name': os.path.splitext(os.path.basename(filename))[0],
                    'save_date': datetime.datetime.now().isoformat(),
                    'app_version': '1.0',
                    'file_type': 'prjt',
                    'description': f'Projet sauvegard√© le {datetime.datetime.now().strftime("%d/%m/%Y √† %H:%M")}'
                },
                
                # Donn√©es de la charte de projet
                'charter_data': getattr(self, 'charter_data', {}),
                
                # Donn√©es de l'arbre
                'tree_data': {
                    'nodes': self.serialize_all_tree_nodes() if hasattr(self, 'tree_nodes') and self.tree_nodes else [],
                    'selected_node': self.selected_tree_node.text if hasattr(self, 'selected_tree_node') and self.selected_tree_node else None
                },
                
                # Donn√©es des t√¢ches
                'tasks_data': {
                    'tasks': [task.to_dict() for task in getattr(self, 'tasks', [])],
                    'view_mode': getattr(self, 'task_view_mode', 'kanban')
                },
                
                # Donn√©es du journal
                'log_data': {
                    'entries': [entry.to_dict() for entry in getattr(self, 'log_entries', [])],
                    'filters': {
                        'author': getattr(self, 'log_filter_author', 'Tous'),
                        'category': getattr(self, 'log_filter_category', 'Toutes'),
                        'date_from': getattr(self, 'log_filter_date_from', ''),
                        'date_to': getattr(self, 'log_filter_date_to', '')
                    }
                },
                
                # Donn√©es des documents
                'documents_data': {
                    'documents': [self.serialize_document(doc) for doc in getattr(self, 'documents', [])],
                    'view_mode': getattr(self, 'doc_view_mode', 'grid'),
                    'filters': {
                        'category': getattr(self, 'doc_filter_category', 'Toutes'),
                        'node': getattr(self, 'doc_filter_node', 'Tous')
                    }
                },
                
                # Donn√©es des blocs (r√©f√©rence seulement)
                'blocks_data': {
                    'used_blocks': [block.to_dict() for block in getattr(self, 'project_blocks', [])],
                    'view_mode': getattr(self, 'block_view_mode', 'grid'),
                    'filters': {
                        'category': getattr(self, 'block_filter_category', 'Toutes'),
                        'domain': getattr(self, 'block_filter_domain', 'Tous')
                    }
                },
                
                # Configuration de l'interface
                'ui_config': {
                    'appearance_mode': ctk.get_appearance_mode(),
                    'last_module': self.get_current_module(),
                    'window_size': f"{self.winfo_width()}x{self.winfo_height()}",
                    'window_position': f"+{self.winfo_x()}+{self.winfo_y()}"
                }
            }
            
            # Sauvegarder le fichier principal
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(project_data, f, ensure_ascii=False, indent=2)
            
            # Sauvegarder les fichiers associ√©s si n√©cessaire
            project_dir = os.path.splitext(filename)[0] + "_files"
            if not os.path.exists(project_dir):
                os.makedirs(project_dir)
            
            # Copier les documents dans le dossier du projet
            documents_saved = 0
            if hasattr(self, 'documents') and self.documents:
                documents_project_dir = os.path.join(project_dir, "documents")
                if not os.path.exists(documents_project_dir):
                    os.makedirs(documents_project_dir)
                
                for doc in self.documents:
                    if os.path.exists(doc.stored_path):
                        new_path = os.path.join(documents_project_dir, f"{doc.id}_{doc.filename}")
                        shutil.copy2(doc.stored_path, new_path)
                        documents_saved += 1
            
            # Message de confirmation
            message = f"Projet sauvegard√© avec succ√®s !\n\n"
            message += f"üìÅ Fichier : {filename}\n"
            message += f"üå≥ N≈ìuds : {len(getattr(self, 'tree_nodes', []))}\n"
            message += f"‚úÖ T√¢ches : {len(getattr(self, 'tasks', []))}\n"
            message += f"üí¨ Entr√©es journal : {len(getattr(self, 'log_entries', []))}\n"
            message += f"üìÑ Documents : {documents_saved}\n"
            message += f"üì¶ Blocs : {len(getattr(self, 'project_blocks', []))}\n"
            
            messagebox.showinfo("Sauvegarde r√©ussie", message)
            
            # Enregistrement dans le journal
            if hasattr(self, 'add_automatic_log_entry'):
                self.add_automatic_log_entry(
                    title="Projet sauvegard√©",
                    description=f"Projet complet sauvegard√© dans {filename}\nDonn√©es incluses: arbre, t√¢ches, journal, documents, blocs",
                    category="Status"
                )
            
            self.update_status(f"Projet sauvegard√© : {os.path.basename(filename)}")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde :\n{str(e)}")

    def load_project(self):
        """Charger un projet depuis un fichier"""
        filename = filedialog.askopenfilename(
            filetypes=[("Project files", "*.prjt"), ("JSON files", "*.json"), ("All files", "*.*")],
            title="Ouvrir un projet"
        )
        
        if not filename:
            return
        
        # Demander confirmation si des donn√©es existent d√©j√†
        if self.has_project_data():
            if not messagebox.askyesno("Confirmation", 
                                    "Charger un nouveau projet effacera toutes les donn√©es actuelles.\n\n"
                                    "Voulez-vous d'abord sauvegarder le projet actuel ?"):
                # Proposer de sauvegarder
                if messagebox.askyesno("Sauvegarde", "Sauvegarder le projet actuel avant de continuer ?"):
                    self.save_project()
        
        try:
            # Charger le fichier
            with open(filename, 'r', encoding='utf-8') as f:
                project_data = json.load(f)
            
            # V√©rifier la structure
            if 'metadata' not in project_data:
                messagebox.showerror("Erreur", "Format de fichier invalide !")
                return
            
            # V√©rifier le type de fichier
            metadata = project_data.get('metadata', {})
            file_type = metadata.get('file_type', '')
            if file_type and file_type != 'prjt':
                if not messagebox.askyesno("Avertissement", 
                                        f"Ce fichier semble √™tre de type '{file_type}' et non '.prjt'.\n\n"
                                        f"Voulez-vous quand m√™me essayer de l'ouvrir ?"):
                    return
            
            # Effacer les donn√©es actuelles
            self.clear_all_project_data()
            
            # Charger les m√©tadonn√©es
            project_name = metadata.get('project_name', 'Projet sans nom')
            save_date = metadata.get('save_date', 'Date inconnue')
            
            # Charger la charte de projet
            self.charter_data = project_data.get('charter_data', {})
            
            # Charger l'arbre
            tree_data = project_data.get('tree_data', {})
            if tree_data.get('nodes'):
                self.load_tree_from_data(tree_data['nodes'])
                # Restaurer la s√©lection
                selected_node_text = tree_data.get('selected_node')
                if selected_node_text and hasattr(self, 'tree_nodes'):
                    for node in self.tree_nodes:
                        if node.text == selected_node_text:
                            self.selected_tree_node = node
                            node.selected = True
                            break
            
            # Charger les t√¢ches
            tasks_data = project_data.get('tasks_data', {})
            self.tasks = []
            for task_dict in tasks_data.get('tasks', []):
                task = Task.from_dict(task_dict, getattr(self, 'tree_nodes', []))
                self.tasks.append(task)
            self.task_view_mode = tasks_data.get('view_mode', 'kanban')
            
            # Charger le journal
            log_data = project_data.get('log_data', {})
            self.log_entries = []
            for entry_dict in log_data.get('entries', []):
                entry = LogEntry.from_dict(entry_dict)
                self.log_entries.append(entry)
            
            # Restaurer les filtres du journal
            log_filters = log_data.get('filters', {})
            self.log_filter_author = log_filters.get('author', 'Tous')
            self.log_filter_category = log_filters.get('category', 'Toutes')
            self.log_filter_date_from = log_filters.get('date_from', '')
            self.log_filter_date_to = log_filters.get('date_to', '')
            
            # Charger les documents
            documents_data = project_data.get('documents_data', {})
            self.documents = []
            project_dir = os.path.splitext(filename)[0] + "_files"
            documents_project_dir = os.path.join(project_dir, "documents")
            
            loaded_docs = 0
            for doc_dict in documents_data.get('documents', []):
                doc = self.deserialize_document(doc_dict, documents_project_dir)
                if doc:
                    self.documents.append(doc)
                    loaded_docs += 1
            
            self.doc_view_mode = documents_data.get('view_mode', 'grid')
            doc_filters = documents_data.get('filters', {})
            self.doc_filter_category = doc_filters.get('category', 'Toutes')
            self.doc_filter_node = doc_filters.get('node', 'Tous')
            
            # Charger les blocs
            blocks_data = project_data.get('blocks_data', {})
            self.project_blocks = []
            for block_dict in blocks_data.get('used_blocks', []):
                block = ProjectBlock.from_dict(block_dict)
                self.project_blocks.append(block)
            
            self.block_view_mode = blocks_data.get('view_mode', 'grid')
            block_filters = blocks_data.get('filters', {})
            self.block_filter_category = block_filters.get('category', 'Toutes')
            self.block_filter_domain = block_filters.get('domain', 'Tous')
            
            # Restaurer la configuration de l'interface
            ui_config = project_data.get('ui_config', {})
            if ui_config.get('appearance_mode'):
                ctk.set_appearance_mode(ui_config['appearance_mode'])
            
            # Message de confirmation
            message = f"Projet '{project_name}' charg√© avec succ√®s !\n\n"
            message += f"üìÖ Sauvegard√© le : {save_date[:10] if save_date != 'Date inconnue' else save_date}\n"
            message += f"üå≥ N≈ìuds : {len(getattr(self, 'tree_nodes', []))}\n"
            message += f"‚úÖ T√¢ches : {len(self.tasks)}\n"
            message += f"üí¨ Entr√©es journal : {len(self.log_entries)}\n"
            message += f"üìÑ Documents : {loaded_docs}\n"
            message += f"üì¶ Blocs : {len(self.project_blocks)}\n"
            
            messagebox.showinfo("Chargement r√©ussi", message)
            
            # Enregistrement dans le journal
            self.add_automatic_log_entry(
                title="Projet charg√©",
                description=f"Projet '{project_name}' charg√© depuis {filename}\nDonn√©es restaur√©es: arbre, t√¢ches, journal, documents, blocs",
                category="Status"
            )
            
            # Rafra√Æchir l'affichage actuel
            current_module = ui_config.get('last_module', 'home')
            self.restore_module_view(current_module)
            
            self.update_status(f"Projet charg√© : {project_name}")
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors du chargement :\n{str(e)}")

    def serialize_all_tree_nodes(self):
        """S√©rialiser tous les n≈ìuds de l'arbre"""
        if not hasattr(self, 'tree_nodes') or not self.tree_nodes:
            return []
        
        # Trouver les n≈ìuds racines (sans parent)
        root_nodes = [node for node in self.tree_nodes if node.parent is None]
        
        def node_to_dict(node):
            """Convertir un n≈ìud en dictionnaire"""
            return {
                'text': node.text,
                'x': node.x,
                'y': node.y,
                'width': getattr(node, 'width', 80),
                'height': getattr(node, 'height', 40),
                'color': getattr(node, 'color', '#E3F2FD'),
                'text_color': getattr(node, 'text_color', '#000000'),
                'border_color': getattr(node, 'border_color', '#2196F3'),
                'selected': getattr(node, 'selected', False),
                'children': [node_to_dict(child) for child in getattr(node, 'children', [])]
            }
        
        return [node_to_dict(root) for root in root_nodes]

    def load_tree_from_data(self, nodes_data):
        """Charger l'arbre depuis les donn√©es s√©rialis√©es"""
        if not hasattr(self, 'tree_nodes'):
            self.tree_nodes = []
        else:
            self.tree_nodes.clear()
        
        self.selected_tree_node = None
        
        def create_node_from_dict(node_dict, parent=None):
            node = TreeNode(
                text=node_dict.get('text', 'N≈ìud'),
                x=node_dict.get('x', 100),
                y=node_dict.get('y', 100),
                parent=parent
            )
            
            node.width = node_dict.get('width', 80)
            node.height = node_dict.get('height', 40)
            node.color = node_dict.get('color', '#E3F2FD')
            node.text_color = node_dict.get('text_color', '#000000')
            node.border_color = node_dict.get('border_color', '#2196F3')
            node.selected = node_dict.get('selected', False)
            
            if parent:
                parent.add_child(node)
            
            self.tree_nodes.append(node)
            
            # Cr√©er les enfants r√©cursivement
            for child_dict in node_dict.get('children', []):
                create_node_from_dict(child_dict, node)
            
            return node
        
        # Cr√©er tous les n≈ìuds
        for root_dict in nodes_data:
            create_node_from_dict(root_dict)

    def serialize_document(self, doc):
        """S√©rialiser un document pour la sauvegarde"""
        # V√©rifier que upload_date est un datetime
        upload_date_iso = doc.upload_date.isoformat() if isinstance(doc.upload_date, datetime.datetime) else datetime.datetime.now().isoformat()
        
        return {
            'id': getattr(doc, 'id', id(doc)),
            'filename': doc.filename,
            'original_path': getattr(doc, 'file_path', ''),
            'stored_path': getattr(doc, 'stored_path', ''),
            'category': doc.category,
            'version': doc.version,
            'description': getattr(doc, 'description', ''),
            'tags': getattr(doc, 'tags', []),
            'upload_date': upload_date_iso,
            'file_size': getattr(doc, 'file_size', 0),
            'file_type': getattr(doc, 'file_type', ''),
            'linked_node_text': doc.linked_node.text if getattr(doc, 'linked_node', None) else None
        }

    def deserialize_document(self, doc_dict, documents_dir):
        """D√©s√©rialiser un document depuis la sauvegarde"""
        try:
            # R√©cr√©er le document
            doc = Document(
                filename=doc_dict.get('filename', ''),
                file_path=doc_dict.get('original_path', ''),
                category=doc_dict.get('category', 'General'),
                version=doc_dict.get('version', '1.0'),
                description=doc_dict.get('description', '')
            )
            
            doc.id = doc_dict.get('id', id(doc))
            doc.tags = doc_dict.get('tags', [])
            doc.upload_date = datetime.datetime.fromisoformat(doc_dict.get('upload_date', datetime.datetime.now().isoformat()))
            doc.file_size = doc_dict.get('file_size', 0)
            doc.file_type = doc_dict.get('file_type', '')
            
            # Chercher le fichier dans le dossier du projet
            expected_file = os.path.join(documents_dir, f"{doc.id}_{doc.filename}")
            if os.path.exists(expected_file):
                # Copier vers le stockage de l'application
                if not hasattr(self, 'documents_storage_path'):
                    self.documents_storage_path = os.path.join(os.getcwd(), "documents_storage")
                    if not os.path.exists(self.documents_storage_path):
                        os.makedirs(self.documents_storage_path)
                
                new_stored_path = os.path.join(self.documents_storage_path, f"{doc.id}_{doc.filename}")
                shutil.copy2(expected_file, new_stored_path)
                doc.stored_path = new_stored_path
            else:
                print(f"‚ö†Ô∏è Document manquant : {doc.filename}")
                return None
            
            # Lier au n≈ìud si sp√©cifi√©
            linked_node_text = doc_dict.get('linked_node_text')
            if linked_node_text and hasattr(self, 'tree_nodes'):
                for node in self.tree_nodes:
                    if node.text == linked_node_text:
                        doc.linked_node = node
                        break
            
            return doc
            
        except Exception as e:
            print(f"Erreur lors de la d√©s√©rialisation du document : {str(e)}")
            return None

    def has_project_data(self):
        """V√©rifier si des donn√©es de projet existent"""
        return (hasattr(self, 'tree_nodes') and self.tree_nodes) or \
            (hasattr(self, 'tasks') and self.tasks) or \
            (hasattr(self, 'log_entries') and self.log_entries) or \
            (hasattr(self, 'documents') and self.documents) or \
            (hasattr(self, 'charter_data') and self.charter_data)

    def clear_all_project_data(self):
        """Effacer toutes les donn√©es du projet"""
        # Effacer l'arbre
        if hasattr(self, 'tree_nodes'):
            self.tree_nodes.clear()
        self.selected_tree_node = None
        
        # Effacer les t√¢ches
        if hasattr(self, 'tasks'):
            self.tasks.clear()
        
        # Effacer le journal
        if hasattr(self, 'log_entries'):
            self.log_entries.clear()
        
        # Effacer les documents
        if hasattr(self, 'documents'):
            self.documents.clear()
        
        # Effacer les blocs
        if hasattr(self, 'project_blocks'):
            self.project_blocks.clear()
        
        # Effacer la charte
        self.charter_data = {}
        
        # R√©initialiser les filtres
        self.task_view_mode = "kanban"
        self.doc_view_mode = "grid"
        self.block_view_mode = "grid"
        self.log_filter_author = "Tous"
        self.log_filter_category = "Toutes"
        self.log_filter_date_from = ""
        self.log_filter_date_to = ""
        self.doc_filter_category = "Toutes"
        self.doc_filter_node = "Tous"
        self.block_filter_category = "Toutes"
        self.block_filter_domain = "Tous"

    def get_current_module(self):
        """Obtenir le module actuellement affich√©"""
        title = self.main_title.cget("text")
        
        if "Accueil" in title:
            return "home"
        elif "Cadrage" in title:
            return "charter"
        elif "Arbre" in title:
            return "tree"
        elif "T√¢ches" in title:
            return "tasks"
        elif "Journal" in title:
            return "log"
        elif "Documents" in title:
            return "documents"
        elif "Blocs" in title:
            return "blocks"
        else:
            return "home"

    def restore_module_view(self, module):
        """Restaurer la vue d'un module"""
        try:
            if module == "charter":
                self.show_project_charter()
            elif module == "tree":
                self.show_tree_diagram()
            elif module == "tasks":
                self.show_task_tracker()
            elif module == "log":
                self.show_decision_log()
            elif module == "documents":
                self.show_document_manager()
            elif module == "blocks":
                self.show_block_library()
            else:
                self.show_home()
        except:
            # En cas d'erreur, retourner √† l'accueil
            self.show_home()

    def new_project(self):
        """Cr√©er un nouveau projet"""
        if self.has_project_data():
            if not messagebox.askyesno("Nouveau projet", 
                                    "Cr√©er un nouveau projet effacera toutes les donn√©es actuelles.\n\n"
                                    "Voulez-vous d'abord sauvegarder le projet actuel ?"):
                return
            
            # Proposer de sauvegarder
            if messagebox.askyesno("Sauvegarde", "Sauvegarder le projet actuel avant de continuer ?"):
                self.save_project()
        
        # Effacer toutes les donn√©es
        self.clear_all_project_data()
        
        # Retourner √† l'accueil
        self.show_home()
        
        # Enregistrement dans le journal
        if hasattr(self, 'add_automatic_log_entry'):
            self.add_automatic_log_entry(
                title="Nouveau projet cr√©√©",
                description="Nouveau projet initialis√©, toutes les donn√©es pr√©c√©dentes ont √©t√© effac√©es",
                category="Status"
            )
        
        self.update_status("Nouveau projet cr√©√©")
        messagebox.showinfo("Nouveau projet", "Nouveau projet cr√©√© avec succ√®s !")

    def get_project_statistics(self):
        """Obtenir les statistiques du projet actuel"""
        stats = []
        
        # Arbre
        tree_count = len(getattr(self, 'tree_nodes', []))
        stats.append(f"üå≥ N≈ìuds d'arbre : {tree_count}")
        
        # T√¢ches
        tasks_count = len(getattr(self, 'tasks', []))
        if tasks_count > 0:
            todo = len([t for t in self.tasks if t.status == "√Ä faire"])
            in_progress = len([t for t in self.tasks if t.status == "En cours"])
            done = len([t for t in self.tasks if t.status == "Termin√©"])
            stats.append(f"‚úÖ T√¢ches : {tasks_count} (üîÑ {todo} √† faire, ‚ö° {in_progress} en cours, ‚úÖ {done} termin√©es)")
        else:
            stats.append(f"‚úÖ T√¢ches : {tasks_count}")
        
        # Journal
        log_count = len(getattr(self, 'log_entries', []))
        if log_count > 0:
            manual = len([e for e in self.log_entries if e.entry_type == "manual"])
            auto = len([e for e in self.log_entries if e.entry_type == "auto"])
            stats.append(f"üí¨ Entr√©es journal : {log_count} (üë§ {manual} manuelles, ü§ñ {auto} automatiques)")
        else:
            stats.append(f"üí¨ Entr√©es journal : {log_count}")
        
        # Documents
        docs_count = len(getattr(self, 'documents', []))
        if docs_count > 0:
            total_size = sum(doc.file_size for doc in self.documents)
            size_text = f"{total_size/(1024*1024):.1f} MB" if total_size > 1024*1024 else f"{total_size/1024:.1f} KB"
            stats.append(f"üìÑ Documents : {docs_count} ({size_text})")
        else:
            stats.append(f"üìÑ Documents : {docs_count}")
        
        # Blocs
        blocks_count = len(getattr(self, 'project_blocks', []))
        stats.append(f"üì¶ Blocs r√©utilisables : {blocks_count}")
        
        # Charte
        charter_status = "‚úÖ Compl√©t√©e" if getattr(self, 'charter_data', {}) else "‚ùå Vide"
        stats.append(f"üìã Charte de projet : {charter_status}")
        
        return "\n".join(stats)


def main():
    """Fonction principale"""
    app = App()
    
    # Gestionnaire de fermeture
    app.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # Centrer la fen√™tre
    app.update_idletasks()
    width = app.winfo_width()
    height = app.winfo_height()
    x = (app.winfo_screenwidth() // 2) - (width // 2)
    y = (app.winfo_screenheight() // 2) - (height // 2)
    app.geometry(f'{width}x{height}+{x}+{y}')
    
    # D√©marrer l'application
    app.mainloop()

if __name__ == "__main__":
    main()